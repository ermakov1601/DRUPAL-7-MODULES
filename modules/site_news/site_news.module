<?php

/**
 * @file
 * Главный файл модуля пресс-центр SiteNews.
 *
 * Файл содержит основные функции, которые реализуют функционал модуля пресс-центр SiteNews.
 * Модуль позволяет быстро организовать на сайте раздел для публикации новостей и статей.
 * Многоязыковая поддержка, возможность прикрепления фотографий и текстовых документов для скачивания.
*/

/**
 * Implement hook_node_info().
 */
function site_news_node_info() {
  return array(
    'site_news' => array(
      'name' => t('Press center'),
      'base' => 'site_news',
      'description' => t('The press center is a document used for creation of other type of information publications.'),
    )
  );
}

/**
 * Implement hook_permission().
 */
function site_news_permission() {
  return array(
    'administer site news' => array(
      'title' => t('Administer settings'),
    ),
    'view site news content' => array(
      'title' => t('Allow view'),
    ),
    'create site news content' => array(
      'title' => t('Allow create'),
    ),
    'edit site news content' => array(
      'title' => t('Allow edit'),
    ),
    'delete site news content' => array(
      'title' => t('Allow delete'),
    ),
  );
}

/**
 * Implement hook_node_access().
 */
function site_news_node_access($node, $op, $account) {
  if ($op == 'view') {
    if (user_access('view site news content', $account)) {
      return TRUE;
    }
  }
  if ($op == 'create') {
    if (user_access('create site news content', $account)) {
      return TRUE;
    }
  }
  if ($op == 'update') {
    if (user_access('edit site news content', $account)) {
      return TRUE;
    }
  }
  if ($op == 'delete') {
    if (user_access('delete site news content', $account)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_form().
 */
function site_news_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implement hook_menu().
 */
function site_news_menu() {
  module_load_include('inc', 'pathauto');

  $items = array();
  $items['admin/config/kvantstudio/site-news'] = array(
    'title' => 'Settings of the press centre',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_news_settings_form'),
    'access arguments' => array('administer site news'),
    'file' => 'site_news.settings.inc',
  );

  // Мультиязычная ссылка.
  $languages = language_list('enabled');
  $languages = $languages[1];
  foreach ($languages as $key => $language) {
    // Название ссылки в зависимости от языка.
    $title = site_news_title_callback($key);
    $site_news_link = pathauto_cleanstring($title);

    // Определяем синоним для корневого каталога.
    $path = array();
    $pid = db_query("SELECT n.pid FROM {url_alias} n WHERE n.source = :source", array(':source' => 'site-news-catalog'))->fetchField();
    if ($pid) {
      $path['pid'] = $pid;
    }
    $path['alias'] = $site_news_link;
    $path['source'] = 'site-news-catalog';
    path_save($path);
  }

  $items['site-news-catalog'] = array(
    // Заголовок только на английском.
    'title' => site_news_title_callback('en'),
    'page callback' => 'site_news_press_center',
    'access arguments' => array('view site news content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'file' => 'site_news.category.inc',
  );

  return $items;
}

/**
 * Implements title callback.
 */
function site_news_title_callback($language = NULL) {
  // Если активирован модуль поддержки перевода переменных (для мультиязычных сайтов).
  if (module_exists("i18n_variable") &&  $language) {
    // Заголовок на текущем языке сайта.
    $title = i18n_variable_get('site_news_title', $language, t('Press center'));
  }
  else {
    // Заголовок по умолчанию для текущего языка.
    $title = variable_get('site_news_title', t('Press center'));
  }
  return trim($title);
}

/**
 * Implements hook_theme().
 */
function site_news_theme() {
  return array(
    'site_news' => array(
      'render element' => 'elements',
      'template' => 'templates/site-news',
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter(): node_form.
 */
function site_news_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'site_news_node_form' && module_exists('i18n_taxonomy')) {
    $field_language = $form['field_site_news_taxonomy']['#language'];
    $vocabulary = taxonomy_vocabulary_machine_name_load('site_news_vocabulary');
    $field_language_values = $form['field_site_news_taxonomy'][$field_language];
    $field_language_values['#options'] = kvantstudio_select_terms($vocabulary->vid, FALSE, FALSE, "", $field_language);
    $field_attributes = $form['field_site_news_taxonomy']['#attributes'];

    $form['field_site_news_taxonomy'] = array(
      '#type' => 'container',
      '#attributes' => $field_attributes,
      '#tree' => TRUE,
      '#language' => $field_language,
      '#access' => TRUE,
      $field_language => $field_language_values,
    );
  }
}

/**
* Implementation of hook_taxonomy_term_load().
*/
function site_news_taxonomy_term_load($terms) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_news_vocabulary');
  foreach ($terms as $term) {
    if ($vocabulary->vid == $term->vid) {
      // Добавляем объекту термина алиас.
      $alias = db_query("SELECT n.alias FROM {url_alias} n WHERE n.source = :source", array(':source' => 'taxonomy/term/' . $term->tid))->fetchField();
      $terms[$term->tid]->alias = $alias;

      // Если отсутствует язык у термина, присваиваем ему параметр нейтрального языка.
      if (!isset($terms[$term->tid]->language)) {
        $terms[$term->tid]->language = 'und';
      }
    }
  }
}

/**
* Implementation of hook_taxonomy_term_delete.
*/
function site_news_taxonomy_term_delete($term) {
  // Выбираем перечень всех содержимого принадлежащих категории.
  $result = db_query('SELECT n.nid FROM {taxonomy_index} n WHERE n.tid = :tid', array(':tid' => $term->tid));
  foreach ($result as $row) {
    node_delete($row->nid);
  }
  path_taxonomy_term_delete($term);
}

/**
 * Implements hook_node_view().
 */
function site_news_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'site_news' && $view_mode == 'full') {
    module_load_include('inc', 'pathauto');

    // Подключаем зависимые файлы.
    drupal_add_css(drupal_get_path('module', 'site_news') .'/css/site_news.css');

    // Создаем обьекты термина.
    $field_items = field_get_items('node', $node, 'field_site_news_taxonomy');
    if ($field_items) {
      $field_first_item = reset($field_items);
      $tid = $field_first_item['tid'];
    }
    $term = taxonomy_term_load($tid);
    $parents = array_reverse(taxonomy_get_parents_all($tid));
    if (empty($term->alias)) {
      $term->alias = 'taxonomy/term/' . $term->tid;
    }

    // Количество терминов.
    $term_count = site_news_term_count();

    // Название пресс-центра.
    $title = site_news_title_callback();

    // Путь по умолчанию для одного языка.
    $path = pathauto_cleanstring(variable_get('site_news_title', t('Press center')));

    // Формируем breadcrumb ссылки.
    $breadcrumb = drupal_get_breadcrumb();
    $count_breadcrumb = count($breadcrumb) + 1;
    $title = '<span itemprop="name">' . $title . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
    $breadcrumb[] = l($title, $path, array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));
    if ($term_count) {
      while (count($parents) - 1) {
        $current = array_shift($parents);
        $alias = db_query("SELECT n.alias FROM {url_alias} n WHERE n.source=:source", array(':source' => 'taxonomy/term/' . $current->tid))->fetchField();

        $count_breadcrumb++;
        $title = '<span itemprop="name">' . $current->name . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
        $breadcrumb[] = l($title, $alias, array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));
      }

      $count_breadcrumb++;
      $title = '<span itemprop="name">' . $term->name . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
      $breadcrumb[] = l($title, $term->alias, array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));
    }
    drupal_set_breadcrumb($breadcrumb);

    $node->content += array(
      '#theme' => 'site_news',
      '#node' => $node,
      '#view_mode' => $view_mode,
      '#language' => $langcode,
    );
  }
}

/**
 * Return rendered taxonomy tree.
 */
function site_news_taxonomy_tree($vocabulary_name) {
  $terms = &drupal_static(__FUNCTION__);
  if (!isset($terms)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('site_news_vocabulary');
    $terms = taxonomy_get_tree($vocabulary->vid);
  }
//   if (count($terms) > 1) {
  return theme('item_list', array('items' => _site_news_taxonomy_tree($terms)));
//  }
//  else {
//    return "";
//  }
}

/**
 * Helper for site_news_taxonomy_tree()
 */
function _site_news_taxonomy_tree($terms, $parent = 0) {
  global $language;
  $items = array();
  foreach ($terms as $term) {
    if (isset($term->language)) {
      if (in_array($parent, $term->parents) && $term->language == $language->language) {
        $link = l(t('@value', array('@value' => $term->name)), 'taxonomy/term/' . $term->tid);
        $items[] = array(
          'data' => $link,
          'children' => _site_news_taxonomy_tree($terms, $term->tid),
        );
      }
    }
    else {
      if (in_array($parent, $term->parents)) {
        $link = l(t('@value', array('@value' => $term->name)), 'taxonomy/term/' . $term->tid);
        $items[] = array(
          'data' => $link,
          'children' => _site_news_taxonomy_tree($terms, $term->tid),
        );
      }
    }
  }
  return $items;
}

/**
 * Process variables for site_news.tpl.php
 *
 * Most themes utilize their own copy of node.tpl.php. The default is located
 * inside "modules/node/node.tpl.php". Look in there for the full list of
 * variables.
 *
 * The $variables array contains the following arguments:
 * - $node
 * - $view_mode
 * - $page
 *
 * @see site_news.tpl.php
 */
function template_preprocess_site_news(&$variables) {
  // Режим отображения node.
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['teaser'] = $variables['view_mode'] == 'teaser';

  // Определяем объект node.
  $variables['node'] = $variables['elements']['#node'];
  $node = $variables['node'];

  $uri = entity_uri('node', $node);
  $variables['node_url'] = url($uri['path'], $uri['options']);
  $variables['title'] = check_plain($node->title);

  // Объединяем массивы $node с $variables.
  $variables = array_merge((array) $node, $variables);

  // Форируем переменные для вывода значений полей node.
  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  field_attach_preprocess('node', $node, $variables['content'], $variables);

  // Формируем значения переменных в зависимости от настроек типа материала node.
  if (variable_get('node_submitted_' . $node->type, TRUE)) {
    $variables['display_submitted'] = TRUE;
    $variables['created'] = format_date($node->created, 'short');
    $variables['name'] = theme('username', array('account' => $node));
    $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['name'], '!datetime' => $variables['created']));
    $variables['user_picture'] = theme_get_setting('toggle_node_user_picture') ? theme('user_picture', array('account' => $node)) : '';
  }
  else {
    $variables['display_submitted'] = FALSE;
  }

  // Формируем node classes.
  $variables['classes_array'][] = drupal_html_class('node-' . $node->type);
  if ($variables['promote']) {
    $variables['classes_array'][] = 'node-promoted';
  }
  if ($variables['sticky']) {
    $variables['classes_array'][] = 'node-sticky';
  }
  if (!$variables['status']) {
    $variables['classes_array'][] = 'node-unpublished';
  }
  if ($variables['teaser']) {
    $variables['classes_array'][] = 'node-teaser';
  }
  if (isset($variables['preview'])) {
    $variables['classes_array'][] = 'node-preview';
  }

  // Переменная краткого содержимого и полного содержимого.
  if (isset($variables['content']['body'])) {
    $variables['summary'] = $variables['content']['body']['#items'][0]['safe_summary'];
    $variables['body'] = $variables['content']['body']['#items'][0]['safe_value'];
  }
  else {
    $variables['summary'] = '';
    $variables['body']    = '';
  }

  // Переменная главного изображения.
  $variables['main_image'] = '';
  if (isset($variables['field_site_news_image'][0]['fid'])) {
    $imagecache = variable_get('site_news_default_main_imagecache_preset', 'large');
    $variables_image = array(
      'style_name' => $imagecache,
      'path' => $variables['field_site_news_image'][0]['uri'],
      'alt' => $variables['field_site_news_image'][0]['alt'],
      'title' => $variables['field_site_news_image'][0]['title'],
      'width' => $variables['field_site_news_image'][0]['width'],
      'height' => $variables['field_site_news_image'][0]['height'],
      'attributes' => array('class' => 'site-news-image'),
    );
    $variables['main_image'] .= '<a class="colorbox litebox" rel="site-news-images" data-litebox-group="site-news-litebox-images" title="' . $variables['field_site_news_image'][0]['title'] . '" href="' . file_create_url($variables['field_site_news_image'][0]['uri']) . '">' . theme_image_style($variables_image) . '</a>';
  }

  // Переменная вывода последующих изображений.
  $variables['other_image'] = '';
  if (count($variables['field_site_news_image']) > 1) {
    $count = 0;
    $imagecache = variable_get('site_news_default_imagecache_preset', 'thumbnail');
    foreach ($variables['field_site_news_image'] as $field_site_news_image) {
      if ($count > 0) {
        $title = $field_site_news_image['title'];
        $uri = $field_site_news_image['uri'];
        $variables_image = array(
          'style_name' => $imagecache,
          'path' => $uri,
          'alt' => $field_site_news_image['alt'],
          'title' => $title,
          'width' => $field_site_news_image['width'],
          'height' => $field_site_news_image['height'],
          'attributes' => array('class' => 'site-news-image'),
        );
        $variables['other_image'] .= '<a class="colorbox litebox" rel="site-news-images" data-litebox-group="site-news-litebox-images" title="' . $title . '" href="' . file_create_url($uri) . '">' . theme_image_style($variables_image) . '</a>';
      }
      $count ++;
    }
  }

  // Переменная вывода прикрепленных файлов.
  $variables['files'] = '';
  if (count($variables['field_site_news_file'])) {
    foreach ($variables['field_site_news_file'] as $file) {
      // Описание файла.
      if ($file['description']) {
        $description = $file['description'];
      }
      else {
        $description = $file['filename'];
      }
      // Иконка файла.
      $file_object = file_load($file['fid']);
      $file_icon_url = file_icon_url($file_object);
      $file_icon = '<img class="file-icon" alt="" title="' . $file['filemime'] . '" src="' . $file_icon_url . '" />';
      $filesize = format_size($file['filesize']);
      $variables['files'] .= '<a class="site-news-file" type="' . $file['filemime'] . '" href="' . file_create_url($file['uri']) . '">' . $file_icon . " " . $description . ' <span class="site-news-filesize">(' . $filesize . ')</span>' . '</a>';
    }
  }

  // Переменная теги.
  $tags = array();
  $variables['tags'] = '';
  if (isset($variables['field_tags'])) {
    foreach ($variables['field_tags'] as $value) {
      $tags[] = l($value['taxonomy_term']->name, 'taxonomy/term/' . $value['taxonomy_term']->tid);
    }
    if (count($tags)) {
      $variables['tags'] = '<span class="site-news-tags">' . t('Tags') . ':</span> ' . implode(' » ', $tags);
    }
  }
}

/**
 * Implementation of hook_node_presave().
 */
function site_news_node_presave($node) {
  if ($node->type == 'site_news') {
    // Пытаемся получить алиас. Удаляем существующий алиас.
    $source = 'node/' . $node->nid;
    $path = path_load(array('source' => $source));
    if (isset($path['pid'])) {
      path_delete($path);
    }
  }
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function site_news_block_info() {
  // Блок для агрегации всех категорий пресс-центра.
  $blocks['site_news_block_content'] = array(
    'info' => t('Latest news'),
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_PHP,
    'pages' => '<?php if (site_news_node_count()) { return TRUE; } else { return FALSE; } ?>',
  );
  // Создаем блоки для каждой категорий пресс-центра.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_news_vocabulary');
  if (isset($vocabulary->vid)) {
    $terms = db_query('SELECT n.tid, n.name FROM {taxonomy_term_data} n WHERE n.vid = :vid', array(':vid' => $vocabulary->vid));
    foreach($terms as $term) {
      $blocks['site_news_block_content_' . $term->tid] = array(
        'info' => t('@value', array('@value' => $term->name)),
        'cache' => DRUPAL_NO_CACHE,
        'region' => 'sidebar_first',
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php if (site_news_node_count()) { return TRUE; } else { return FALSE; } ?>',
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function site_news_block_view($delta = '') {
  global $language;

  $block = array();

  switch ($delta) {
    // Блок для агрегации всех категорий пресс-центра.
    case 'site_news_block_content':
      $terms_access = variable_get('site_news_block_taxonomy_terms', array());
      $terms = array();
      foreach($terms_access as $tid) {
        if ($tid) {
          //$term = taxonomy_term_load($tid);
          // Если язык термина совпадает с текущим языком сайта.
          //if (isset($term->language) && $term->language == $language->language) {
            $terms[] = $tid;
          //}
        }
      }
      if (count($terms)) {
        $block['subject'] = t('Latest news');
        $block['content'] = site_news_block_content($terms, TRUE);
      }
    break;
  }

  // Создаем блоки для агрегации материалов в зависимости от категорий пресс-центра.
  //$vocabulary = taxonomy_vocabulary_machine_name_load('site_news_vocabulary');
  //$terms = db_query('SELECT * FROM {taxonomy_term_data} n WHERE n.vid = :vid', array(':vid' => $vocabulary->vid));
  $terms_access = variable_get('site_news_block_taxonomy_terms', array());
  foreach($terms_access as $tid) {
    if ($tid) {
      $term = taxonomy_term_load($tid);
      switch ($delta) {
        case 'site_news_block_content_' . $term->tid:
//          if (isset($term->language) && $term->language == $language->language) {
            $block['subject'] = t('@value', array('@value' => $term->name));
            $block['content'] = site_news_block_content(array($term->tid), TRUE);
//          }
//          if (!isset($term->language)) {
//            $block['subject'] = t('@value', array('@value' => $term->name));
//            $block['content'] = site_news_block_content(array($term->tid), TRUE);
//          }
        break;
      }
    }
  }

  return $block;
}

/**
 * Формирование содержимого блока пресс-центра.
 * $link - если TRUE, то разрешается выводить ссылку на полный перечень материалов категории.
 * $terms - массив разрешенных для вывода в блоке терминов.
 * @return
 *   Содержимое блока в виде HTML.
 */
function site_news_block_content($terms = array(), $link = TRUE) {
  // Если запрещено отображать.
  if (user_access('administer site news') || user_access('view site news content')) {
    // Количество сообщений в блоке.
    $limit = variable_get('site_news_block_limit_nodes', '5');

    // Получаем перечень полей ноды.
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->innerJoin('taxonomy_index', 't', 't.nid = n.nid');
    $query->condition('n.type', 'site_news');
    if (count($terms)) {
      $query->condition('t.tid', $terms, 'IN');
    }
    $query->orderBy('n.created', 'DESC');
    $query->range(0, $limit);
    $result = $query->execute();

    $output = '';

    $site_news_link = "";

    $i = 0;// Счетчик кол-ва .

    $output .= '<noindex>';

    foreach ($result as $row) {
      $node = node_load($row->nid);

      // Категория к которой принадлежит позиция.
      $field_items = field_get_items('node', $node, 'field_site_news_taxonomy');
      if ($field_items) {
        $field_first_item = reset($field_items);
        $tid = $field_first_item['tid'];
      }

      $output .= '<div class="site-news-block-item">';

      // Формируем дату публикации.
      if (variable_get('node_submitted_' . $node->type, TRUE)) {
        $output .= '<div class="site-news-block-date">' . format_date($node->created, 'short') . '</div>';
      }

      // Формируем заголовок.
      $output .= '<div class="site-news-block-title">' . l(t('@value', array('@value' => $node->title)), 'node/' . $node->nid, array('attributes' => array('class' => array('site-news-block-link')))) . '</div>';

      // Формируем
      if (variable_get('site_news_node_summary_in_block')) {
        $output .= kvantstudio_node_summary($node);
      }

      // Формируем изображение.
      if (isset($node->field_site_news_image['und'][0]) && variable_get('site_news_image_in_block')) {
        $variables = array(
          'data' => $node->field_site_news_image['und'][0],
          'field_name' => NULL,
          'image_style' => variable_get('site_news_default_imagecache_preset_in_block', 'thumbnail'),
          'path_link' => 'node/' . $node->nid,
        );
        $output .= '<div class="site-news-block-image">' . theme('kvantstudio_image_field', $variables) . '</div>';
      }      

      $i++;
      $output .= '</div>';
    }

    if (empty($i)) {
      $output = '<div class="site-news-block-info">' . t('No content available.') . '</div>';
    }
    else {
      // Если TRUE, то разрешается выводить ссылку на полный перечень материалов категории.
      if ($link) {
        global $language;
        if (count($terms) > 1) {
          $site_news_link = 'press';
        }
        else {
          $term = taxonomy_term_load(reset($terms));
          if (isset($term->alias)) {
            $site_news_link = $term->alias;
          }
        }
        if ($site_news_link) {
          $site_news_link = kvantstudio_url_alias_correct($site_news_link);
          $output .= '<div class="site-news-block-link">' . l(t('Go to archive'), $site_news_link, array('attributes' => array('class' => array('site-news-block-link-more')))) . '</div>';
        }
      }
    }

    $output .= '</noindex>';

    return $output;
  }
}

/**
 * Возвращает количество node типа новость, которые опубликованы.
 * $status - статус публикации. По умолчанию показывать опубликованные node.
 */
function site_news_node_count($status = 1) {
  $node_count = db_query('SELECT COUNT(*) FROM {node} WHERE type = :type AND status = :status', array(':type' => 'site_news', ':status' => $status))->fetchField();
  return $node_count;
}

/**
 * Возвращает количество категорий в словаре.
 */
function site_news_term_count() {
  $term_count = &drupal_static(__FUNCTION__);
  if (!isset($term_count)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('site_news_vocabulary');
    $term_count = (int) db_query('SELECT COUNT(n.tid) FROM {taxonomy_term_data} n WHERE n.vid = :vid', array(':vid' => $vocabulary->vid))->fetchField();
  }
  return $term_count;
}

/**
 * Создаёт путь для токена [site-news-term-path].
 * Токен не зависимый от языка (не нейтральный!).
 */
function site_news_term_path($term) {
  global $language;

  module_load_include('inc', 'pathauto');

  // Определяем язык термина.
  $term->language = isset($term->language) ? $term->language : $language->language;

  // Путь по умолчанию для одного языка.
  $path = pathauto_cleanstring(variable_get('site_news_title', t('Press center')));

  // Если активирован модуль поддержки перевода переменных (для мультиязычных сайтов).
  if (module_exists("i18n_variable")) {
    // Путь на текущем языке сайта.
    $i18n_path = i18n_variable_get('site_news_title', $term->language);
    if ($i18n_path) {
      $path = pathauto_cleanstring($i18n_path);
    }
  }

  // Родители текущего термина.
  $parents = array_reverse(taxonomy_get_parents_all($term->tid));

  // Если существуют родители, формируем строку пути из названия терминов родителей.
  if (count($parents)) {
    while (count($parents) - 1) {
      $current = array_shift($parents);
      $path .= "/" . pathauto_cleanstring($current->name);
    }
  }

  // Прикрепляем к пути текущий термин.
  $path .= '/' . pathauto_cleanstring($term->name);

  return $path;
}

/**
 * Создаёт путь для токена [site-news-node-path].
 * Токен не зависимый от языка (не нейтральный!).
 */
function site_news_node_path($node) {
  module_load_include('inc', 'pathauto');

  // Категория.
  $field_items = field_get_items('node', $node, 'field_site_news_taxonomy');
  if ($field_items) {
    $field_first_item = reset($field_items);
    $tid = $field_first_item['tid'];
  }

  // Создаем новый алиас.
  // Определяем существует ли такой путь в системе.
  // Предотвращаем создание одинаковых путей в одной категории.
  $source = 'taxonomy/term/' . $tid;
  $path = path_load(array('source' => $source));

  $node_path = $path['alias'] . '/' . pathauto_cleanstring($node->title);

  return $node_path;
}