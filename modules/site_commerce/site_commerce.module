<?php

/**
 * @file
 * Главный файл модуля интернет-магазина SiteCommerce.
 *
 * Файл содержит основные функции, которые реализуют функционал интернет-магазина SiteCommerce.
 * Интернет-магазин SiteCommerce - это разработка студии KVANTSTUDIO.RU.
 * Разработка модуля ведется с 2010 г. По всем вопросам обращайтесь по адресу info@kvantstudio.ru.
*/

include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'site_commerce') . '/includes/site_commerce.imagestyles.inc';
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'site_commerce') . '/includes/site_commerce.taxonomy_menu.inc';

/**
 * Товар не опубликован.
 */
define('SITE_COMMERCE_NOT_PUBLISHED', 1);

/**
 * Товар опубликован.
 */
define('SITE_COMMERCE_PUBLISHED', 0);

/**
 * Implement hook_init().
 */
function site_commerce_init() {
  // Подключаем необходимые системные ajax библиотеки.
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
  drupal_add_library('system', 'jquery.cookie');

  // Подключаем css.
  if (variable_get('site_commerce_allow_view_subcategories_overlay', TRUE)) {
    drupal_add_js(array('site_commerce_catalog_overlay' => 1), 'setting');
    drupal_add_css(drupal_get_path('module', 'site_commerce') . '/css/site_commerce_catalog_overlay.css', array('group' => CSS_SYSTEM, 'every_page' => TRUE));
  }
  else {
    drupal_add_js(array('site_commerce_catalog_overlay' => 0), 'setting');
    drupal_add_css(drupal_get_path('module', 'site_commerce') . '/css/site_commerce_catalog.css', array('group' => CSS_SYSTEM, 'every_page' => TRUE));
  }

  // Подключаем библиотеку site_commerce.js.
  drupal_add_js(drupal_get_path('module', 'site_commerce') . '/js/site_commerce.js', array('group' => JS_LIBRARY, 'every_page' => TRUE));
}

/**
 * Определяет строки для перевода, чтобы модуль potx забирал их при экспорте.
 * Строки единственного и множественного числа.
 */
function site_commerce_singular_plural() {
  $singular = t('Search among 1 good');
  $plural = t('Search among @count goods');
  $plural = t('Search among @count[2] goods');

  $singular = t('On request «@request» found 1 result');
  $plural = t('On request «@request» found @count results');
  $plural = t('On request «@request» found @count[2] results');
}

/**
 * Функция: перечень статусов позиций.
 */
function site_commerce_position_status() {
  $status = array(
    0  => t('None'), // Нет, статус не указан.
    5  => t('There is no stock'), // Отсутствует на складе.
    10 => t('Available'), // В наличии.
    20 => t('Delivery is expected'), // Ожидается поступление.
    30 => t('Availably under the order'), // Доступно под заказ.
    40 => t('It is temporarily removed from sale'), // Временно снят с продажи.
    50 => t('It is removed from manufacture'), // Снят с производства.
  );
  return $status;
}

/**
 * Формирует перечень состояний товара.
 */
function site_commerce_get_conditions($type = NULL) {
  $conditions = array(
    0  => t('New product.'), // Новый товар.
    1  => t('B/A product. The condition is good.'), // Б/У товар. Состояние хорошее.
    2 => t('B/A product. The condition with minor defects.'), // Б/У товар. Состояние с небольшими дефектами.
    3 => t('B/A product. The condition is poor. Repair is needed.'), // Б/У товар. Состояние плохое. Требуется ремонт.
  );

  if ($type) {
    return $conditions[$type];
  }

  return $conditions;
}

/**
 * Функция: перечень типов продажи товаров.
 */
function site_commerce_types_sale() {
  $types = array(
    1 => t('Piece sale'), // Поштучная продажа.
    2 => t('Piece sale in structure of other goods'), // Поштучная продажа в составе другого товара.
    3 => t('Piece sale in structure of other goods to not display in the catalogue'), // Поштучная продажа в составе другого товара, не отображать в каталоге.
    4 => t('Consists of a set of goods'), // Состоит из набора товаров.
    5 => t('Consists of a set of goods, is not allowed to add to cart'), // Состоит из набора товаров, запрещено добавлять в корзину.
  );
  return $types;
}

/**
 * Функция: перечень спецпредложений.
 */
function site_commerce_types_special_offers() {
   $terms = array();
   $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_special_offers_vocabulary');
   $terms = kvantstudio_select_terms($vocabulary->vid, TRUE, TRUE, "None");
   return $terms;
}

/**
 * Функция: перечень единиц измерения валюты.
 */
function site_commerce_position_сurrency() {
  $status = array(
    'руб.' => t('Ruble'),
    'грн.' => t('Hryvnia'),
    'тг.' => t('Kazakhstan tenge'),
    'USD' => t('United States dollar'),
    'EUR' => t('Euro'),
  );
  return $status;
}

/**
 * Implements hook_entity_info().
 */
function site_commerce_entity_info() {
  $entities['site_commerce'] = array(
    'label' => t('Product'),
    'fieldable' => TRUE,
    'metatags' => TRUE,
    'base table' => 'site_commerce',
    'uri callback' => 'site_commerce_uri',
    'entity keys' => array(
      'id' => 'pid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'module' => 'site_commerce',
  );

  // Bundles must provide a human readable name so we can create help and error
  // messages, and the path to attach Field admin pages to.
  foreach (site_commerce_type_get_names() as $type => $name) {
    $entities['site_commerce']['bundles'][$type] = array(
      'label' => $name,
      'metatags' => TRUE,
      'admin' => array(
        'path' => 'admin/structure/site-commerce-types/manage/%site_commerce_type',
        'real path' => 'admin/structure/site-commerce-types/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer site commerce types'),
      ),
    );
  }

  return $entities;
}

/**
 * Entity uri callback.
 */
function site_commerce_uri($site_commerce) {
  return array(
    'path' => 'site-commerce/' . $site_commerce->pid,
  );
}

/**
 * Implements hook_load().
 */
function site_commerce_load($pid, $reset = FALSE) {
  $site_commerce = site_commerce_load_multiple(array($pid), array(), $reset);
  return reset($site_commerce);
}

/**
 * Implements hook_load_multiple().
 */
function site_commerce_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('site_commerce', $pids, $conditions, $reset);
}

/**
 * Implements hook_field_extra_fields().
 */
function site_commerce_field_extra_fields() {
  $extra = array();
  // Для каждого из типов товаров.
  foreach (site_commerce_type_get_types() as $type) {
    $extra['site_commerce'][$type->type] = array(
      'form' => array(
        'field_site_commerce_title' => array(
          'label' => t('Name'),
          'description' => t('Text'),
          'weight' => -50,
        ),
        'field_site_commerce_status' => array(
          'label' => t('Status position in stock'),
          'description' => t('List (text)'),
          'weight' => 10,
        ),
        'field_site_commerce_type_sale' => array(
          'label' => t('Type of sale'),
          'description' => t('List (text)'),
          'weight' => 11,
        ),
        'field_site_commerce_package' => array(
          'label' => t('Package of goods'),
          'description' => t('List (text)'),
          'weight' => 12,
        ),
        'field_site_commerce_sticky' => array(
          'label' => t('Novelty'),
          'description' => t('Boolean'),
          'weight' => 13,
        ),
        'field_site_commerce_disabled' => array(
          'label' => t('Do not display on the site'),
          'description' => t('Boolean'),
          'weight' => 14,
        ),
        'field_site_commerce_cost_set' => array(
          'label' => t('Display the value of the set of goods'),
          'description' => t('Boolean'),
          'weight' => 15,
        ),
        'field_site_commerce_type_condition' => array(
          'label' => t('Condition of product'),
          'description' => t('List (text)'),
          'weight' => 16,
        ),
      ),
    );
  }
  return $extra;
}

/**
 * Implements hook_theme().
 */
function site_commerce_theme($existing, $type, $theme, $path) {
  return array(
    'site_commerce_admin_overview' => array(
      'variables' => array('name' => NULL, 'type' => NULL),
    ),
    'site_commerce_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'site_commerce.pages.inc',
    ),
    'site_commerce_actions_form' => array(
      'render element' => 'form',
    ),
    'site_commerce_category_pid' => array(
      'render element' => 'elements',
    ),
    'site_commerce_images' => array(
      'variables' => array('pid' => NULL, 'style_imagecache_first_image' => NULL, 'all' => TRUE),
    ),
    'site_commerce_add_to_cart_position' => array(
      'variables' => array('pid' => NULL),
    ),
    'site_commerce_sort' => array(
      'variables' => array('title' => NULL, 'tid' => 0, 'novelties' => TRUE),
    ),
    'site_commerce_body' => array(
      'variables' => array('site_commerce' => NULL, 'summary_allow' => TRUE, 'value_allow' => TRUE),
    ),
    'site_commerce_position_index_content' => array(
      'variables' => array('pid' => NULL),
    ),
    'site_commerce_subcategories' => array(
      'variables' => array('tid' => NULL),
      'template' => 'templates/site-commerce-subcategories',
    ),
    // Темизация карточки товара.
    'site_commerce' => array(
      'render element' => 'elements',
      'template' => 'templates/site-commerce',
    ),
    // Темизация статуса позиции.
    'site_commerce_status' => array(
      'variables' => array('pid' => NULL, 'status' => NULL, 'type_call' => 'default'),
      'template' => 'templates/site-commerce-status',
    ),
    // Темизация формы выбора параметров товара.
    'site_commerce_select' => array(
      'variables' => array('pid' => NULL, 'param' => NULL),
      'template' => 'templates/site-commerce-select',
      'file' => 'includes/site_commerce.select.inc'
    ),
    // Темизация поисковой формы.
    'site_commerce_create_search_form' => array(
      'variables' => array('search_form' => NULL, 'search_form_up' => NULL, 'search_form_bottom' => NULL, 'search_form_in_header' => FALSE),
      'template' => 'templates/site-commerce-create-search-form',
    ),
     // Темизация блока Корзина.
    'site_commerce_block_cart' => array(
      'variables' => array('quantity_order' => NULL, 'quantity_postponed' => NULL, 'order_info' => NULL),
      'template' => 'templates/site-commerce-block-cart',
    ),
    // Темизация позиций для вывода в блоках (новинки, спецпредложения).
    'site_commerce_block_content' => array(
      'variables' => array('pids' => NULL, 'type_call' => NULL, 'path' => NULL),
      'template' => 'templates/site-commerce-block-content',
    ),
    // Темизация стоимости товара.
    'site_commerce_cost' => array(
      'variables' => array('position' => NULL, 'type_call' => 'default'),
      'template' => 'templates/site-commerce-cost',
    ),
    // Темизация прочих параметров товара в карточке.
    'site_commerce_data' => array(
      'variables' => array('pid' => NULL),
      'template' => 'templates/site-commerce-data',
    ),
    // Темизация одного выбранного пользователем параметра товара.
    'site_commerce_selected_parametr' => array(
      'variables' => array('cpid' => NULL, 'parametr_name' => NULL, 'parametr_value' => NULL, 'parametr_cost' => NULL, 'parametr_currency' => NULL, 'parametr_image' => NULL, 'parametr_link_edit' => NULL, 'parametr_link_delete' => NULL, 'parametr_is_cart' => NULL),
      'template' => 'templates/site-commerce-selected-parametr',
    ),
    // Темизация - обертка для выбранных пользователем параметров товара.
    'site_commerce_selected_parametrs' => array(
      'variables' => array('pid' => NULL, 'title' => NULL, 'parametrs' => NULL),
      'template' => 'templates/site-commerce-selected-parametrs',
    ),
    // Темизация итоговой стоимости товара с учетом стоимости выбранных пользователем параметров.
    'site_commerce_total_cost' => array(
      'variables' => array('pid' => NULL, 'title' => NULL, 'total_cost' => NULL, 'currency' => NULL),
      'template' => 'templates/site-commerce-total-cost',
    ),
    // Темизация - обертка категорий в блоке.
    'site_commerce_block_categories' => array(
      'variables' => array(),
      'template' => 'templates/site-commerce-block-categories',
    ),
    // Темизация прочих позиций в карточке товара.
    'site_commerce_other_positions' => array(
      'variables' => array('position' => NULL),
      'template' => 'templates/site-commerce-other-positions',
    ),
    // Темизация позиций которые входят в текущую, в состав товара.
    'site_commerce_position_index' => array(
      'variables' => array('pid' => NULL),
      'template' => 'templates/site-commerce-position-index',
    ),
    // Темизация одной позиции в корзине.
    'site_commerce_cart' => array(
      'variables' => array(),
      'template' => 'templates/site-commerce-cart',
      'file' => 'site_commerce.cart.inc',
    ),
    // Темизация главного каталога товаров.
    'site_commerce_catalog' => array(
      'variables' => array('vid' => NULL),
      'template' => 'templates/site-commerce-catalog',
    ),
    // Темизация перечня товаров по выбранной категории.
    'site_commerce_term' => array(
      'variables' => array('pids' => NULL, 'total' => NULL),
      'template' => 'templates/site-commerce-term',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function site_commerce_menu() {
  module_load_include('inc', 'pathauto');

  // Меню управление настройками.
  $items['admin/config/kvantstudio/site-commerce'] = array(
    'title' => 'Set up an online store',
    'description' => 'Set up the catalog, cart, order.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_commerce_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'site_commerce.settings.inc',
  );

  // Меню управление типами товаров.
  $items['admin/structure/site-commerce-types'] = array(
    'title' => 'Types of products',
    'page callback' => 'site_commerce_types_list',
    'access arguments' => array('administer site commerce types'),
    'file' => 'site_commerce.types.inc',
  );

  $items['admin/structure/site-commerce-types/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/structure/site-commerce-types/add'] = array(
    'title' => 'Аdd a new type of products',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_commerce_type_form'),
    'access arguments' => array('administer site commerce types'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'site_commerce.types.inc',
  );

  $items['admin/structure/site-commerce-types/manage/%site_commerce_type'] = array(
    'title' => 'Edit site commerce type',
    'title callback' => 'site_commerce_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_commerce_type_form', 4),
    'access arguments' => array('administer site commerce types'),
    'file' => 'site_commerce.types.inc',
  );

  $items['admin/structure/site-commerce-types/manage/%site_commerce_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/site-commerce-types/manage/%site_commerce_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('site_commerce_type_delete_confirm', 4),
    'access arguments' => array('administer site commerce types'),
    'file' => 'site_commerce.types.inc',
  );

  // Меню: доступ к панели управления.
  $items['admin/content/site-commerce'] = array(
    'title' => 'Online store',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_commerce_admin_content'),
    'access callback' => 'site_commerce_edit_access',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'file' => 'site_commerce.admin.inc',
  );

  // Меню: удаление всех позиций.
  $items['admin/content/site-commerce/delete'] = array(
    'title' => 'To remove all positions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_commerce_delete_all_positions_confirm'),
    'access arguments' => array('administer site commerce products'),
    'file' => 'site_commerce.admin.inc',
  );

  // Меню: страница связывания позиций.
  $items['admin/content/site-commerce/position-index'] = array(
    'title' => 'Associate positions',
    'page callback' => 'site_commerce_position_index',
    'page arguments' => array(4, 5),
    'access arguments' => array('administer site commerce products'),
    'file' => 'site_commerce.position.index.inc',
  );

  // Импорт тегов таксономии из csv файла.
  $items['admin/structure/taxonomy/site_commerce_csv_import'] = array(
    'title'            => 'Tags CSV import',
    'page callback'    => 'site_commerce_import_page',
    'access arguments' => array('administer site commerce products'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'site_commerce.import.taxonomy.tags.csv.inc',
  );

  // Импорт товаров из csv файла.
  if (!module_exists('site_commerce_auto')) {
    $items['admin/content/site-commerce/import-csv'] = array(
      'title' => 'Import from csv',
      'page callback' => 'site_commerce_import_page',
      'access arguments' => array('administer site commerce products'),
      'file' => 'site_commerce.import.csv.inc',
      'type' => MENU_LOCAL_ACTION,
    );

    $items['admin/content/site-commerce/import-xls'] = array(
      'title' => 'Import from xls',
      'page callback' => 'site_commerce_import_page',
      'access arguments' => array('administer site commerce products'),
      'file' => 'site_commerce.import.xls.inc',
      'type' => MENU_LOCAL_ACTION,
    );
  }

  // Импорт изображений товаров из файла.
  $items['admin/content/site-commerce/import-images'] = array(
    'title' => 'Import images',
    'page callback' => 'site_commerce_import_page',
    'access arguments' => array('administer site commerce products'),
    'file' => 'site_commerce.import.images.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Меню: просмотр поисковых запросов.
  $items['admin/content/site-commerce-search-requests'] = array(
    'title' => 'Search requests',
    'page callback' => 'site_commerce_search_requests',
    'access callback' => 'site_commerce_search_requests_access_callback',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  // Меню: доступ к странице выбора типа товаров для создания новой позиции.
  // Доступно если хотя бы один из типов товара разрешено создавать.
  $items['admin/content/site-commerce/add'] = array(
    'title' => 'To add a position',
    'page callback' => 'site_commerce_add_page',
    'access callback' => 'site_commerce_create_access',
    'file' => 'site_commerce.pages.inc',
    'type' => MENU_LOCAL_ACTION,
    'weight' => -50,
  );

  // Меню: создание новой позиции.
  foreach (site_commerce_type_get_names() as $type => $name) {
    $type_url_str = str_replace('_', '-', $type);
    $items['admin/content/site-commerce/add/' . $type_url_str] = array(
      'title' => $name,
      'title callback' => 'check_plain',
      'page callback' => 'site_commerce_add',
      'page arguments' => array($type),
      'access callback' => 'site_commerce_access',
      'access arguments' => array('create', $type),
      'file' => 'site_commerce.pages.inc',
    );
  }

  // Меню: редактирование позиции.
  $items['admin/content/site-commerce/%site_commerce/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_commerce_form', 3),
    'access callback' => 'site_commerce_access',
    'access arguments' => array('edit', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'site_commerce.pages.inc',
  );

  // Меню: удаление позиции.
  $items['admin/content/site-commerce/%site_commerce/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_commerce_delete_confirm', 3),
    'access callback' => 'site_commerce_access',
    'access arguments' => array('delete', 3),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'site_commerce.pages.inc',
  );

  // Меню доступа к странице товаров по умолчанию.
  $items['site-commerce'] = array(
    'page callback' => 'site_commerce_page_default',
    'access callback' => 'site_commerce_view_access',
    'type' => MENU_CALLBACK,
  );

  // Меню доступа к странице товара по идентификатору.
  $items['site-commerce/%site_commerce'] = array(
    'title callback' => 'site_commerce_page_title',
    'title arguments' => array(1),
    'page callback' => 'site_commerce_page_view',
    'page arguments' => array(1),
    'access callback' => 'site_commerce_view_access',
    'access arguments' => array(1),
  );

  $site_commerce_catalog_path = pathauto_cleanstring(variable_get('site_commerce_catalog_link', pathauto_cleanstring(t('Online store'))));

  // Меню доступа к каталогу.
  $items[$site_commerce_catalog_path] = array(
    'title callback' => 'site_commerce_catalog_title_callback',
    'page callback' => 'site_commerce_catalog',
    'access callback' => 'site_commerce_view_access',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );

  // Меню доступа к каталогу, который формируется по одному из типов товаров.
  foreach (site_commerce_type_get_types() as $type) {
    $items[$site_commerce_catalog_path . '/' . pathauto_cleanstring($type->name)] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'site_commerce_catalog_type',
      'page arguments' => array($type->type),
      'access callback' => 'site_commerce_access',
      'access arguments' => array('view', $type->type),
    );
  }

  // Главная страница, которая возвращает результаты поиска товаров.
  $items[$site_commerce_catalog_path . '/search/%'] = array(
    'title' => 'Search',
    'page callback' => 'site_commerce_search',
    'page arguments' => array(2),
    'access callback' => 'site_commerce_view_access',
    'type' => MENU_CALLBACK,
  );

  // Меню корзина покупок.
  $items['cart'] = array(
    'title callback' => 'site_commerce_cart_title_callback',
    'page callback' => 'site_commerce_cart',
    'access callback' => 'site_commerce_view_access',
    'type' => MENU_CALLBACK,
    'file' => 'site_commerce.cart.inc',
  );

  $items['cart/update/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_cart_update_ajax_callback',
    'page arguments' => array(2),
    'access callback' => 'site_commerce_view_access',
    'delivery callback' => 'ajax_deliver',
    'file' => 'site_commerce.cart.inc',
  );

  // Страница для отображения новинок товаров.
  $items['new'] = array(
    'title' => 'Novelties',
    'page callback' => 'site_commerce_catalog_novelties',
    'access callback' => 'site_commerce_view_access',
    'type' => MENU_CALLBACK,
  );

  // Меню автозавершение ввода.
  $items['site-commerce-search-autocomplete'] = array(
    'page callback' => 'site_commerce_search_autocomplete',
    'access callback' => 'site_commerce_view_access',
    'type' => MENU_CALLBACK,
  );

  // Ajax меню добавить товар в корзину.
  $items['site-commerce-actions-form'] = array(
    'title' => 'Add to cart',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_actions_form_ajax_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
  );

  // Ajax меню перехода в корзину.
  $items['site-commerce-actions-form-gotocart'] = array(
    'title' => 'Go to cart',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_actions_form_gotocart_ajax_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
  );

  // Ajax меню покупки товара в один клик.
  $items['site-commerce-buy-in-one-click/%'] = array(
    'title' => 'To buy in 1 click',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_buy_in_one_click_ajax_callback',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
  );

  $items['site-commerce-buy-in-one-click-form-ajax-callback'] = array(
    'page callback' => 'site_commerce_buy_in_one_click_form_ajax_callback',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
    'theme callback' => 'ajax_base_page_theme',
  );

  // Ajax меню выбор параметра товара.
  $items['site-commerce-select/%'] = array(
    'title' => 'Select form',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_select_ajax_callback',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
    'file' => 'includes/site_commerce.select.inc',
  );

  $items['site-commerce-select-data-load/%'] = array(
    'title' => 'Load data',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_select_data_load_ajax_callback',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
    'file' => 'includes/site_commerce.select.inc',
  );

  $items['site-commerce-select-data-load-tid/%'] = array(
    'title' => 'Load data by category',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_select_data_load_tid_ajax_callback',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
    'file' => 'includes/site_commerce.select.inc',
  );

  $items['site-commerce-select-choose/%'] = array(
    'title' => 'To choose',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_select_choose_ajax_callback',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
    'file' => 'includes/site_commerce.select.inc',
  );

  $items['site-commerce-parametr-delete/%'] = array(
    'title' => 'Delete parametr',
    'type' => MENU_CALLBACK,
    'page callback' => 'site_commerce_parametr_delete_ajax_callback',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'site_commerce_view_access',
    'file' => 'includes/site_commerce.select.inc',
  );

//  // Меню интеграции Яндекс Маркет.
//  // @TODO Функция находится в разработке.
//  $items['site-commerce-yandex-market'] = array(
//    'page callback' => 'site_commerce_yandex_market',
//    'access arguments' => array('administer site commerce products'),
//    'type' => MENU_CALLBACK,
//    'file' => 'site_commerce.yandex.market.inc',
//  );

//  // Меню формы регистрации пользователей.
//  // @TODO Функция находится в разработке.
//  if (module_exists('site_commerce_user')) {
//    $items['site-commerce/user/register'] = array(
//      'page callback' => 'site_commerce_user_register',
//      'access callback' => 'site_commerce_view_access',
//      'type' => MENU_CALLBACK,
//      'file' => 'site_commerce.users.inc',
//    );
//  }

  return $items;
}

/**
 * Access callback for admin/content/site-commerce-search-requests.
 */
function site_commerce_search_requests_access_callback() {
  if (user_access('access search requests site commerce') && variable_get('site_commerce_search_requests_save', FALSE)) {
    return TRUE;
  }
}

/**
 * Title callback.
 */
function site_commerce_catalog_title_callback() {
  return variable_get('site_commerce_catalog_title', t('Online store'));
}

/**
 * Title callback.
 */
function site_commerce_cart_title_callback() {
  return variable_get('site_commerce_cart_title', t('Cart'));
}

/**
 * Ajax_callback функция покупки товара в один клик.
 */
function site_commerce_buy_in_one_click_ajax_callback($pid, $mode = NULL) {
  // Если у посетителя отключён javascript, то показываем ему сообщение.
  if ($mode != 'ajax') {
    drupal_set_message(t('Turn javascript in you browser.'));
    drupal_goto(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '<front>');
  }

  $commands = array();

  // Отображение всплывающего окна: продолжить покупки или оформить заказ.
  $form = drupal_get_form('site_commerce_buy_in_one_click_form', $pid);
  $form = drupal_render($form);

  $commands[] = ajax_command_append('body', '<div class="element-hidden"><div id="site-commerce-buy-in-one-click-order-confirm-' . $pid . '"></div></div>');
  $commands[] = ajax_command_html('#site-commerce-buy-in-one-click-order-confirm-' . $pid, $form);
  $commands[] = ajax_command_invoke('#site-commerce-buy-in-one-click-order-confirm-' . $pid, 'dialog', array(
    array('modal' => TRUE),
    //array('minWidth' => 500),
  ));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Форма действий покупки товара в один клик.
 */
function site_commerce_buy_in_one_click_form($form, &$form_state, $pid) {
  $form = array(
    '#prefix' => '<noindex>',
    '#suffix' => '</noindex>',
  );
  $form['#attributes'] = array('id' => 'site-commerce-buy-in-one-click-form-' . $pid, 'class' => array('site-commerce-buy-in-one-click-form'));

  $title = t('Leave a phone number');
  $form['title'] = array(
    '#type' => 'item',
    '#prefix' => '<div class="site-commerce-buy-in-one-click-title">',
    '#suffix' => '</div>',
    '#markup' => $title,
  );

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );

  $message = t('Our manager will call to you at the given number, will specify all details and will issue the order for purchase.');
  if ($message) {
    $form['message'] = array(
      '#type' => 'item',
      '#markup' => $message,
    );
  }

  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact phone'),
    '#title_display' => 'invisible',
    '#default_value' => NULL,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => '8 XXX XXXXXXX',
    ),
  );

  $form['messages'] = array(
    '#type' => 'item',
    '#markup' => '<div id="site-commerce-buy-in-one-click-form-messages"></div>',
  );

  // Now we add our submit button, for submitting the form results.
  //
  // The 'actions' wrapper used here isn't strictly necessary for tabledrag,
  // but is included as a Form API recommended practice.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'button',
    '#value' => variable_get('site_commerce_buy_in_one_click_button_send', t('Send')),
    '#ajax' => array(
      'event' => 'click',
      'path' => 'site-commerce-buy-in-one-click-form-ajax-callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
      'method' => 'replace',
    ),
    '#attributes' => array('class' => array(variable_get('site_commerce_cart_button_submit_css', 'btn btn-default'), 'use-ajax-submit')),
  );

  return $form;
}

/**
 * Provides ajax callback for form submit
 */
function site_commerce_buy_in_one_click_form_ajax_callback() {
  // Получаем данные о форме и её состоянии.
  list($form, $form_state) = ajax_get_form();

  // Выполняем все validate и submit функции для формы.
  drupal_process_form($form['#form_id'], $form, $form_state);

  // Собираем сообщения, которые вылезли в процессе выполнения формы.
  $commands = array();

  // Если есть ошибки при выполнении.
  $errors = 0;
  if (!empty($form_state['values']['text_validate'])) {
    $commands[] = ajax_command_html('#site-commerce-buy-in-one-click-form-messages', $form_state['values']['text_validate']);
    $errors++;
  }

  // Если форма успешно отправлена.
  if (!$errors) {
    $pid = $form_state['values']['pid'];
    $message = '<div class="site-commerce-buy-in-one-click-ordered">' . t('Thanks! Your application is registered, we shall call back to you.') . '</div>';
    $commands[] = ajax_command_replace('#site-commerce-buy-in-one-click-form-' . $pid, $message);
  }

  //unset($_SESSION['messages']);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Validate callback for the site_commerce_buy_in_one_click_form form.
 */
function site_commerce_buy_in_one_click_form_validate($form, &$form_state) {
  // Восстанавливаем параметры из COOKIES.
  $pid = $form_state['values']['pid'];

  $errors = 0;
  $messages = '';

  // Проверка заполнено ли поле Контактный номер.
  if (strlen(trim($form_state['values']['phone'])) == 0) {
    $messages .= '<div class="messages error">' . t('Specify <strong>@param</strong>.', array('@param' => t('Contact phone'))) . '</div>';
    $errors++;
  }

  if ($errors > 0) {
    $form_state['values']['text_validate'] = $messages;
    $form_state['values']['text_submit'] = '';
    $form_state['submitted'] = FALSE;
  }
  else {
    $form_state['values']['text_submit'] = '';
    $form_state['submitted'] = TRUE;
  }
}

/**
 * Submit callback for the site_commerce_buy_in_one_click_form form.
 */
function site_commerce_buy_in_one_click_form_submit($form, &$form_state) {
  global $user;

  // Формируем переменные заказа.
  $pid = $form_state['values']['pid'];
  $phone = trim($form_state['values']['phone']);

  // Добавляем позицию в корзину.
  site_commerce_add_position($form_state);

  $delivery_information['phone'] = array(
    'title' => t('Contact phone'),
    'value' => $phone,
  );

  $data = serialize($delivery_information);

  // Формируем пароль.
  $password = kvantstudio_random_string(10, $type = 'small_all');

  // Формируем уникальный строковый номер заказа.
  $number = 'SC' . kvantstudio_random_string(5, $type = 'small_all');

  try {

    // Регистрация заказа.
    $order = db_insert('site_commerce_orders', array('return' => Database::RETURN_INSERT_ID))
    ->fields(array(
      'number' => $number,
      'uid' => $user->uid,
      'data' => $data,
      'created' => REQUEST_TIME,
      'password' => $password,
      'hostname' => ip_address(),
    ))
    ->execute();

    if (empty($order)) {
      drupal_set_message(t('On a site there was a mistake. Try to repeat operation once again. If the mistake will repeat, we necessarily shall correct it in the near future.'), 'error');
      // Отправка системных уведомлений на электронную почту.
      $text = '<div>Error create order in {site_commerce_orders} in function site_commerce_order_stage_order_confirm_submit() in file site_commerce.order.submit.inc</div>' . $data;
      if (variable_get('kvantstudio_developer_mail_allow', TRUE)) {
        kvantstudio_send_developer_report($text);
      }
      watchdog('site_commerce', $text, NULL, WATCHDOG_ERROR);
      return FALSE;
    }

    // Выполняем привязку товаров в корзине к заказу.
    if ($user->uid) {
      // Присваиваем записям в корзине номер текущего заказа.
      $result = db_update('site_commerce_cart')
      ->fields(array('oid' => $order))
      ->condition('uid', $user->uid)
      ->condition('oid', 0)
      ->condition('status', 1)
      ->execute();

      // Присваиваем записям в таблице параметров номер текущего заказа.
      $result_cart_parametrs = db_update('site_commerce_cart_parametrs')
      ->fields(array('oid' => $order))
      ->condition('uid', $user->uid)
      ->condition('oid', 0)
      ->execute();
    }
    else {
      $result = db_update('site_commerce_cart')
      ->fields(array('oid' => $order))
      ->condition('sid', site_commerce_user_id())
      ->condition('oid', 0)
      ->condition('status', 1)
      ->execute();

      // Присваиваем записям в таблице параметров номер текущего заказа.
      $result_cart_parametrs = db_update('site_commerce_cart_parametrs')
      ->fields(array('oid' => $order))
      ->condition('sid', site_commerce_user_id())
      ->condition('oid', 0)
      ->execute();
    }

  }
  catch (Exception $e) {
    $transaction->rollback();
    // Отправка системных уведомлений на электронную почту.
    $text = 'Error update in {site_commerce_cart} in function site_commerce_order_stage_order_confirm_submit() in file site_commerce.order.submit.inc';
    if (variable_get('kvantstudio_developer_mail_allow', TRUE)) {
      kvantstudio_send_developer_report($text);
    }
    watchdog('site_commerce', $text, NULL, WATCHDOG_ERROR);
    watchdog_exception('site_commerce', $e);
    throw $e;
  }

  // Подменяем значение номер заказа (идентификатор заказа) его строковым представлением.
  // Чтобы посетитель не видел реальный порядковый номер заказа.
  if (variable_get('site_commerce_hide_order_number', FALSE)) {
    $order = $number;
  }

  // Формируем html тело сообщения.
  $body = '<h1>' . t('Number of the order') . ': ' . $order . '</h1>';
  $body .= '<div style="color:#FFF;background-color:#036;padding:10px;font-size:14px;font-family:Arial;">' . t('The information for payment and deliveries of the order') . ':</div>';
  $body .= '<ul>';
    $body .= '<li><b>' . t('Phone') . ':</b>&nbsp;' . $phone . '</li>';
    $body .= '<li><b>' . t('A link to the page of the order') . ':</b>&nbsp;' . l("http://" . $_SERVER['HTTP_HOST'] . "/tovary/orders/item/" . $order . "/" . $password, "http://" . $_SERVER['HTTP_HOST'] . "/tovary/orders/item/" . $order . "/" . $password) . '</li>';
    $body .= '<li><b>' . t('Password') . ':</b>&nbsp;' . $password . '</li>';
  $body .= '</ul>';

  // Содержимое заказа.
  $body .= '<div style="color:#FFF;background-color:#036;padding:10px;font-size:14px;font-family:Arial;">' . t('Order information') . ':</div>';
  $body .= theme('site_commerce_order', array('order' => $order, 'password' => $password));

  // Регистрация заказа в системном журнале.
  watchdog('site_commerce_order', $body);

  // Отправка сообщения менеджеру.
  kvantstudio_mail_send(array(
    'module'      => 'kvantstudio',
    'key'         => 'kvantstudio_info_mail',
    'to'          => '',
    'from'        => '',
    'subject'     => variable_get('site_name', '') . ': ' . t('the new order has acted - @number', array('@number' => $order)),
    'body'        => $body,
    'set_message' => FALSE,
    'attachments' => array(),
  ));
}

/**
 * Prepares a site commerce object for load.
 */
function site_commerce_position_load_prepare($position) {
  $position->title = NULL;
  $position->disabled = TRUE;
}

/**
* Формирование обьекта по конкретной позиции.
 *
 * Формирует подготовленные значения для вывода.
 */
function site_commerce_position_load($pid, $style_name = '') {
  $position = new stdClass();
  $site_commerce = site_commerce_load($pid);

  if (is_object($site_commerce) && !empty($site_commerce)) {
    site_commerce_position_load_prepare($position);

    $position->site_commerce = $site_commerce;
    $position->pid = $pid;
    $position->type = $site_commerce->type;
    $position->tid = $site_commerce->tid;
    $position->title = check_plain($site_commerce->title);
    $position->language = $site_commerce->language;
    $position->status = $site_commerce->status;
    $position->type_sale = $site_commerce->type_sale;
    $position->sticky = $site_commerce->sticky;
    $position->disabled = $site_commerce->disabled;
    $position->created = $site_commerce->created;
    $position->changed = $site_commerce->changed;
    $position->cost_set = $site_commerce->cost_set;

    // Путь алиас позиции.
    $path = path_load('site-commerce/' . $position->pid);
    $position->alias = $path ? $path['alias'] : 'site-commerce/' . $position->pid;

    // Считываем значения экземпляров полей для текущего типа товара.
    foreach (field_info_instances('site_commerce', $site_commerce->type) as $instance) {
      $field_name = $instance['field_name'];

      $position->$field_name = NULL;
      $field_value = kvantstudio_field_value('site_commerce', $site_commerce, $field_name, 0);

      if (is_string($field_value)) {
        $position->$field_name = $field_value;
      }
      else {
        $position->$field_name = $field_value;
        if (is_array($field_value) && isset($field_value['fid'])) {
          $field_name = $field_name . '_fid';
          $position->$field_name = $field_value['fid'];
        }
        if (is_object($field_value) && isset($field_value->tid)) {
          $field_name = $field_name . '_tid';
          $position->$field_name = $field_value->tid;
        }
        if (is_array($field_value) && isset($field_value['tid'])) {
          $field_name = $field_name . '_tid';
          $position->$field_name = $field_value['tid'];
        }
      }
    }

    // Переназначение значений стоимости.
    // Если стоимость не задана в типе объекта, устанавливаем значение равным нулю.
    if (isset($position->field_site_commerce_cost) && $position->field_site_commerce_cost == '0.00') {
      $position->field_site_commerce_cost = (int) 0;
    }
    if (!isset($position->field_site_commerce_cost)) {
      $position->field_site_commerce_cost = (int) 0;
    }

    if (isset($position->field_site_commerce_cost_min) && $position->field_site_commerce_cost_min == '0.00') {
      $position->field_site_commerce_cost_min = (int) 0;
    }
    if (!isset($position->field_site_commerce_cost_min)) {
      $position->field_site_commerce_cost_min = (int) 0;
    }

    if (isset($position->field_site_commerce_cost_old) && $position->field_site_commerce_cost_old == '0.00') {
      $position->field_site_commerce_cost_old = (int) 0;
    }
    if (!isset($position->field_site_commerce_cost_old)) {
      $position->field_site_commerce_cost_old = (int) 0;
    }

    // Определяем параметры для спецпредложения.
    if (isset($position->field_special_offer_tid)) {
      $term = taxonomy_term_load($position->field_special_offer_tid);
      $position->special_offer['tid'] = $term->tid;
      $position->special_offer['type'] = kvantstudio_field_value('taxonomy_term', $term, 'field_site_commerce_so_type', 0);
      $position->special_offer['status'] = kvantstudio_field_value('taxonomy_term', $term, 'field_site_commerce_so_status', 0);
      $position->special_offer['discount'] = kvantstudio_field_value('taxonomy_term', $term, 'field_site_commerce_discount', 0);
    }

    // Производим переназначение полей категорий в более простые без числовых индексов.
    // Это необходимо сделать, чтобы в дальнейшем эти поля однозначно определялись
    // для любого типа товаров.
    $type = site_commerce_type_load($position->type);

    $position->field_site_commerce_country = NULL;
    $field_name = 'field_country_' . $type->countries_vocabulary;
    if (isset($position->$field_name)) {
      $position->field_site_commerce_country = $position->$field_name;
    }
    $position->field_site_commerce_manufacture = NULL;
    $field_name = 'field_manufacture_' . $type->manufactures_vocabulary;
    if (isset($position->$field_name)) {
      $position->field_site_commerce_manufacture = $position->$field_name;
    }

    $position->field_site_commerce_brand = NULL;
    $field_name = 'field_brand_' . $type->manufactures_vocabulary;
    if (isset($position->$field_name)) {
      $position->field_site_commerce_brand = $position->$field_name;
    }

    $position->field_site_commerce_contractor = NULL;
    $field_name = 'field_contractor_' . $type->contractors_vocabulary;
    if (isset($position->$field_name)) {
      if (is_array($position->$field_name)) {
        $term = $position->$field_name;
        $position->field_site_commerce_contractor = $term['taxonomy_term'];
      }
      else {
        $position->field_site_commerce_contractor = $position->$field_name;
      }
    }

    $position->field_site_commerce_category = NULL;
    $field_name = 'field_category_' . $type->categories_vocabulary;
    if (isset($position->$field_name)) {
      $position->field_site_commerce_category = $position->$field_name;
    }

    // Дополнительные поля.
    // Параметр идентификации позиции в отчетах. Может сотоять из нескольких наименований.
    // Определяется в hook_site_commerce_identifier().
    $position->identifier = '';
    module_invoke_all('site_commerce_identifier', $position);

    // Определяем нужно ли формировать пути до изображения позиции.
    // Выполняем если передан параметр стиля imagecache $style_name.
    // Определяем отображение сообщения если новинка.
    if ($style_name) {
      $position->image = array();

      // Определяем теги главного изображения, описание и заголовок если они не заданы.
      $position->image['alt'] = '';
      if (!empty($position->field_site_commerce_image['alt'])) {
        $position->image['alt'] = $position->field_site_commerce_image['alt'];
      }
      $position->image['title'] = '';
      if (!empty($position->field_site_commerce_image['title'])) {
        $position->image['title'] = check_plain($position->field_site_commerce_image['title']);
      }

      // Вывод главного фотоизображения.
      $position->image['url'] = '';
      $position->image['style_url'] = '';
      if ($uri = site_commerce_default_position_image_uri($position)) {
        $position->image['url'] = file_create_url($uri);
        $position->image['style_url'] = image_style_url($style_name, $uri);
      }
    }
  }

  return $position;
}

/**
 * Process variables for site-commerce-position-index.tpl.php.
 * @see site-commerce-position-index.tpl.php.
 */
function template_preprocess_site_commerce_position_index(&$variables) {
  $pid = $variables['pid'];

  $variables['position_index'] = array();

  // Перечень привязанных позиций.
  $result = db_query("SELECT n.pid FROM {site_commerce_position_index} n WHERE n.rpid = :pid", array(':pid' => $pid));
  foreach ($result as $record) {
    // Загружаем информацию о позиции.
    $position_index = site_commerce_position_load($record->pid);

    // Проверяем разрешено ли отображать позицию при текущем статусе.
    if (!site_commerce_view_position_in_catalog($position_index->status)) {
      continue;
    }
    $variables['position_index'][$record->pid] = $position_index;
  }
}

/**
 * Process variables for site-commerce-data.tpl.php.
 * @see site-commerce-data.tpl.php.
 */
function template_preprocess_site_commerce_data(&$variables) {
  $pid = $variables['pid'];

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($pid);

  $type = site_commerce_type_load($position->type);

  $field_info_instances = field_info_instances('site_commerce', $position->type);

  // Определяем доступные переменные по умолчанию.
  $field_name_allowed = array(
    'field_site_commerce_category',
    'field_site_commerce_country',
    'field_site_commerce_manufacture',
    'field_site_commerce_brand',
  );

  // Дополняем массив характеристиками, которые предоставляют другие модули.
  $data = module_invoke_all('site_commerce_data', array('type' => $position->type));
  foreach ($data as $value) {
    $field_name_allowed[] = $value;
  }

  $variables['data'] = array();

  foreach ($field_info_instances as $field_name => $value) {
    $field_label = $value['label'];
    $field_value = kvantstudio_field_value('site_commerce', $position->site_commerce, $field_name, 0);
    // Если поле - термин таксономии. Применяем для любого возможного поля - термина таксономии.
    if (is_array($field_value) && isset($field_value['taxonomy_term'])) {
      if ($field_name == 'field_category_' . $type->categories_vocabulary) {
        $field_name = 'field_site_commerce_category';
      }
      if ($field_name == 'field_country_' . $type->countries_vocabulary) {
        $field_name = 'field_site_commerce_country';
      }
      if ($field_name == 'field_manufacture_' . $type->manufactures_vocabulary) {
        $field_name = 'field_site_commerce_manufacture';
      }
      if ($field_name == 'field_brand_' . $type->manufactures_vocabulary) {
        $field_name = 'field_site_commerce_brand';
      }
      $field_value = $field_value['taxonomy_term']->name;

      // Если разрешено отображать поле.
      if (in_array($field_name, $field_name_allowed)) {
        $variables['data'][$field_name] = array('field_label' => $field_label, 'field_value' => $field_value);
      }

      // Массив всех доступных полей терминов таксономии.
      $variables['data_all'][$field_name] = array('field_name' => $field_name, 'field_label' => $field_label, 'field_value' => $field_value);
    }

    // Добавляем простые текстовые поля, если они присутствуют в массиве.
    if (is_string($field_value) && in_array($field_name, $field_name_allowed)) {
      $variables['data'][$field_name] = array('field_label' => $field_label, 'field_value' => $field_value);
    }
  }
}

/**
 * Process variables for site-commerce-cost.tpl.php.
 * @see site-commerce-cost.tpl.php.
 */
function template_preprocess_site_commerce_cost(&$variables) {
  $position = $variables['position'];

  // Назначаем глобальный класс с учётом модификатора вызова функции.
  $variables['class'] = 'site-commerce-cost_' . $variables['type_call'];

  // Если определен параметр примечания к стоимости.
  $variables['global_note_cost'] = variable_get('site_commerce_note_global_cost', '');

  // Устанавливаем валюту, которая выбрана по умолчанию на сайте.
  $variables['currency'] = variable_get('site_commerce_default_currency');

  // Стоимость товара по умолчанию.
  $variables['cost'] = array(
    'basic' => 0, // Базовая стоимость.
    'min' => 0,  // Минимальная стоимость.
    'set' => 0,  // Стоимость из набора товаров, базовая не учитывается.
    'special_offer' => array(
      'cost_discount' => 0, // Величина скидки.
      'discount' =>  0, // Величина скидки в процентах.
      'cost' => 0, // Стоимость с учётом скидки или предыдущей стоимости относительно базовой стоимости.
      'old' => 0, // Предыдущая стоимость.
    )
  );

  // Статусы, для которых разрешено добавлять в корзину.
  $allow_execute_statuses = variable_get('site_commerce_add_to_cart_allow_statuses', site_commerce_position_status());
  if (in_array($position->status, $allow_execute_statuses) && $position->type_sale <> 5) {
    // Единица измерения количества.
    $variables['measure'] = '';
    if ($position->field_site_commerce_measure) {
      $variables['measure'] = $position->field_site_commerce_measure;
    }

    // Рассчитанная стоимость товара.
    $variables['cost'] = site_commerce_cost_value($position, 'array');
  }

}

/**
 * Формирует числовое значение стоимости товара для математических вычислений.
 * Используется, когда нужно производить математические вычисления.
 *
 * @param $pid
 *   Идентификатор или объект позиции товара, для которого возвращаем стоимость. *
 * @param $type_result
 *   Параметр результата функции, возвращает числовое значение стоимости товара
 *   если  $type_result = 'integer'. Если $type_result = 'array' - функция возвращает
 *   массив значений стоимости с учётом спецпредложений и набор товаров. Если нужно получить
 *   минимальную и базовую стоимость, надо вызывать функцию только с параметром $type_result = 'array'.
 */
function site_commerce_cost_value($pid, $type_result = 'integer') {
  // Загружаем информацию о позиции.
  if (is_numeric($pid)) {
    $position = site_commerce_position_load($pid);
  }
  if (is_object($pid)) {
    $position = $pid;
  }

  // Преобразуем форматы стоимости, убираем не значащие нули, чтобы производить вычисления.
  $position->field_site_commerce_cost = site_commerce_cost_format($position->field_site_commerce_cost);
  $position->field_site_commerce_cost_old = site_commerce_cost_format($position->field_site_commerce_cost_old);
  $position->field_site_commerce_cost_min = site_commerce_cost_format($position->field_site_commerce_cost_min);

  // Массив возможных вариантов стоимости.
  $cost_array = array(
    'basic' => 0, // Базовая стоимость.
    'min' => 0,  // Минимальная стоимость.
    'set' => 0,  // Стоимость из набора товаров, базовая не учитывается.
    'special_offer' => array(
      'cost_discount' => 0, // Величина скидки.
      'discount' =>  0, // Величина скидки в процентах.
      'cost' => 0, // Стоимость с учётом скидки или предыдущей стоимости относительно базовой стоимости.
      'old' => 0, // Предыдущая стоимость.
    )
  );

  // Основная стоимость товара, базовая стоимость без дополнительных опций.
  $cost = round($position->field_site_commerce_cost, 2);
  $cost_array['basic'] = $cost;

  // Если существует параметр минимальной стоимости, он будет возвращен в качестве стоимости по умолчанию.
  // Если нужно получить минимальную и базовую стоимость, нужно вызывать функцию только с параметром $type_result = 'array'.
  if ($position->field_site_commerce_cost_min > 0) {
    $cost = round($position->field_site_commerce_cost_min, 2);
    $cost_array['min'] = $cost;
  }

  // Определяем стоимость, если товар продается как группа товаров.
  // Товар должен иметь тип продажи «Состоит из набора товаров».
  if ($position->type_sale == 4 && $position->cost_set) {
    $cost = 0;
    // Перечень привязанных позиций.
    $result = db_query("SELECT n.rpid FROM {site_commerce_position_index} n WHERE n.pid = :pid", array(':pid' => $position->pid));
    if ($result) {
      foreach ($result as $record) {
        // Загружаем информацию о позиции.
        $position_index = site_commerce_position_load($record->rpid);

        // Проверяем разрешено ли отображать позицию при текущем статусе.
        if (!site_commerce_view_position_in_catalog($position_index->status)) {
          continue;
        }

        // Вычисляем минимальное количество при заказе в составе другого товара.
        if ($position_index->field_site_commerce_min_quantity) {
          $position_quantity = (int) $position_index->field_site_commerce_min_quantity;
        }
        else {
          $position_quantity = 1;
        }

        // Вычисляем стоимость текущей позиции, возможно она учавствует в спецпредложении.
        // Тогда итоговая сумма набора может быть меньше.
        $position_index_cost = site_commerce_cost_value($record->rpid);

        // Стоимость товара будет вычисляться как сумма стоимости товаров, из которых он состоит.
        $cost = $cost + ($position_index_cost * $position_quantity);
      }
    }

    // Стоимость с учётом стоимости набора.
    $cost_array['set'] = round($cost, 2);

    // Устанавливаем в качестве базовой стоимости позиции, состоящей из набора товаров.
    // Возможно на этот набор товаров действует спецпредложение.
    // Ниже будет вычисляться скидка.
    $position->field_site_commerce_cost = $cost_array['set'];

    // Убираем базовую стоимость, т.к. стоимость считаем как сумму набора товаров.
    $cost_array['basic'] = 0;
  }

  // Определяем учавствует ли товар в спецпредложении.
  if (isset($position->special_offer['tid']) && $position->special_offer['status']) {
    // Вычисляем скидки только для позиций у которых задана основная стоимость.
    // Если стоимость задана не явно (только минимальная), скидку не вычислить. Это не логично!
    if ($position->field_site_commerce_cost > 0) {
      // Определяем ключь по умолчанию, стоимость с учётом скидки.
      $result = array('cost' => 0);

      // Если спецпредложение формируется исходя из скидки в процентном отношении.
      if ($position->special_offer['type'] <> 4) {
        $result = site_commerce_cost_discount($position->field_site_commerce_cost, $position->special_offer['discount']);
      }

      // Если спецпредложение формируется исходя из обычного снижения стоимости. Т.е. скидка расчитывается из разницы предыдущей цены и текущей.
      if ($position->special_offer['type'] == 4) {
        if (isset($position->field_site_commerce_cost_old) && $position->field_site_commerce_cost_old > $position->field_site_commerce_cost) {
          $result = site_commerce_cost_discount($position->field_site_commerce_cost, $position->field_site_commerce_cost_old, 'minus');
        }
      }

      // Если удалось посчитать стоимость со скидкой.
      if ($result['cost']) {
        $cost_array['special_offer'] = $result;
        $cost = $result['cost'];

        // Если мы вычисляли скидки для набора товаров, возвращаем базовую стоимость.
        if ($cost_array['set']) {
          $cost_array['set'] = $result['cost'];

        }
      }
    }
  }

  if ($type_result == 'array') {
    return $cost_array;
  }
  return round($cost, 2);
}

/**
 * Process variables for site-commerce-term.tpl.php.
 * @see site-commerce-term.tpl.php.
 */
function template_preprocess_site_commerce_term(&$variables) {
  // Идентификаторы позиций по категории товаров.
  $pids = $variables['pids'];
  $total = $variables['total'];

  $variables['pids'] = array();

  $count = 0;

  // Разрешить кэширование карточек товара при просмотре каталога.
  $cache = variable_get('site_commerce_catalog_cache', FALSE);

  $parametrs = array();

  foreach ($pids as $pid) {
    $count++;

    if ($cache) {
      // Получаем карточку товара из кэша.
      $elements = array(
        '#theme' => 'site_commerce_category_pid',
        '#pid' => $pid,
        '#cache' => array(
          'cid' => 'site_commerce_category_pid:' . $pid,
          'bin' => 'cache_site_commerce',
          'expire' => CACHE_PERMANENT,
        ),
      );
      $data_cached = drupal_render($elements);
      $data = unserialize($data_cached);
    }
    else {
      $parametrs['elements']['#pid'] = $pid;
      $data = theme_site_commerce_category_pid($parametrs);
    }

    // Форма действий.
    $data->cart = '';
    if (variable_get('site_commerce_allow_cart', TRUE) && variable_get('site_commerce_allow_button_add_to_cart_in_catalog', FALSE)) {
      $form = drupal_get_form('site_commerce_actions_form', $pid, TRUE, FALSE, TRUE, TRUE);
      $data->cart = drupal_render($form);
    }

    // Назначаем классы на элемент списка <li>.
    if ($count%2) {
      $data->classes[] = 'odd';
    }
    else {
      $data->classes[] = 'even';
    }
    $data->classes = drupal_implode_tags($data->classes);

    // Формируем панель администрирования.
    $data->form_admin = '';
    if (user_access('administer site commerce products')) {
      $form_admin = drupal_get_form('site_commerce_admin_actions_form', $pid);
      $data->form_admin = drupal_render($form_admin);
    }

    $variables['pids'][$pid] = $data;
  }

  // Выводим постраничную навигацию.
  $variables['pager'] = '';
  if ($total && variable_get('site_commerce_allow_pager', TRUE)) {
    $num_per_page = variable_get('site_commerce_num_per_page', 20);
    $page = pager_default_initialize($total, $num_per_page);
    $variables['pager'] = theme('pager', array('quantity' => 3));
  }

}

/**
 * Получает параметры позиции для вывода их в каталоге.
 * @param (int) $pid
 *   Идентификатор позиции.
 */
function theme_site_commerce_category_pid($variables) {
  $data = new stdClass();

  $pid = $variables['elements']['#pid'];

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($pid);

  // Путь до позиции.
  $data->alias = $position->alias;

  // Определяем стиль изображения.
  $style_name = variable_get('site_commerce_imagecache_taxonomy_term', 'sc_taxonomy_term');
  if ($position->sticky) {
    $style_name = variable_get('site_commerce_imagecache_taxonomy_term_new', 'sc_taxonomy_term');
  }

  // Определяем теги изображения, описание и заголовок если они не заданы.
  $data->image_alt = '';
  if (!empty($position->field_site_commerce_image['alt'])) {
    $data->image_alt = $position->field_site_commerce_image['alt'];
  }
  $data->image_title = '';
  if (!empty($position->field_site_commerce_image['title'])) {
    $data->image_title = $position->field_site_commerce_image['title'];
  }

  // Вывод фотоизображения.
  $data->image_style_url = NULL;
  if ($uri = site_commerce_default_position_image_uri($pid)) {
    $data->image_url = file_create_url($uri);
    $data->image_style_url = image_style_url($style_name, $uri);
  }

  // Наименование позиции.
  $data->title = $position->title;

  // Статус позиции на складе.
  $data->status = '';
  if ($position->status && variable_get('site_commerce_catalog_allow_status', TRUE)) {
    $data->status = theme('site_commerce_status', array('pid' => $pid, 'status' => $position->status, 'type_call' => 'catalog'));
  }

  // Формируем представление стоимости.
  $data->cost = theme('site_commerce_cost', array('position' => $position, 'type_call' => 'catalog'));

  $data->data = '';

  // Определяем примечание, если основная и минимальная стоимость равна 0.
  // Отображаем только для товаров, которые имеют тип продажи - поштучная продажа.
  if ($position->type_sale < 4) {
    $text_note_none_cost = variable_get('site_commerce_note_none_cost', 'Please check the cost from the vendor consultant.');
    if (isset($position->field_site_commerce_cost) && isset($position->field_site_commerce_cost_min)) {
      if ($position->field_site_commerce_cost == 0 && $position->field_site_commerce_cost_min == 0 && $text_note_none_cost) {
        $data->data .= '<div class="site-commerce-text-none-cost">' . $text_note_none_cost . '</div>';
      }
    }
    if (isset($position->field_site_commerce_cost) && !isset($position->field_site_commerce_cost_min)) {
      if ($position->field_site_commerce_cost == 0 && $text_note_none_cost) {
        $data->data .= '<div class="site-commerce-text-none-cost">' . $text_note_none_cost . '</div>';
      }
    }
  }

  // Определяем примечание, если существует минимальная стоимость.
  $text_note_minimal_cost = variable_get('site_commerce_note_minimal_cost', 'The price is specified for the products in a base complete set. Final cost will depend on a complete set after registration of the order. We shall call back to you for specification of full cost of the products.');
  if (isset($position->field_site_commerce_cost_min) && $position->field_site_commerce_cost_min > 0 && $text_note_minimal_cost) {
    $data->data .= '<div class="site-commerce-text-minimal-cost">' . $text_note_minimal_cost . '</div>';
  }

  // Формируем css class.
  if ($position->disabled || $position->type_sale == 3) {
    $data->classes[] = 'site-commerce-item-not-published';
  }

  // Формируем краткое описание.
  $data->summary = "";
  if (variable_get('site_commerce_allow_summary_in_category', TRUE)) {
    $data->summary = theme('site_commerce_body', array('site_commerce' => $position->site_commerce, 'summary_allow' => TRUE, 'value_allow' => FALSE));
  }

  if (isset($variables['elements']['#cache'])) {
    $data = serialize($data);
  }

  return $data;
}

/**
 * Process variables for site-commerce-subcategories.tpl.php.
 * @see site-commerce-subcategories.tpl.php.
 */
function template_preprocess_site_commerce_subcategories(&$variables) {
  $tid = $variables['tid'];

  // Определяем главную корневую категорию.
  if (variable_get('site_commerce_allow_view_all_categories', FALSE)) {
    $parent_terms = taxonomy_get_parents_all($tid);
    foreach($parent_terms as $parent) {
      $parent_parents = taxonomy_get_parents_all($parent->tid);
      if ($parent_parents != false) {
        $tid = $parent->tid;
      }
    }
  }

  // Определяем имеются ли дочерние элементы у текущего каталога.
  $variables['count_children'] = db_query("SELECT COUNT(*) FROM {taxonomy_term_hierarchy} n WHERE n.parent = :parent", array(':parent' => $tid))->fetchField();

  $variables['terms'] = array();

  if ($variables['count_children']) {
    // Статусы, для которых разрешено отображать позицию.
    $allow_view_statuses = variable_get('site_commerce_catalog_allow_statuses', site_commerce_position_status());

    // Формируем дочерние категории.
    $term = taxonomy_term_load($tid);

    $tree = taxonomy_get_tree($term->vid, $tid, 1, TRUE);

    // Определяем стиль изображения категории по умолчанию.
    $style_name = variable_get('site_commerce_imagecache_subtaxonomy', 'sc_subtaxonomy');

    foreach ($tree as $term) {
      // Количество позиций у текущей категории.
      $term->count = site_commerce_count_positions($term->tid, $allow_view_statuses, SITE_COMMERCE_PUBLISHED, FALSE, TRUE);

      // Если разрешено отображать категории без позиций или количество позиций > 0.
      if (variable_get('site_commerce_allow_null_category', TRUE) || $term->count) {
        // Если запрещено отображать количество позиций в подкатегориях.
        if (!variable_get('site_commerce_allow_count_catalog', FALSE)) {
          $term->count = 0;
        }

        // Формируем изображение термина.
        $term->image_url = '';
        if ($uri = site_commerce_default_term_image_uri($term->tid)) {
          $term->image_url = image_style_url($style_name, $uri);
        }

        $variables['terms'][$term->tid] = $term;
      }
    }
  }
}

/**
 * Process variables for site-commerce-block-content.tpl.php.
 * @see site-commerce-block-content.tpl.php.
 */
function template_preprocess_site_commerce_block_content(&$variables) {
  // Формируем переменные.
  $pids = $variables['pids'];

  $variables['pids'] = array();

  foreach ($pids as $pid) {
    // Загружаем информацию о позиции.
    $position = site_commerce_position_load($pid);

    // Проверяем разрешено ли отображать позицию при текущем статусе.
    if (!site_commerce_view_position_in_catalog($position->status)) {
      continue;
    }
    $variables['pids'][$position->pid]['position'] = $position;

    // Наименование позиции.
    $variables['pids'][$position->pid]['title'] = $position->title;

    // Определяем стиль отображения.
    $style_name = variable_get('site_commerce_imagecache_block', 'sc_block');

    // Определяем теги главного изображения, описание и заголовок если они не заданы.
    $variables['pids'][$position->pid]['image']['alt'] = '';
    if (!empty($position->field_site_commerce_image['alt'])) {
      $variables['pids'][$position->pid]['image']['alt'] = $position->field_site_commerce_image['alt'];
    }
    $variables['pids'][$position->pid]['image']['title'] = '';
    if (!empty($position->field_site_commerce_image['title'])) {
      $variables['pids'][$position->pid]['image']['title'] = $position->field_site_commerce_image['title'];
    }

    // Вывод главного фотоизображения.
    $variables['pids'][$position->pid]['image']['url'] = '';
    $variables['pids'][$position->pid]['image']['style_url'] = '';
    if ($uri = site_commerce_default_position_image_uri($position)) {
      $variables['pids'][$position->pid]['image']['url'] = file_create_url($uri);
      $variables['pids'][$position->pid]['image']['style_url'] = image_style_url($style_name, $uri);
    }

    // Стоимость.
    $variables['pids'][$position->pid]['cost'] = theme('site_commerce_cost', array(
      'position' => $position,
      'type_call' => 'block',
    ));

    // Форма действий.
    $variables['pids'][$position->pid]['cart'] = '';
    if (variable_get('site_commerce_allow_cart', TRUE) && variable_get('site_commerce_order_block', FALSE)) {
      $form = drupal_get_form('site_commerce_actions_form', $position->pid, FALSE, FALSE, FALSE, FALSE, 'block');
      $variables['pids'][$position->pid]['cart'] = drupal_render($form);
    }
  }
}

/**
 * Process variables for site-commerce-block-categories.tpl.php.
 * @see site-ommerce-block-categories.tpl.php.
 */
function template_preprocess_site_commerce_block_categories(&$variables) {
  // Тип сортировки.
  if (variable_get('site_commerce_catalog_sort_type', FALSE)) {
    $type_sort = 't.weight';
  }
  else {
    $type_sort = 't.name';
  }

  // Статусы, для которых разрешено отображать позицию.
  $allow_view_statuses = variable_get('site_commerce_catalog_allow_statuses', site_commerce_position_status());

  // Определяем стиль изображения.
  $style_name = variable_get('site_commerce_imagecache_taxonomy_block', 'sc_taxonomy_block');

  $vocabularies = site_commerce_module_vocabulary();
  $variables['terms'] = array();
  foreach ($vocabularies as $vocabulary) {
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
    $query->addField('t', 'tid');
    $query->condition('t.vid', $vocabulary['vid']);
    $query->condition('h.parent', 0);
    $query->addTag('term_access');
    $query->orderBy($type_sort);
    $result = $query->execute();

    foreach ($result as $row) {
      $term = taxonomy_term_load($row->tid);
      $term->count = site_commerce_count_positions($term->tid, $allow_view_statuses, SITE_COMMERCE_PUBLISHED, TRUE);
      if (variable_get('site_commerce_allow_null_category', TRUE) || $term->count) {
        // Определяем изображение категории.
        $term->image_url = '';
        $term->image_style_url = '';
        if (variable_get('site_commerce_catalog_block_images', TRUE)) {
          if ($uri = site_commerce_default_term_image_uri($term->tid)) {
            $term->image_url = file_create_url($uri);
            $term->image_style_url = image_style_url($style_name, $uri);
          }
        }

        $variables['terms'][$term->tid] = $term;
      }
    }
  }
}

/**
 * Process variables for site-commerce-status.tpl.php.
 * @see site-commerce-status.tpl.php.
 */
function template_preprocess_site_commerce_status(&$variables) {
  // Определяем переменные.
  $variables['position_status'] = site_commerce_position_status();
}

/**
 * Темизация блока сортировки позиций.
 */
function theme_site_commerce_sort($variables) {
  $output = '';

  $term = new stdClass();
  if ($variables['tid']) {
    $term = taxonomy_term_load($variables['tid']);
  }
  else {
    $term->alias = variable_get('site_commerce_catalog_link', 'tovary') . '/novinki/' . $variables['tid'];
  }

  // Сортировка по названию.
  $sort_title = 'asc';
  $order_title = t('The name');
  if (isset($_GET['sort']) && isset($_GET['order']) && $_GET['order'] == $order_title) {
    if ($_GET['sort'] == 'desc') {
      $sort_title = 'asc';
    }
    else {
      $sort_title = 'desc';
    }
  }
  $indicator_title = theme('tablesort_indicator', array('style' => $sort_title));

  // Сортировка по стоимости.
  $sort_cost = 'asc';
  $order_cost = t('Cost');
  if (isset($_GET['sort']) && isset($_GET['order']) && $_GET['order'] == $order_cost) {
    if ($_GET['sort'] == 'desc') {
      $sort_cost = 'asc';
    }
    else {
      $sort_cost = 'desc';
    }
  }
  $indicator_cost = theme('tablesort_indicator', array('style' => $sort_cost));

  $output .= '<noindex><div class="site-commerce-sort shadowed clearfix">';
    $output .= '<div class="site-commerce-sort-title">' . t("To sort <span class='site-commerce-sort-title-name'>@name</span> on:", array('@name' => $variables['title'])) . '</div>';
    $output .= '<div class="site-commerce-sort-types">';
      if ($variables['novelties']) {
        $output .= '<span class="site-commerce-sort-item">' . l(t('Novelties'), $term->alias, array('attributes' => array('rel' => 'nofollow'), 'query' => array('sort' => 'desc', 'order' => 'sticky'))) . '</span>';
      }
      $output .= '<span class="site-commerce-sort-item">' . l(t('The name'), $term->alias, array('attributes' => array('rel' => 'nofollow'), 'query' => array('sort' => $sort_title, 'order' => $order_title))) . $indicator_title . '</span>';
      $output .= '<span class="site-commerce-sort-item">' . l(t('Cost'), $term->alias, array('attributes' => array('rel' => 'nofollow'), 'query' => array('sort' => $sort_cost, 'order' => $order_cost))) . $indicator_cost . '</span>';
    $output .= '</div>';
  $output .= '</div></noindex>';

  return $output;
}

/**
 * Темизирует отображение краткого и полного описания товара.
 * @param (object) $variables['site_commerce']
 *   Объект позиции.
 * @param (bool) $variables['summary_allow']
 *   Параметр, который разрешает вывод краткого содержимого - анонса.
 * @param (bool) $variables['value_allow']
 *   Параметр, который разрешает вывод полного содержимого.
 */
function theme_site_commerce_body($variables) {
  $site_commerce = $variables['site_commerce'];
  $summary_allow = $variables['summary_allow'];
  $value_allow = $variables['value_allow'];

  $output = '';

  $item = field_get_items('site_commerce', $site_commerce, 'field_site_commerce_body');
  if (is_array($item)) {
    $item = reset($item);
    if (!empty($item['summary']) && $summary_allow) {
      $output .= $item['summary'];
    }
    if (!empty($item['value']) && $value_allow) {
      $output .= $item['value'];
    }
  }
  return $output;
}

/**
 * Process variables for site-commerce-other-positions.tpl.php.
 * @see site-commerce-other-positions.tpl.php.
 */
function template_preprocess_site_commerce_other_positions(&$variables) {
  $position = $variables['position'];

  $array_tid = array();

  // Загружаем информацию о позиции.
  $tid = $position->tid;
  $term = taxonomy_term_load($tid);

  $variables['term'] = $term;

  // Определяем есть ли в текущей категории позиции.
  $count_site_commerce = db_query("SELECT COUNT(n.pid) FROM {site_commerce_taxonomy_index} n WHERE n.tid = :tid", array(':tid' => $tid))->fetchField();
  if ($count_site_commerce > 0) {
    $array_tid = array($tid);
  }
  else {
    // Определяем имеются ли дочерние элементы у текущего каталога.
    $count_children = db_query("SELECT COUNT(*) FROM {taxonomy_term_hierarchy} n WHERE n.parent = :parent", array(':parent' => $tid))->fetchField();
    if ($count_children) {
      $result = kvantstudio_taxonomy_get_children_all($tid);
      foreach ($result as $key) {
        $array_tid[] = $key->tid;
      }
    }
  }

  // Если есть категории для вывода.
  $pids = array();
  if (count($array_tid)) {
    $type_sale = array(1, 4, 5);

    $allow_view_statuses = variable_get('site_commerce_catalog_allow_statuses', site_commerce_position_status());

    // Выбираем таблицу.
    $query = db_select('site_commerce', 'n');
    // Выбираем поля и условия.
    $query->fields('n', array('pid', 'title'));
    $query->condition('n.tid', $array_tid, 'IN');
    $query->condition('n.pid', $position->pid, '<>');
    $query->condition('n.type_sale', $type_sale, 'IN');
    $query->condition('n.status', $allow_view_statuses, 'IN');
    //$query->condition('n.status', 10);
    if (!user_access('administer site commerce products')) {
      $query->condition('n.disabled', 0);
    }
    // Разрешаем сортировку позиций по принципу UpSell.
    if (variable_get('site_commerce_other_positions_upsell', FALSE)) {
      $query->innerJoin('field_data_field_site_commerce_cost', 'f', 'n.pid = f.entity_id');
      $query->condition('f.field_site_commerce_cost_value', $position->field_site_commerce_cost, '>');
    }
    // Сортировать по.
    $query->orderRandom();
    // Для нумерации страниц.
    $query->range(0, variable_get('site_commerce_other_positions_limit', 8));
    $result = $query->execute();
    
    foreach ($result as $row) {
      $exist = site_commerce_position_index_exist($position->pid, $row->pid);
      if (!$exist) {
        $pids[] = $row->pid;
      }
    }
  }

  $variables['pids'] = array();

  // Если есть прочие позиции.
  if (count($pids)) {
    foreach ($pids as $pid) {
      // Загружаем информацию о позиции.
      $position = site_commerce_position_load($pid);

      $variables['pids'][$position->pid]['position'] = $position;

      // Наименование позиции.
      $variables['pids'][$position->pid]['title'] = $position->title;

      // Определяем отображение сообщения если новинка.
      $style_name = variable_get('site_commerce_imagecache_other', 'sc_first');
      if ($position->sticky) {
        $style_name = variable_get('site_commerce_imagecache_other_new', 'sc_first');
      }

      // Определяем теги главного изображения, описание и заголовок если они не заданы.
      $variables['pids'][$position->pid]['image']['alt'] = '';
      if (!empty($position->field_site_commerce_image['alt'])) {
        $variables['pids'][$position->pid]['image']['alt'] = $position->field_site_commerce_image['alt'];
      }
      $variables['pids'][$position->pid]['image']['title'] = '';
      if (!empty($position->field_site_commerce_image['title'])) {
        $variables['pids'][$position->pid]['image']['title'] = $position->field_site_commerce_image['title'];
      }

      // Вывод главного фотоизображения.
      $variables['pids'][$position->pid]['image']['url'] = '';
      $variables['pids'][$position->pid]['image']['style_url'] = '';
      if ($uri = site_commerce_default_position_image_uri($position)) {
        $variables['pids'][$position->pid]['image']['url'] = file_create_url($uri);
        $variables['pids'][$position->pid]['image']['style_url'] = image_style_url($style_name, $uri);
      }

      // Стоимость.
      $variables['pids'][$position->pid]['cost'] = theme('site_commerce_cost', array(
        'position' => $position,
        'type_call' => 'other-position',
      ));
    }
  }
}

/**
 * Темизация изображений позиций.
 * (int) $pid- идентификатор позиций.
 */
function theme_site_commerce_images($data) {
  $output = '';

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($data['pid']);

  $position_images = $position->site_commerce;

  if (!empty($position_images->field_site_commerce_image)) {
    // Вывод главного изображения.
    $style_name = variable_get('site_commerce_imagecache_first', 'sc_first');
    if ($position->sticky) {
      $style_name = variable_get('site_commerce_imagecache_first_new', 'sc_first');
    }

    // Если передан принудительно параметр названия стиля первого изображения учитываем его.
    if ($data['style_imagecache_first_image']) {
      $style_name = $data['style_imagecache_first_image'];
    }

    // Определяем тип изображения. Если изображение по умолчанию ссылку не выводим.
    if (isset($position_images->field_site_commerce_image['und'][0]['is_default'])) {
      $is_default = $position_images->field_site_commerce_image['und'][0]['is_default'];
    }
    else {
      $is_default = FALSE;
    }

    // Определяем параметры изображения, высоту и ширину если они не заданы.
    if (empty($position_images->field_site_commerce_image['und'][0]['width']) || empty($position_images->field_site_commerce_image['und'][0]['height'])) {
      $info = image_get_info($position_images->field_site_commerce_image['und'][0]['uri']);
      $position_images->field_site_commerce_image['und'][0]['width'] = $info['width'];
      $position_images->field_site_commerce_image['und'][0]['height'] = $info['height'];
    }

    $variables = array(
      'style_name' => $style_name,
      'style_name_popup' => variable_get('site_commerce_imagecache_full', 'sc_full'),
      'image_path' => $position_images->field_site_commerce_image['und'][0]['uri'],
      'alt' => $position_images->field_site_commerce_image['und'][0]['alt'],
      'title' => $position_images->field_site_commerce_image['und'][0]['title'],
      'width' => $position_images->field_site_commerce_image['und'][0]['width'],
      'height' => $position_images->field_site_commerce_image['und'][0]['height'],
      'attributes' => array('class' => 'site-commerce-main-image'),
      'class' => array('site-commerce-images-page-colorbox'),
      'link' => $is_default ? FALSE : TRUE,
      'gid' => 'site-commerce-images-page',
    );
    $output .= theme('kvantstudio_image', $variables);

    // Вывод дополнительных изображений.
    if (count($position_images->field_site_commerce_image['und']) > 1 && $data['all']) {
      $output .= '<div class="site-commerce-other-images-block">';

      // Удаляем первое изображение в массиве. Выводим только последующие.
      unset($position_images->field_site_commerce_image['und'][0]);

      foreach ($position_images->field_site_commerce_image['und'] as $key => $value) {
        $variables = array(
          'style_name' => variable_get('site_commerce_imagecache_second', 'sc_thumbnail'),
          'style_name_popup' => variable_get('site_commerce_imagecache_full', 'sc_full'),
          'image_path' => $value['uri'],
          'alt' => $value['alt'],
          'title' => $value['title'],
          'width' => $value['width'],
          'height' => $value['height'],
          'attributes' => array('class' => 'site-commerce-main-images'),
          'class' => array('site-commerce-images-page-colorbox'),
          'link' => TRUE,
          'gid' => 'site-commerce-images-page',
        );
        $output .= theme('kvantstudio_image', $variables);
      }

      $output .= '</div>';
    }
  }

  return $output;
}

/**
 * Определяет находиться ли позиция в корзине пользователя или нет.
 */
function site_commerce_position_in_cart($pid) {
  // Получаем идентификатор пользователя.
  $user_id = site_commerce_user_id();

  // Проверяем находится данная позиция в корзине.
  $cid = 0;
  if (is_numeric($user_id)) {
    $cid = db_query("SELECT n.cid FROM {site_commerce_cart} n WHERE n.oid = :order AND n.pid = :pid AND n.uid = :uid AND n.status > :status", array(':order' => 0, ':pid' => $pid, ':uid' => $user_id, ':status' => 0))->fetchField();
  }
  else {
    $cid = db_query("SELECT n.cid FROM {site_commerce_cart} n WHERE n.oid = :order AND n.pid = :pid AND n.sid = :sid AND n.status > :status", array(':order' => 0, ':pid' => $pid, ':sid' => $user_id, ':status' => 0))->fetchField();
  }

  return $cid;
}

/**
 * Форма действий.
 */
function site_commerce_position_index_actions_form($form, &$form_state, $pid, $rpid, $exist = FALSE) {
  $form = array();
  $form['#attributes'] = array('id' => 'site-commerce-position-index-actions-form-' . $rpid, 'class' => array('site-commerce-actions-form'));

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($rpid);

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );

  $form['rpid'] = array(
    '#type' => 'value',
    '#value' => $rpid,
  );

  $form['title'] = array(
    '#type' => 'item',
    '#markup' => $position->title,
  );

  $cost = theme('site_commerce_cost', array('position' => $position, 'is_card' => FALSE));
  if ($cost) {
    $form['cost'] = array(
      '#type' => 'item',
      '#markup' => t('Cost') . ': ' . $cost,
    );
  }

  $image = theme('site_commerce_images', array('pid' => $rpid, 'all' => FALSE, 'style_imagecache_first_image' => 'thumbnail'));
  if ($image) {
    $form['image'] = array(
      '#type' => 'item',
      '#markup' => $image,
    );
  }

  // Now we add our submit button, for submitting the form results.
  //
  // The 'actions' wrapper used here isn't strictly necessary for tabledrag,
  // but is included as a Form API recommended practice.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit_add'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#ajax' => array(
      'callback' => 'site_commerce_position_index_actions_form_ajax_callback',
      'effect' => 'fade',
      'progress' => array(
        'message' => NULL,
      ),
    ),
    '#access' => $exist ? FALSE : TRUE,
  );

  $form['actions']['submit_delete'] = array(
    '#type' => 'button',
    '#value' => t('Delete'),
    '#ajax' => array(
      'callback' => 'site_commerce_position_index_actions_form_ajax_callback',
      'effect' => 'fade',
      'progress' => array(
        'message' => NULL,
      ),
    ),
    '#access' => $exist ? TRUE : FALSE,
  );

  return $form;
}

/**
 * Ajax_callback функция регистрации связывание позиций.
 */
function site_commerce_position_index_actions_form_ajax_callback($form, $form_state) {
  // Получаем значения параметров из формы.
  $pid = (int) $form_state['values']['pid'];
  $rpid = (int) $form_state['values']['rpid'];

  site_commerce_position_index_update($pid, $rpid);

  $commands = array();
  // Обновляем перечень связанных позиций.
  $data = '<h2>' . t('The added products') . '</h2>' . site_commerce_position_index_load($pid);
  $commands[] = ajax_command_html("#site-commerce-position-index-exist", $data);

  // Прячем вспомогательный текст.
  $commands[] = ajax_command_invoke('#site-commerce-position-index-actions-form-' . $rpid, 'addClass', array('element-invisible'));

  // Обновляем виджет корзину.
  //$commands[] = ajax_command_html("div.site-commerce-block-cart", site_commerce_block_cart());

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Проверяет связанны ли две позиции позиций.
 */
function site_commerce_position_index_exist($pid, $rpid) {
  // Проверка переменных.
  if (!is_numeric($pid) OR !is_numeric($rpid)) {
    return FALSE;
  }
  // Проверяем находится данная позиция в привзяке.
  $exist = db_query("SELECT n.pid FROM {site_commerce_position_index} n WHERE n.pid = :pid AND n.rpid = :rpid", array(':pid' => $pid, ':rpid' => $rpid))->fetchField();
  return $exist;
}

/**
 * Перечень связанных позиций.
 */
function site_commerce_position_index_load($pid) {
  // Проверка переменных.
  if (!is_numeric($pid)) {
    return FALSE;
  }
  $output = '';

  // Проверяем находится данная позиция в привзяке.
  $result = db_query("SELECT * FROM {site_commerce_position_index} n WHERE n.pid = :pid", array(':pid' => $pid));
  if ($result) {
    foreach ($result as $record) {
      $form = drupal_get_form('site_commerce_position_index_actions_form', $pid, $record->rpid, TRUE);
      $output .= drupal_render($form);
    }
  }

  return $output;
}

/**
 * Регистрирует / удаляет связывание позиций.
 */
function site_commerce_position_index_update($pid, $rpid) {
  // Проверка переменных.
  if (!is_numeric($pid) OR !is_numeric($rpid)) {
    return FALSE;
  }
  // Проверяем находится данная позиция в привзяке.
  $exist = site_commerce_position_index_exist($pid, $rpid);
  if (!$exist) {
    db_insert('site_commerce_position_index')
    ->fields(array(
      'pid' => $pid,
      'rpid' => $rpid,
    ))
    ->execute();
  }
  else {
    db_delete('site_commerce_position_index')
      ->condition('pid', $pid)
      ->condition('rpid', $rpid)
      ->execute();
  }
}

/**
 * Темизация перечня связанных позиций.
 */
function theme_site_commerce_position_index_content($data) {
  $pid = $data['pid'];

  // Проверяем наличие связанных позиций.
  $exist = db_query("SELECT COUNT(*) FROM {site_commerce_position_index} n WHERE n.pid = :pid", array(':pid' => $pid))->fetchField();
  if (!$exist) {
    return FALSE;
  }

  $output = '';

  // Перечень привязанных позиций.
  $query = db_select('site_commerce_position_index', 'p');
  $query->join('site_commerce', 'n', 'n.pid = p.rpid');
  $query->addField('p', 'rpid');
  $query->addField('n', 'status');
  $query->condition('p.pid', $pid);
  $query->orderBy('n.title');
  $result = $query->execute();

  if ($result) {
    foreach ($result as $record) {
      // Проверяем разрешено ли отображать позицию при текущем статусе.
      if (!site_commerce_view_position_in_catalog($record->status)) {
        continue;
      }

      $pids[] = $record->rpid;
    }

    $text = variable_get('site_commerce_note_index_position', 'With this product you can buy');
    if ($text) {
      $output .= '<div class="site-commerce-note-index-position">' . $text . '</div>';
    }

    $output .= theme('site_commerce_term', array('pids' => $pids));
  }

  return $output;
}

/**
 * Форма действий.
 * $quantity_access - если TRUE разрешаем формировать поле для указания количества, чтобы разделять отображение поля в разных регионах.
 * Запрешаем отображение поля в блоке, в не зависимости от параметра в настройках модуля.
 * $is_card - если TRUE, то предполагается что форма отображается для позиции карточки товара.
 * $is_buy_1_click - если TRUE разрешаем отображение поля купить в один клик, чтобы разделять отображение поля в разных регионах.
 * $parametrs_visible - разрешает отображение параметров в форме.
 */
function site_commerce_actions_form($form, &$form_state, $pid, $quantity_access = TRUE, $is_card = FALSE, $is_buy_1_click = FALSE, $parametrs_visible = TRUE, $type = 'card') {

  // Определяет находиться ли позиция в корзине пользователя или нет.
  $cid = site_commerce_position_in_cart($pid);

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($pid);

  $form = array();

  // Предотвращаем индексирование формы.
  $form = array(
    '#prefix' => '<noindex><div class="site-commerce-actions">',
    '#suffix' => '</div></noindex>',
  );

  $form['#attributes'] = array(
    'id' => 'site-commerce-actions-form-' . $type . '-' . $pid,
    'class' => array('site-commerce-actions__form'),
    'enctype' => 'multipart/form-data',
  );

  // Скрытые параметры формы.
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );

  // Определяем css class если форма отображается в карточке товара.
  if ($is_card) {
    $class = 'site-commerce-actions__button_card';
  }
  else {
    $class = 'site-commerce-actions__button';
  }

  // Если позиция находится в корзине.
  if ($cid > 0) {
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('In a cart'),
      '#ajax' => array(
        'path' => 'site-commerce-actions-form-gotocart/nojs',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
      '#attributes' => array('class' => array($class, variable_get('site_commerce_cart_button_submit_css', 'btn btn-default'), 'use-ajax-submit')),
    );
  }
  else {
    if ($is_card) {
      $message = t('To buy') . ' ' . $position->title;
      $form['message'] = array(
        '#markup' => $message,
      );
    }
  }

  // Если позиция не находится в корзине.
  if (!$cid) {
    // Статусы, для которых разрешено добавлять в корзину.
    $allow_execute_statuses = variable_get('site_commerce_add_to_cart_allow_statuses', site_commerce_position_status());
    if (in_array($position->status, $allow_execute_statuses) && $position->type_sale < 5) {
      // Отображение поля указания количества.
      if ($quantity_access) {
        $form['site_commerce_quantity'] = array(
          '#title' => t('Quantity'),
          '#type' => 'numberfield',
          '#default_value' => '',
          '#maxlength' => 6,
          '#size' => 3,
          '#attributes' => array('min' => 1, 'max' => 1000, 'step' => 1, 'placeholder' => 1, 'cart_value' => 1, 'cid' => $position->pid),
          '#access' => variable_get('site_commerce_allow_quantity_cart', TRUE) && variable_get('site_commerce_allow_button_add_to_cart', TRUE),
        );
      }

      // Now we add our submit button, for submitting the form results.
      //
      // The 'actions' wrapper used here isn't strictly necessary for tabledrag,
      // but is included as a Form API recommended practice.
      $form['actions'] = array('#type' => 'actions');
      $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => variable_get('site_commerce_cart_title_button_add', 'Add to cart'),
        '#ajax' => array(
          'path' => 'site-commerce-actions-form',
          'progress' => array(
            'type' => 'none',
            'message' => NULL,
          ),
          'effect' => 'fade',
        ),
        '#attributes' => array('class' => array($class, variable_get('site_commerce_cart_button_submit_css', 'btn btn-default'), 'use-ajax-submit')),
        '#access' => variable_get('site_commerce_allow_button_add_to_cart', TRUE),
      );

      // Ссылка на функцию купить в один клик.
      if ($is_buy_1_click) {
        $text = '<span class="link-js">' . variable_get('site_commerce_buy_in_one_click_title', 'To buy in 1 click') . '</span>';
        $link = l($text, 'site-commerce-buy-in-one-click/' . $pid . '/nojs', array('html' => TRUE, 'attributes' => array(
          'class' => array('use-ajax', 'site-commerce-buy-1-click'),
          'title' => variable_get('site_commerce_buy_in_one_click_title', 'To buy in 1 click'),
        )));
        $form['actions']['by_in_one_click'] = array(
          '#markup' => $link,
          '#access' => variable_get('site_commerce_allow_buy_in_one_click', TRUE),
        );
      }

      // Вывод ajax параметров товара.
      // Разрешаем отображение выбора параметров:
      // 1. Параметр разрешен для текущей категории товара.
      // 2. Форма отображается для карточки товара.
      // 3. Товар не продается как набор товаров, $position->type_sale < 4. Тип 4 и 5 - это набор товаров.
      if ($parametrs_visible && $is_card && $position->type_sale < 4) {
        // Контейнер для доступных параметров.
        $form['site_commerce_parametrs'] = array(
          '#type' => 'container',
          '#attributes' => array('id' => 'site-commerce-parametrs-' . $pid, 'class' => array('site-commerce-parametrs', 'form-item', 'clearfix')),
        );

        // Категория к которой принадлежит позиция.
        $tid = db_query("SELECT n.tid FROM {site_commerce} n WHERE n.pid = :pid", array(':pid' => $pid))->fetchField();

        // Перечень доступных параметров.
        $query = db_select('site_commerce_parametrs', 'n');
        $query->fields('n');
        $result = $query->execute();

        // Определяем количество разрешенных параметров.
        // Требуется для корректного назначения класса для последнего элемента.
        $count_allow_parametrs = 0;
        foreach ($result as $row) {
          $parametr_allow = variable_get($row->machine_name . '_allow', FALSE);
          $parametr_allow_for_terms = variable_get($row->machine_name . '_allow_for_terms', array());
          if ($parametr_allow && in_array($tid, $parametr_allow_for_terms)) {
            $count_allow_parametrs++;
          }
        }

        $count = 1;
        $css_last_item = '';

        $result = $query->execute();
        foreach ($result as $row) {
          $parametr_allow = variable_get($row->machine_name . '_allow', FALSE);
          $parametr_allow_for_terms = variable_get($row->machine_name . '_allow_for_terms', array());
          if ($parametr_allow && in_array($tid, $parametr_allow_for_terms)) {
            $parametr_id = str_replace('_', '-', $row->machine_name);

            if ($count_allow_parametrs == $count) {
              $css_last_item = 'site-commerce-select-add-last';
            }

            $text = '<span class="link-js">' . t('Select') . ' ' . t($row->name) . '</span>';
            $link = l($text, 'site-commerce-select/' . $pid . '/' . $parametr_id . '/nojs', array('html' => TRUE, 'attributes' => array(
              'class' => array('use-ajax', 'site-commerce-select-add', $css_last_item),
              'title' => kvantstudio_string_correct(t($row->name)),
            )));
            $form['site_commerce_parametrs']['select_' . $row->machine_name] = array(
              '#markup' => $link,
            );
            $form['site_commerce_parametrs']['site-commerce-' . $parametr_id] = array(
              '#type' => 'hidden',
              '#default_value' => 0,
              '#attributes' => array('id' => 'site-commerce-' . $parametr_id . '-' . $pid),
            );
            $count++;
          }
        }

        $class_none_user_parametrs = 'element-invisible';
        $total_cost = 0;
        $user_parametrs = site_commerce_get_user_parametrs($pid);
        if ($user_parametrs) {
          $class_none_user_parametrs = '';
          // Итоговая стоимость.
          $cost_parametrs = site_commerce_get_cost_parametrs($pid);
          $total_cost = round($cost_parametrs, 2) + site_commerce_cost_value($pid);
        }

        // Блок отображения выбранных параметров.
        $form['site_commerce_selected_parametrs'] = array(
          '#type' => 'container',
          '#attributes' => array('id' => 'site-commerce-selected-parametrs-' . $pid, 'class' => array('site-commerce-selected-parametrs', $class_none_user_parametrs, 'form-item', 'clearfix')),
        );
        $form['site_commerce_selected_parametrs']['markup'] = array(
          '#theme_wrappers' => array('site_commerce_selected_parametrs'),
          '#parametrs' => $user_parametrs,
          '#pid' => $pid,
          '#title' => t('Product options'),
        );

        // Блок отображения итоговой стоимости.
        $form['site_commerce_total_cost'] = array(
          '#type' => 'container',
          '#attributes' => array('id' => 'site-commerce-total-cost-' . $pid, 'class' => array('site-commerce-total-cost', $class_none_user_parametrs, 'form-item', 'clearfix')),
        );
        $form['site_commerce_total_cost']['markup'] = array(
          '#theme' => 'site_commerce_total_cost',
          '#total_cost' => $total_cost,
          '#currency' => variable_get('site_commerce_default_currency'),
          '#pid' => $pid,
          '#title' => t('Final cost'),
        );
      }
    }
    else {
      if ($position->type_sale < 5) {
        $form['message-add-to-cart-not-allowed'] = array(
          '#markup' => '<div class="site-commerce-add-to-cart-not-allowed">' . t('Temporarily to order it is impossible') . '</div>',
        );
      }
    }
  }

  return $form;
}

/**
 * Ajax_callback функция регистрации позиции в корзине.
 */
function site_commerce_actions_form_ajax_callback() {
  // Получаем данные о форме и её состоянии.
  list($form, $form_state) = ajax_get_form();

  // Заставляем выполниться все действия формы, то есть
  // выполняем все validate и submit функции для этой формы.
  drupal_process_form($form['#form_id'], $form, $form_state);

  $commands = array();

  // Получаем значения параметров из формы.
  $pid = (int) $form_state['values']['pid'];

  if ($form_state['values']['add_position']) {
    // Обновляем виджет корзину.
    $commands[] = ajax_command_html("#block-site-commerce-cart .content", site_commerce_block_cart());

    // Обновляем форму с кнопкой.
    $form_cart = drupal_get_form('site_commerce_goto_cart_form', $pid, 'card');
    $form_cart = drupal_render($form_cart);
    $commands[] = ajax_command_html('#site-commerce-actions-form-card-' . $pid, $form_cart);

    $form_cart = drupal_get_form('site_commerce_goto_cart_form', $pid, 'block');
    $form_cart = drupal_render($form_cart);
    $commands[] = ajax_command_html('#site-commerce-actions-form-block-' . $pid, $form_cart);

    // Прячем вспомогательный текст.
    $commands[] = ajax_command_invoke('#site-commerce-text-to-by-' . $pid, 'addClass', array('element-invisible'));

    // Отображение всплывающего окна: продолжить покупки или оформить заказ.
    $form_goto_order = theme('site_commerce_add_to_cart_position', array('pid' => $pid));
    $commands[] = ajax_command_append('body', '<div class="element-hidden"><div id="site-commerce-goto-order-confirm-' . $pid . '"></div></div>');
    $commands[] = ajax_command_html('#site-commerce-goto-order-confirm-' . $pid, $form_goto_order);
    $commands[] = ajax_command_invoke('#site-commerce-goto-order-confirm-' . $pid, 'dialog', array(
      array('modal' => TRUE),
      //array('minWidth' => 300),
    ));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Валидация формы site_commerce_actions_form().
 */
function site_commerce_actions_form_validate($form, &$form_state) {}

/**
 * Отправка формы site_commerce_actions_form().
 */
function site_commerce_actions_form_submit($form, &$form_state) {
  $result = site_commerce_add_position($form_state);
  $form_state['values']['add_position'] = FALSE;
  if ($result) {
    $form_state['values']['add_position'] = TRUE;
  }
}

/**
 * Темизация формы добавления в корзину.
 */
function theme_site_commerce_actions_form($variables) {
  $form = $variables['form'];
  $output = '';

  if (isset($form['message'])) {
    $output .= '<div class="site-commerce-actions__message form-item">' . drupal_render($form['message']) . '</div>';
  }
  if (isset($form['actions']['submit'])) {
    if (isset($form['site_commerce_quantity']) && $form['site_commerce_quantity']['#access']) {
      $output .= drupal_render($form['site_commerce_quantity']);
    }
    if (isset($form['site_commerce_parametrs'])) {
      $output .= drupal_render($form['site_commerce_parametrs']);
    }
    if (isset($form['site_commerce_selected_parametrs'])) {
      $output .= drupal_render($form['site_commerce_selected_parametrs']);
    }
    if (isset($form['site_commerce_total_cost'])) {
      $output .= drupal_render($form['site_commerce_total_cost']);
    }
    $output .= '<div class="site-commerce-actions__submit form-item">' . drupal_render($form['actions']['submit']) . '</div>';
    $output .= '<div class="site-commerce-actions__click form-item">' . drupal_render($form['actions']['by_in_one_click']) . '</div>';
    unset($form['actions']);
  }
  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Форма перехода в корзину.
 */
function site_commerce_goto_cart_form($form, &$form_state, $pid, $type = 'card') {

  // Определяет находиться ли позиция в корзине пользователя или нет.
  $cid = site_commerce_position_in_cart($pid);

  // Предотвращаем индексирование формы.
  $form = array(
    '#prefix' => '<noindex>',
    '#suffix' => '</noindex>',
  );

  $form['#attributes'] = array('id' => 'site-commerce-actions-form-' . $pid, 'class' => array('site-commerce-actions-form'));

  $class = 'site-commerce-actions__button_' . $type;

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('In a cart'),
    '#ajax' => array(
      'path' => 'site-commerce-actions-form-gotocart/nojs',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
    '#attributes' => array('class' => array($class, variable_get('site_commerce_cart_button_submit_css', 'btn btn-default'), 'use-ajax-submit')),
  );

  return $form;
}

/**
 * Ajax_callback функция редирект в корзину.
 */
function site_commerce_actions_form_gotocart_ajax_callback($mode = NULL) {
  // Если у посетителя отключён javascript, то показываем ему сообщение.
  if ($mode != 'ajax') {
    drupal_set_message(t('Turn javascript in you browser.'));
    drupal_goto('cart');
  }

  ctools_include('ajax');

  $commands = array();
  $commands[] = ctools_ajax_command_redirect('cart');

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Форма действий администратора.
 */
function site_commerce_admin_actions_form($form, &$form_state, $pid) {
  $form = array();
  $form['#access'] = TRUE;
  $form['#attributes'] = array('id' => 'site-commerce-admin-actions-form-' . $pid, 'class' => array('site-commerce-admin-actions-form'));

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($pid);

  $form['message'] = array(
    '#type' => 'item',
    '#prefix' => '<div id="site-commerce-admin-actions-form-messages-' . $pid . '">',
    '#suffix' => '</div>',
  );

  if (count(site_commerce_types_special_offers()) > 1) {
    if (isset($position->field_special_offer_tid)) {
      $tid = $position->special_offer['tid'];
    }
    else {
      $tid = "";
    }
    $form['type_special_offer-' . $pid] = array(
      '#type' => 'select',
      '#title' => t('Special offer'),
      '#options' => site_commerce_types_special_offers(),
      '#default_value' => $tid,
      '#ajax' => array(
        'callback' => 'site_commerce_admin_actions_form_type_special_offer_ajax_callback',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
    );

    $query = db_select('field_data_field_special_offer', 'n');
    $query->fields('n', array('view_block'));
    $query->condition('n.entity_id', $pid);
    $view_in_block = $query->execute()->fetchField();

    $form['view_in_block_special_offer-' . $pid] = array(
      '#type' => 'select',
      '#title' => t('View in block «Special offer»'),
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      '#default_value' => $view_in_block,
      '#ajax' => array(
        'callback' => 'site_commerce_admin_actions_form_view_in_block_special_offer_ajax_callback',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
      '#states' => array(
        'invisible' => array(
          array(
            array(':input[name=type_special_offer-' . $pid . ']' => array('value' => 0)),
          ),
        ),
      ),
    );
  }

  $form['status-' . $pid] = array(
    '#type' => 'select',
    '#title' => t('Status position in stock'),
    '#options' => site_commerce_position_status(),
    '#default_value' => $position->status,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_status_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
  );

  $form['type_sale-' . $pid] = array(
    '#type' => 'select',
    '#title' => t('Type of sale'),
    '#options' => site_commerce_types_sale(),
    '#default_value' => $position->type_sale,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_type_sale_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
  );

  $package = site_commerce_get_pid_package($position->pid);
  $form['package-' . $pid] = array(
    '#type' => 'select',
    '#title' => l(t('Package of goods'), 'site-commerce/' . $package),
    '#options' => site_commerce_get_packages(),
    '#default_value' => $package,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_package_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
    '#states' => array(
      'visible' => array(
        array(
          array(':input[name=type_sale-' . $pid . ']' => array('value' => 2)),
          array(':input[name=type_sale-' . $pid . ']' => array('value' => 3)),
        ),
      ),
    ),
  );

  // Поставщик товаров.
  $term = $position->field_site_commerce_contractor;
  if (is_object($term)) {
    $form['contractor-' . $pid] = array(
      '#type' => 'select',
      '#title' => t('Contractor'),
      '#options' => kvantstudio_select_terms($term->vid, FALSE),
      '#default_value' => $term->tid,
      '#ajax' => array(
        'callback' => 'site_commerce_admin_actions_form_contractor_ajax_callback',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
    );
  }

  // Категория товаров.
  $term = taxonomy_term_load($position->tid);
  if (is_object($term)) {
    $form['category-' . $pid] = array(
      '#type' => 'select',
      '#title' => t('Category'),
      '#options' => kvantstudio_select_terms($term->vid, FALSE),
      '#default_value' => $position->tid,
      '#ajax' => array(
        'callback' => 'site_commerce_admin_actions_form_category_ajax_callback',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
    );
  }

  // Включаем поле с перечнем тегов по категории.
  // Поле пока доступно только для типа товаров автозапчасть.
  if ($position->type == 'site_commerce_auto') {
    $tags = kvantstudio_field_value('taxonomy_term', $term, 'field_site_commerce_tags', 0);
    $form['tags-' . $pid] = array(
      '#title' => t('Tags'),
      '#type' => 'textarea',
      '#description' => l(t('Update the categories of positions'), 'admin/content/site-commerce/taxonomy-autospare-parts'),
      '#default_value' => $tags,
      '#ajax' => array(
        'callback' => 'site_commerce_admin_actions_form_taxonomy_term_tags_ajax_callback',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
    );
  }

  // Поле минимальное количество для заказа.
  if (isset($position->field_site_commerce_min_quantity)) {
    $default_value_min_quantity = $position->field_site_commerce_min_quantity;
  }
  else {
    $default_value_min_quantity = '1';
  }
  $form['min-quantity-' . $pid] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity for the order in package'),
    '#default_value' => $default_value_min_quantity,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_quantity_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
    '#states' => array(
      'visible' => array(
        array(
          array(':input[name=type_sale-' . $pid . ']' => array('value' => 2)),
          array(':input[name=type_sale-' . $pid . ']' => array('value' => 3)),
        ),
      ),
    ),
  );

  // Поле для вывода минимальной стоимости.
  if (isset($position->field_site_commerce_cost_min)) {
    $default_value_cost_min = $position->field_site_commerce_cost_min;
  }
  else {
    $default_value_cost_min = '0.00';
  }
  if (isset($position->field_site_commerce_cost_min)) {
    $form['cost_min-' . $pid] = array(
      '#type' => 'textfield',
      '#title' => t('The minimal cost'),
      '#default_value' => $default_value_cost_min,
      '#ajax' => array(
        'callback' => 'site_commerce_admin_actions_form_cost_ajax_callback',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
    );
  }

  // Поле для вывода предыдущей стоимости.
  if (count(site_commerce_types_special_offers()) > 1) {
    if (isset($position->field_site_commerce_cost_old)) {
      $default_value_cost_old = $position->field_site_commerce_cost_old;
    }
    else {
      $default_value_cost_old = '0.00';
    }
    $form['cost_old-' . $pid] = array(
      '#type' => 'textfield',
      '#title' => t('Old cost'),
      '#default_value' => $default_value_cost_old,
      '#ajax' => array(
        'callback' => 'site_commerce_admin_actions_form_cost_ajax_callback',
        'progress' => array(
          'type' => 'none',
          'message' => NULL,
        ),
        'effect' => 'fade',
      ),
    );
  }

  $form['cost-' . $pid] = array(
    '#type' => 'textfield',
    '#title' => t('Cost'),
    '#default_value' => $position->field_site_commerce_cost,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_cost_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
  );

  $form['cost-set-' . $pid] = array(
    '#title' => t('Display the value of the set of goods'),
    '#type' => 'checkbox',
    '#default_value' => $position->cost_set,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_cost_set_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
    '#states' => array(
      'visible' => array(
        array(
          array(':input[name=type_sale-' . $pid . ']' => array('value' => 4)),
          array(':input[name=type_sale-' . $pid . ']' => array('value' => 5)),
        ),
      ),
    ),
  );

  $form['sticky-' . $pid] = array(
    '#title' => t('Novelty'),
    '#type' => 'checkbox',
    '#default_value' => $position->sticky,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_sticky_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
  );

  $form['disabled-' . $pid] = array(
    '#title' => t('Do not display on the site'),
    '#type' => 'checkbox',
    '#default_value' => $position->disabled,
    '#ajax' => array(
      'callback' => 'site_commerce_admin_actions_form_disabled_ajax_callback',
      'progress' => array(
        'type' => 'none',
        'message' => NULL,
      ),
      'effect' => 'fade',
    ),
  );

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );

  if (isset($position->field_site_commerce_category->alias)) {
    $destination = $position->field_site_commerce_category->alias;
  }
  else {
    $destination = 'site-commerce/' . $pid;
  }

  $form['admin_links'] = array(
    '#type' => 'item',
    '#title' => l(t('edit'), 'admin/content/site-commerce/' . $pid . '/edit', array('query' => array('destination'=>$destination))) . ' | ' . l(t('add'), 'admin/content/site-commerce/position-index/' . $pid) . ' | ' . l(t('delete'), 'admin/content/site-commerce/' . $pid . '/delete', array('query'=>array('destination'=>'taxonomy/term/' . $position->tid))),
    '#prefix' => '<div class="site-commerce-admin-links">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Ajax_callback функция изменение типа продажи позиции.
 */
function site_commerce_admin_actions_form_type_sale_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $type_sale = (int) $form_state['values']['type_sale-' . $pid];

  site_commerce_update_position($pid, $type_sale, 'type_sale');

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("The type of sale is changed") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение комплекта позиции.
 */
function site_commerce_admin_actions_form_package_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $package_pid = (int) $form_state['values']['package-' . $pid];

  // Обновление комплекта позиции.
  site_commerce_update_package($pid, $package_pid);

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("The package of goods is changed") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение типа продажи позиции.
 */
function site_commerce_admin_actions_form_view_in_block_special_offer_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $value = (int) $form_state['values']['view_in_block_special_offer-' . $pid];

  $result = db_update('field_data_field_special_offer')
  ->fields(array('view_block' => $value))
  ->condition('entity_id', $pid)
  ->execute();

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("Displays in the block is changed") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Обновление комплекта позиции.
 */
function site_commerce_update_package($pid, $package_pid = 0) {
  // Текущий комплект - удаление привязки.
  $package_pid_old = site_commerce_get_pid_package($pid);
  if ($package_pid_old) {
    db_delete('site_commerce_position_index')
    ->condition('rpid', $pid)
    ->condition('pid', $package_pid_old)
    ->execute();
  }

  // Регистрация новой привязки, к новому комплекту.
  if ($package_pid) {
    db_insert('site_commerce_position_index')
    ->fields(array('pid' => $package_pid, 'rpid' => $pid))
    ->execute();
  }
}

/**
 * Ajax_callback функция изменение статуса позиции на складе.
 */
function site_commerce_admin_actions_form_status_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $status = (int) $form_state['values']['status-' . $pid];

  site_commerce_update_position($pid, $status, 'status');

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $status_text = site_commerce_position_status();

  $commands = array();
  $message = '<div id="site-commerce-status-id-' . $pid . '" class="site-commerce-status site-commerce-status-' . $status . '">' . $status_text[$status] . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-status-id-' . $pid, $message);

  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("The status is changed") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение статуса новизны позиции.
 */
function site_commerce_admin_actions_form_sticky_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $sticky = (int) $form_state['values']['sticky-' . $pid];

  site_commerce_update_position($pid, $sticky, 'sticky');

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  if ($sticky) {
    $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t('Novelty') . '</div>';
    $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);
  }
  else {
    $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t('Not novelty') . '</div>';
    $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение поставщика позиции.
 */
function site_commerce_admin_actions_form_contractor_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $category = (int) $form_state['values']['contractor-' . $pid];

  // Проверка переменных.
  if (!is_numeric($pid)) {
    return FALSE;
  }
  $site_commerce = site_commerce_load($pid);

  // Загружаем базовый тип.
  $type = site_commerce_type_get_type($site_commerce->type);
  $field_name = 'field_contractor_' . $type->contractors_vocabulary;
  $site_commerce->$field_name = array(
    LANGUAGE_NONE => array(
      '0' => array(
        'tid' => $category,
      ),
    ),
  );

  // Выполняем изменения.
  site_commerce_save($site_commerce);

  // Очищаем кэш.
  cache_clear_all('site_commerce_contractor_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("The contractor is changed") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение категории позиции.
 */
function site_commerce_admin_actions_form_category_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $category = (int) $form_state['values']['category-' . $pid];

  // Проверка переменных.
  if (!is_numeric($pid)) {
    return FALSE;
  }
  $site_commerce = site_commerce_load($pid);

  // Загружаем базовый тип.
  $type = site_commerce_type_get_type($site_commerce->type);
  $field_name = 'field_category_' . $type->categories_vocabulary;
  $site_commerce->$field_name = array(
    LANGUAGE_NONE => array(
      '0' => array(
        'tid' => $category,
      ),
    ),
  );

  // Выполняем изменения.
  site_commerce_save($site_commerce);

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("The category is changed") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение тегов категории позиции.
 */
function site_commerce_admin_actions_form_taxonomy_term_tags_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $tid = (int) $form_state['values']['category-' . $pid];
  $tags = $form_state['values']['tags-' . $pid];

  // Проверка переменных.
  if (!is_numeric($pid)) {
    return FALSE;
  }

  $term = taxonomy_term_load($tid);

  $field_name = 'field_site_commerce_tags';
  $term->$field_name = array(
    LANGUAGE_NONE => array(
      '0' => array(
        'value' => $tags,
      ),
    ),
  );

  // Выполняем изменения.
  taxonomy_term_save($term);

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("The tags of category is changed") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение минимального количества продажи позиции в комплекте.
 */
function site_commerce_admin_actions_form_quantity_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  if (isset($form_state['values']['min-quantity-' . $pid])) {
    $min_quantity = (int) $form_state['values']['min-quantity-' . $pid];
  }
  else {
    $min_quantity = 1;
  }

  $commands = array();

  // Проверка переменных.
  if (!is_numeric($pid)) {
    return FALSE;
  }
  $site_commerce = site_commerce_load($pid);

  $site_commerce->field_site_commerce_min_quantity[LANGUAGE_NONE][0]['value'] = $min_quantity;

  // Выполняем изменения.
  site_commerce_save($site_commerce);

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("The quantity for the order in the complete set is updated") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение стоимости позиции.
 */
function site_commerce_admin_actions_form_cost_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  if (isset($form_state['values']['cost_min-' . $pid])) {
    $cost_min = round($form_state['values']['cost_min-' . $pid], 2);
  }
  else {
    $cost_min = 0;
  }
  if (isset($form_state['values']['cost_old-' . $pid])) {
    $cost_old = round($form_state['values']['cost_old-' . $pid], 2);
  }
  else {
    $cost_old = 0;
  }

  $cost = round($form_state['values']['cost-' . $pid], 2);

  $commands = array();

  // Проверяем правильность заполнения предыдущей стоимости.
  if ($cost_min == 0 && $cost_old > 0) {
    if ($cost_old < $cost || $cost_old == $cost) {
      $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-error-messages">' . t("The previous cost not maybe is less than cost of the goods.") . '</div>';
      $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);
      return array('#type' => 'ajax', '#commands' => $commands);
    }
  }

  // Проверка переменных.
  if (!is_numeric($pid)) {
    return FALSE;
  }
  $site_commerce = site_commerce_load($pid);

  $site_commerce->field_site_commerce_cost_min[LANGUAGE_NONE][0]['value'] = $cost_min;
  $site_commerce->field_site_commerce_cost_old[LANGUAGE_NONE][0]['value'] = $cost_old;
  $site_commerce->field_site_commerce_cost[LANGUAGE_NONE][0]['value'] = $cost;

  // Выполняем изменения.
  site_commerce_save($site_commerce);

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t("Cost is updated") . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение алгоритма подсчета стоимости позиции если она состоит из набора товаров.
 */
function site_commerce_admin_actions_form_cost_set_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $cost_set = (int) $form_state['values']['cost-set-' . $pid];

  site_commerce_update_position($pid, $cost_set, 'cost_set');

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  if ($cost_set) {
    $text = t('The cost of the goods will be calculated as the sum of the value of goods, of which it is composed');
  }
  else {
    $text = t('Cost of the goods will be equal to the basic cost');
  }

  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . $text . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение статуса публикации позиции.
 */
function site_commerce_admin_actions_form_disabled_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $disabled = (int) $form_state['values']['disabled-' . $pid];

  site_commerce_update_position($pid, $disabled, 'disabled');

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  $commands = array();
  if ($disabled) {
    $commands[] = ajax_command_invoke('#site-commerce-item-' . $pid, 'removeClass', array('site-commerce-item-published'));
    $commands[] = ajax_command_invoke('#site-commerce-item-' . $pid, 'addClass', array('site-commerce-item-not-published'));

    $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t('Not published') . '</div>';
    $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);
  }
  else {
    $commands[] = ajax_command_invoke('#site-commerce-item-' . $pid, 'removeClass', array('site-commerce-item-not-published'));
    $commands[] = ajax_command_invoke('#site-commerce-item-' . $pid, 'addClass', array('site-commerce-item-published'));

    $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . t('Published') . '</div>';
    $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax_callback функция изменение типа распродажи.
 */
function site_commerce_admin_actions_form_type_special_offer_ajax_callback($form, $form_state) {
  $pid = (int) $form_state['values']['pid'];
  $tid = (int) $form_state['values']['type_special_offer-' . $pid];

  $site_commerce = new stdClass();
  $site_commerce = site_commerce_load($pid);
  if ($tid) {
    $site_commerce->field_special_offer[$site_commerce->language][0]['tid'] = $tid;
  }
  else {
    $site_commerce->field_special_offer = array();
  }
  site_commerce_save($site_commerce);

  // Очищаем кэш.
  cache_clear_all('site_commerce_category_pid:' . $pid, 'cache_site_commerce');

  if ($tid) {
    $message = t("The products is added in a special offer");
  }
  else {
    $message = t("The products is removed from special offers");
  }

  $commands = array();
  $message = '<div id="site-commerce-admin-actions-form-messages-' . $pid . '" class="site-commerce-admin-actions-form-messages">' . $message . '</div>';
  $commands[] = ajax_command_replace('#site-commerce-admin-actions-form-messages-' . $pid, $message);

  return array('#type' => 'ajax', '#commands' => $commands);
}

///**
// * Ajax_callback функция отображения кнопок формы изменения статуса позиции в корзине.
// */
//function site_commerce_cart_select_form_ajax_callback($form, $form_state) {
//  // Переменная выделения обьектов на форме.
//  // FALSE - выделений нет.
//  $select = FALSE;
//  foreach ($form_state['values']['site_commerce_cart']['data'] as $key) {
//    if ($key['select']) {
//      $select = TRUE;
//    }
//  }
//
//  $status = $form_state['complete form']['#attributes']['status'];
//
//  if ($select) {
//    $commands[] = ajax_command_invoke('#site-commerce-cart-submit-postpone-' . $status, 'removeClass', array('element-hidden'));
//    $commands[] = ajax_command_invoke('#site-commerce-cart-submit-delete-' . $status, 'removeClass', array('element-hidden'));
//    $commands[] = ajax_command_invoke('.site-commerce-cart-button-actions', 'addClass', array('site-commerce-cart-button-actions-color'));
//  }
//  else {
//    $commands[] = ajax_command_invoke('#site-commerce-cart-submit-postpone-' . $status, 'addClass', array('element-hidden'));
//    $commands[] = ajax_command_invoke('#site-commerce-cart-submit-delete-' . $status, 'addClass', array('element-hidden'));
//    $commands[] = ajax_command_invoke('.site-commerce-cart-button-actions', 'removeClass', array('site-commerce-cart-button-actions-color'));
//  }
//
//  return array('#type' => 'ajax', '#commands' => $commands);
//}

/**
 * Добавляет права доступа на просмотр опубликованных товаров
 * какого либо типа.
 *
 * @return
 *   True if current user is granted access, FALSE otherwise.
 */
function site_commerce_view_access($site_commerce = NULL) {
  // Разрешаем администратору полный доступ на просмотр.
  if (user_access('administer site commerce products')) {
    return TRUE;
  }

  // Выполняем проверку для обычных пользователей.
  $types = site_commerce_type_get_types();
  foreach ($types as $type) {
    if (is_object($site_commerce)) {
      if (site_commerce_access('view', $type->type) && !$site_commerce->disabled) {
        return TRUE;
      }
    }
    else {
      if (site_commerce_access('view', $type->type)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Добавляет права доступа на просмотр опубликованных товаров
 * какого либо типа.
 *
 * @return
 *   True if current user is granted access, FALSE otherwise.
 */
function site_commerce_edit_access() {
  $types = site_commerce_type_get_types();
  foreach ($types as $type) {
    $role_name = "edit any $type->type products";
    if (user_access($role_name)) {
      return TRUE;
    }
    $role_name = "edit own $type->type products";
    if (user_access($role_name)) {
      return TRUE;
    }
  }
  if (user_access('administer site commerce products')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Function add access for site commerce types.
 *
 * @return
 *   True if current user is granted access, FALSE otherwise.
 */
function site_commerce_create_access() {
  $types = site_commerce_type_get_types();
  foreach ($types as $type) {
    if (site_commerce_access('create', $type->type)) {
      return TRUE;
    }
  }
  if (user_access('administer site commerce products')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Determine whether the current user may perform the given operation on the
 * specified product.
 *
 * @param $op
 *   The operation to be performed on the product. Possible values are:
 *   - "view"
 *   - "update"
 *   - "delete"
 *   - "create"
 * @param $site_commerce
 *   The product object on which the operation is to be performed, or product type
 *   (e.g. 'site_commerce_basic') for "create" operation.
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 * @return
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function site_commerce_access($op, $site_commerce, $account = NULL) {
  if (!$site_commerce || !in_array($op, array('view', 'create', 'edit', 'delete'), TRUE)) {
    // Если обьект $site_commerce не передан и параметр $op не соответствует
    // разрешенному значению.
    return FALSE;
  }
  // Если не задан объект пользователя, то выбираем текущего пользователя.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  // $site_commerce может быть объектом или типом продукта.
  $type = is_object($site_commerce) ? $site_commerce->type : $site_commerce;
  $uid = is_object($site_commerce) ? $site_commerce->uid : 0;

  switch ($op) {
    case 'view':
      $role_name = "view $type products";
      if (user_access($role_name, $account)) {
        return TRUE;
      }
      break;
    case 'create':
      $role_name = "create $type products";
      if (user_access($role_name, $account)) {
        return TRUE;
      }
      break;
    case 'edit':
      $role_name = "edit any $type products";
      if (user_access($role_name, $account)) {
        return TRUE;
      }
      $role_name = "edit own $type products";
      if (user_access($role_name, $account) && $account->uid === $uid) {
        return TRUE;
      }
      break;
    case 'delete':
      $role_name = "delete any $type products";
      if (user_access($role_name, $account)) {
        return TRUE;
      }
      $role_name = "delete own $type products";
      if (user_access($role_name, $account) && $account->uid === $uid) {
        return TRUE;
      }
      break;
  }

  return FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function site_commerce_admin_paths() {
  $paths = array(
    'site-commerce/add'      => TRUE,
    'site-commerce/add/*'    => TRUE,
    'site-commerce/*/edit'   => TRUE,
    'site-commerce/*/delete' => TRUE,
  );
  return $paths;
}

/**
 * Убирает незначащий ноль из стоимости.
 * (int) cost - стоимость.
 */
function site_commerce_cost_format($cost) {
  $output = trim($cost, ' 0');
  $output = rtrim($output, '.');
  $output = str_replace(' ', '', $output);
  if (empty($output)) {
    $output = 0;
  }
  return $output;
}

/**
 * Вычисление количества категории и вывод сообщения о том, что они не созданы или количество категорий.
 */
function site_commerce_count_categories($view_info_text = FALSE) {
  $query = db_select('site_commerce_type', 'n');
  $query->fields('n', array('categories_vocabulary'));
  $query->condition('n.status', 1);
  $result = $query->execute();

  (int) $count = 0;

  foreach ($result as $row) {
    $terms = taxonomy_get_tree($row->categories_vocabulary);
    if(count($terms)) {
      $count++;
    }
  }
  if (!$count && $view_info_text) {
    return t('Categories are not created') .', ' . l(t('create now'), 'admin/structure/taxonomy/site_commerce_categories') . '.';
  }
  return $count;
}

/**
 * Вычисление количества позиций в зависимости от категории и статусов.
 * @tid - идентификатор категории.
 * @status - массив статусов или номер статуса из site_commerce_position_status().
 * @disabled - параметр видимости позиций для пользователей: 0 - учитывать включенные позиции, 1 - если нужно учитывать отключеные позиции, % - учитывать все.
 * @children - параметр учета при подсчете количество позиций в дочерних категориях. По умолчанию FALSE.
 * @$type_sale - если TRUE, не будут учитываться скрытые из каталога товары в поштучной продаже.
 */
function site_commerce_count_positions($tid, $status, $disabled = 0, $children = FALSE, $type_sale = FALSE) {
  $count = 0;

  $query = db_select('site_commerce', 'n');
  $query->fields('n', array('pid'));
  $query->condition('n.tid', $tid);
  if ($type_sale) {
    $query->condition('n.type_sale', 3, '<>');
  }
  if (is_array($status)) {
    $query->condition('n.status', $status, 'IN');
  }
  if (is_numeric($status)) {
    $query->condition('n.status', $status);
  }
  $query->condition('n.disabled', $disabled);
  $count = $query->execute()->rowCount();

  if ($children) {
    $count = $count + site_commerce_count_children_positions($tid, $status, $disabled, $type_sale);
  }

  return $count;
}

/**
 * Вычисление общего количества позиций в дочерних категориях в зависимости от статусов.
 * @tid - идентификатор категории.
 * @status - статус позиции из site_commerce_position_status().
 * @disabled - параметр видимости позиций для пользователей: 0 - учитывать включенные позиции, 1 - если нужно учитывать отключеные позиции, % - учитывать все.
 */
function site_commerce_count_children_positions($tid, $status = 10, $disabled = 0, $type_sale = FALSE) {
  $count = 0;

  $count_children = db_query("SELECT n.tid FROM {taxonomy_term_hierarchy} n WHERE n.parent = :parent", array(':parent' => $tid))->fetchField();

  if ($count_children) {
    $result = kvantstudio_taxonomy_get_children_all($tid);
    foreach ($result as $key) {
      $query = db_select('site_commerce_taxonomy_index', 'n');
      $query->fields('n', array('pid'));
      $query->join('site_commerce', 's', 's.pid = n.pid');
      $query->condition('n.tid', $key->tid);
      if ($type_sale) {
        $query->condition('s.type_sale', 3, '<>');
      }
      if (is_array($status)) {
        $query->condition('s.status', $status, 'IN');
      }
      if (is_numeric($status)) {
        $query->condition('s.status', $status);
      }
      $query->condition('s.disabled', $disabled);
      $count = $count + $query->execute()->rowCount();
    }
  }
  return $count;
}

/**
 * Menu callback; Редирект на страницу каталога или вывод сообщения о том, что еще не создано позиций.
 */
function site_commerce_page_default() {
  $select = db_select('site_commerce', 'n')->fields('n', array('pid'))->addTag('site_commerce_access');
  $pids = $select->execute()->fetchCol();

  if (!empty($pids)) {
    drupal_goto(variable_get('site_commerce_catalog_link', 'tovary'));
  }
  else {
    $default_message = '<p>' . t('Sorry, our online store to be in development. Come later.') . '</p>';

    $default_links = array();
    if (site_commerce_create_access()) {
      $default_links[] = l(t('To add a position'), 'admin/content/site-commerce/add');
    }
    if (!empty($default_links)) {
      $default_message .= theme('item_list', array('items' => $default_links));
    }

    $build['default_message'] = array(
      '#markup' => $default_message,
      '#prefix' => '<div id="first-time">',
      '#suffix' => '</div>',
    );
  }
  return $build;
}

/**
 * Implements hook_permission().
 */
function site_commerce_permission() {
  $perms = array(
    'administer site commerce' => array(
      'title' => t('Administer adjustments'),
      'restrict access' => TRUE,
    ),
    'administer site commerce products' => array(
      'title' => t('Management of the products'),
      'restrict access' => TRUE,
    ),
    'administer site commerce types' => array(
      'title' => t('Management of types of the products'),
      'restrict access' => TRUE,
    ),
    'access search requests site commerce' => array(
      'title' => t('Viewing of results of search requests'),
      'restrict access' => FALSE,
    ),
  );

  // Generate standard site commerce permissions for all applicable node types.
  foreach (site_commerce_type_get_types() as $type) {
    $perms += site_commerce_list_permissions($type);
  }

  return $perms;
}

/**
 * Helper function to generate standard products permission list for a given type.
 *
 * @param $type
 *   The machine-readable name of the product type.
 * @return array
 *   An array of permission names and descriptions.
 */
function site_commerce_list_permissions($type) {
  //$info = site_commerce_type_get_type($type);
  $perms = array();
  // Build standard list of node permissions for this type.
  $perms = array(
    "view $type->type products" => array(
      'title' => t('%type_name: view products', array('%type_name' => $type->name)),
    ),
    "create $type->type products" => array(
      'title' => t('%type_name: create new products', array('%type_name' => $type->name)),
    ),
    "edit own $type->type products" => array(
      'title' => t('%type_name: edit own products', array('%type_name' => $type->name)),
    ),
    "edit any $type->type products" => array(
      'title' => t('%type_name: edit any products', array('%type_name' => $type->name)),
    ),
    "delete own $type->type products" => array(
      'title' => t('%type_name: delete own products', array('%type_name' => $type->name)),
    ),
    "delete any $type->type products" => array(
      'title' => t('%type_name: delete any products', array('%type_name' => $type->name)),
    ),
  );
  return $perms;
}

/**
 * Set default role permissions.
 */
function site_commerce_default_role_permissions() {
  // Назначаем права доступа к модулю. Которые должны быть выставлены по умолчанию.
  foreach (site_commerce_type_get_types() as $type) {
    $permissions = array("view $type->type products", "access search requests site commerce");
    user_role_grant_permissions(1, $permissions);
    $permissions = array(
      "access search requests site commerce",
      "view $type->type products",
      "edit own $type->type products",
      "delete own $type->type products"
    );
    user_role_grant_permissions(2, $permissions);
  }
}

/**
 * Title callback for a site commerce type.
 */
function site_commerce_type_page_title($type) {
  return $type->name;
}

/**
 * Sets the default values for a site commerce type.
 *
 * @param $info
 *   An object or array containing values to override the defaults.
 *
 * @return
 *   A site commerce type object, with missing values in $info set to their defaults.
 */
function site_commerce_type_set_defaults($info = array()) {
  // Загружаем базовый тип и изменяем его структуру,
  // если не указан тип товара.
  if (isset($info->type)) {
    return $info;
  }
  else {
    $type = site_commerce_type_get_type('site_commerce_basic');
    $type->type = "";
    $type->name = "";
    $type->description = "";
    $type->path = "";
  }
  return $type;
}

/**
 * Menu argument loader: loads a site commerce type by string.
 *
 * @param $name
 *   The machine-readable name of a site commerce type to load, where '_' is replaced
 *   with '-'.
 *
 * @return
 *   A site commerce type object or FALSE if $name does not exist.
 */
function site_commerce_type_load($name) {
  return site_commerce_type_get_type(strtr($name, array('-' => '_')));
}

/**
 * Saves a site_commerce type to the database.
 *
 * @param $info
 *   The site_commerce type to save, as an object.
 *
 * @return
 *   Status flag indicating outcome of the operation.
 */
function site_commerce_type_save($info) {
  $existing_type = !empty($info->old_type) ? $info->old_type : $info->type;
  $is_existing = (bool) db_query_range('SELECT 1 FROM {site_commerce_type} WHERE type = :type', 0, 1, array(':type' => $existing_type))->fetchField();

  $type = site_commerce_type_set_defaults($info);

  $fields = array(
    'type' => (string) $type->type,
    'name' => (string) $type->name,
    'description' => (string) $type->description,
    'module' => (string) $type->module,
    'path' => (string) $type->path,
    'status' => (int) $type->status,
    'status_term_alias_delete' => (int) $type->status_term_alias_delete,
    'categories_vocabulary' => (int) $type->categories_vocabulary,
    'contractors_vocabulary' => (int) $type->contractors_vocabulary,
    'manufactures_vocabulary' => (int) $type->manufactures_vocabulary,
    'countries_vocabulary' => (int) $type->countries_vocabulary,
  );

  if ($is_existing) {
    db_update('site_commerce_type')
      ->fields($fields)
      ->condition('type', $existing_type)
      ->execute();

    if (!empty($type->old_type) && $type->old_type != $type->type) {
      field_attach_rename_bundle('site_commerce', $type->old_type, $type->type);
    }

    $status = SAVED_UPDATED;
  }
  else {
    db_insert('site_commerce_type')
      ->fields($fields)
      ->execute();

    field_attach_create_bundle('site_commerce', $type->type);
    $status = SAVED_NEW;
  }

  // Clear the site_commerce type cache.
  site_commerce_type_cache_reset();

  return $status;
}

/**
 * Deletes a site commerce type from the database.
 *
 * @param $type
 *   The machine-readable name of the site commerce type to be deleted.
 */
function site_commerce_type_delete($type) {
  $info = site_commerce_type_get_type($type);
  db_delete('site_commerce_type')
    ->condition('type', $type)
    ->execute();
  field_attach_delete_bundle('site_commerce', $type);
  module_invoke_all('site_commerce_type_delete', $info);

  // Clear the node type cache.
  site_commerce_type_cache_reset();
}

/**
 * Add default body field to a site commerce type.
 *
 * @param $type
 *   A site commerce type object.
 * @param $label
 *   The label for the body instance.
 *
 * @return
 *   Body field instance.
 */
function site_commerce_add_body_field($type, $label = 'Body') {
  // Add or remove the body field, as needed.
  $field = field_info_field('field_site_commerce_body');
  if (empty($field)) {
    $field = array(
      'field_name' => 'field_site_commerce_body',
      'type' => 'text_with_summary',
      'entity_types' => array('site_commerce'),
    );
    $field = field_create_field($field);
  }

  $instance = field_info_instance('site_commerce', 'field_site_commerce_body', $type->type);
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'field_site_commerce_body',
      'entity_type' => 'site_commerce',
      'bundle' => $type->type,
      'label' => $label,
      'widget' => array('type' => 'text_textarea_with_summary'),
      'settings' => array('display_summary' => TRUE),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary_or_trimmed',
        ),
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
 * Clears the site commerce type cache.
 */
function site_commerce_type_cache_reset() {
  cache_clear_all('site_commerce_types:', 'cache', TRUE);
  drupal_static_reset('_site_commerce_types_build');
}

/**
 * Returns the product type name of the passed product or product type string.
 *
 * @param $site_commerce
 *   A product object or string that indicates the product type to return.
 *
 * @return
 *   The product type name or FALSE if the product type is not found.
 */
function site_commerce_type_get_name($site_commerce) {
  $type = is_object($site_commerce) ? $site_commerce->type : $site_commerce;
  $types = _site_commerce_types_build()->names;
  return isset($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Returns a list of available site commerce type names.
 *
 * This list can include types that are queued for addition or deletion.
 * See _node_types_build() for details.
 *
 * @return
 *   An array of site commerce type names, keyed by the type.
 */
function site_commerce_type_get_names() {
  return _site_commerce_types_build()->names;
}

/**
 * Returns the site commerce type of the passed site commerce or site commerce type string.
 *
 * @param $site_commerce
 *   A site commerce object or string that indicates the site commerce type to return.
 *
 * @return
 *   A single site commerce type, as an object, or FALSE if the site commerce type is not found.
 */
function site_commerce_type_get_type($name) {
  $types = _site_commerce_types_build()->types;
  return isset($types[$name]) ? $types[$name] : FALSE;
}

/**
 * Returns a list of all the available site commerce types.
 *
 * This list can include types that are queued for addition or deletion.
 * See _node_types_build() for details.
 *
 * @param $status
 *   Статус видимости. Если TRUE - искать только видимые типы.
 *
 * @return
 *   An array of site commerce types, as objects, keyed by the type.
 *
 * @see node_type_get_type()
 */
function site_commerce_type_get_types($status = FALSE) {
  return _site_commerce_types_build($status)->types;
}

/**
 * Builds and returns the list of available site commerce types.
 *
 * @param $status
 *   Статус видимости. Если TRUE - искать только видимые типы.
 *
 * @return
 *   An object with two properties:
 *   - names: Associative array of the names of site commerce types, keyed by the type.
 *   - types: Associative array of site commerce type objects, keyed by the type.
 */
function _site_commerce_types_build($status = FALSE) {
  $site_commerce_types = (object) array('types' => array(), 'names' => array());
  $query = db_select('site_commerce_type', 't');
  $query->fields('t');
  if ($status) {
    $query->condition('t.status', TRUE);
  }
  $query->orderBy('t.type', 'ASC');
  foreach ($query->execute() as $type_object) {
    $type_db = $type_object->type;
    $site_commerce_types->types[$type_db] = $type_object;
    $site_commerce_types->names[$type_db] = $type_object->name;
    asort($site_commerce_types->names);
  }

  return $site_commerce_types;
}

/**
 * Prepares a site commerce object for editing. *
 */
function site_commerce_object_prepare($site_commerce) {
  // If this is a new node, fill in the default values.
  if (!isset($site_commerce->pid)) {
    global $user;
    $site_commerce->pid = 0;
    $site_commerce->import_id = 0;
    $site_commerce->uid = $user->uid;
    $site_commerce->created = REQUEST_TIME;
    $site_commerce->status = 10;
    $site_commerce->sticky = 0;
    $site_commerce->disabled = 0;
    $site_commerce->type_sale = 0;
    $site_commerce->cost_set = 0;
    $site_commerce->type_condition = 0;
  }
}

/**
 * Save changes to a product or add a new product.
 *
 * @param $site_commerce
 *   The $site_commerce object to be saved. If $site_commerce->pid is
 *   omitted (or $site_commerce->is_new is TRUE), a new product will be added.
 */
function site_commerce_save($site_commerce) {
  $transaction = db_transaction();
  global $user;

  try {
    // Load the stored entity, if any.
    if (!empty($site_commerce->pid) && !isset($site_commerce->original)) {
      $site_commerce->original = entity_load_unchanged('site_commerce', $site_commerce->pid);
    }

    field_attach_presave('site_commerce', $site_commerce);

    // Determine if we will be inserting a new product.
    if (!isset($site_commerce->is_new)) {
      $site_commerce->is_new = empty($site_commerce->pid);
    }

    // Set the timestamp fields.
    if (empty($site_commerce->created)) {
      $site_commerce->created = REQUEST_TIME;
    }

    // The changed timestamp is always updated for bookkeeping purposes,
    // for example: revisions, searching, etc.
    $site_commerce->changed = REQUEST_TIME;

    // Let modules modify the site commerce before it is saved to the database.
    module_invoke_all('site_commerce_presave', $site_commerce);
    module_invoke_all('entity_presave', $site_commerce, 'site_commerce');

    // Save the site commerce object.
    if ($site_commerce->is_new) {
      // For new products, save new records.
      $site_commerce->uid = $user->uid;
      drupal_write_record('site_commerce', $site_commerce);
      $op = 'insert';
    }
    else {
      // For existing products, update the object record which matches the value of
      // $site_commerce->pid.
      drupal_write_record('site_commerce', $site_commerce, 'pid');
      $op = 'update';
    }

    // Save fields.
    $function = "field_attach_$op";
    $function('site_commerce', $site_commerce);

    // Let modules modify data after site commers saved to the database.
    module_invoke_all('site_commerce_' . $op, $site_commerce);
    module_invoke_all('entity_' . $op, $site_commerce, 'site_commerce');

    // Clear internal properties.
    unset($site_commerce->is_new);

    // Обновление комплекта позиции.
    if (isset($site_commerce->package)) {
      site_commerce_update_package($site_commerce->pid, $site_commerce->package);
    }

    // Clear the static loading cache.
    entity_get_controller('site_commerce')->resetCache(array($site_commerce->pid));

    // Очищаем кэш.
    cache_clear_all('site_commerce_category_pid:' . $site_commerce->pid, 'cache_site_commerce');
    
    // Ignore slave server temporarily to give time for the
    // saved site commerce to be propagated to the slave.
    db_ignore_slave();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('site_commerce', $e);
    throw $e;
  }
}

/**
 * Delete a product.
 *
 * @param $pid
 *   A product ID.
 */
function site_commerce_delete($pid) {
  site_commerce_delete_multiple(array($pid));
}

/**
 * Delete multiple products.
 *
 * @param $pids
 *   An array of product IDs.
 */
function site_commerce_delete_multiple($pids) {
  $transaction = db_transaction();
  if (!empty($pids)) {
    $site_commerces = site_commerce_load_multiple($pids, array());

    try {
      foreach ($site_commerces as $pid => $site_commerce) {
        // Вызываем зависимые callback функции (если необходимо):
        module_invoke_all('site_commerce_delete', $site_commerce);
        module_invoke_all('entity_delete', $site_commerce, 'site_commerce');
        field_attach_delete('site_commerce', $site_commerce);

        // Удаляем данные из поискового индекса.
        if (module_exists('search')) {
          search_reindex($pid, 'site_commerce');
        }
      }

      // Выполняем удаление после вызова hooks.
      db_delete('site_commerce')
        ->condition('pid', $pids, 'IN')
        ->execute();

      db_delete('site_commerce_cart')
        ->condition('pid', $pids, 'IN')
        ->execute();

      db_delete('site_commerce_position_index')
        ->condition('pid', $pids, 'IN')
        ->execute();

      db_delete('site_commerce_position_index')
        ->condition('rpid', $pids, 'IN')
        ->execute();

      db_delete('site_commerce_taxonomy_index')
        ->condition('pid', $pids, 'IN')
        ->execute();
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('site_commerce', $e);
      throw $e;
    }

    // Очищаем кэш.
    entity_get_controller('site_commerce')->resetCache();
  }
}

/**
 * Сохраняет или изменяет alias (путь) у позиции.
 *
 * @param $site_commerce.
 *   Объект $site_commerce object.
 * @param $op
 *   Параметр, если позиция создается равен insert, в случае обновления update,
 * если позиция удаляется то delete или select, если просто нужно вернуть путь.
 */
function site_commerce_alias($site_commerce, $op) {
  // Категория к которой принадлежит позиция.
  $language = isset($site_commerce->language) ? $site_commerce->language : LANGUAGE_NONE;
  $tid = $site_commerce->tid;

  // Загружаем путь.
  $source = 'site-commerce/' . $site_commerce->pid;
  $site_commerce->path = path_load($source);

  // Возвращем путь.
  if ($op == 'select') {
    return $site_commerce;
  }

  // Если нужно полностью удалить путь.
  if ($op == 'delete') {
    if (isset($site_commerce->path['pid'])) {
      path_delete($site_commerce->path['pid']);
    }
    return TRUE;
  }

  // Удаляем путь перед обновлением, чтобы не было дубликата.
  if ($op == 'update') {
    if (isset($site_commerce->path['pid'])) {
      path_delete($site_commerce->path['pid']);
      $site_commerce->path = array();
    }
  }

  // Определяем разрешено ли создавать путь с учетом названия категории.
  if (variable_get('site_commerce_full_path', TRUE)) {

    // Создаем новый алиас.
    $taxonomy_alias = '';
    if ($tid) {
      $parents = taxonomy_get_parents_all($tid);

      while ($parents) {
        $current = array_shift($parents);
        if ($taxonomy_alias) {
          $taxonomy_alias = $current->name . '/' . $taxonomy_alias;
        }
        else {
          $taxonomy_alias = $current->name;
        }
      }
    }

    // Let modules modify the site commerce before it is saved to the database.
    module_invoke_all('site_commerce_title', $site_commerce);

    $site_commerce->title = kvantstudio_title_correct($site_commerce->title);

    // Если доступно более одного типа товаров.
    // Дабавляем к пути имя типа товаров.
    $site_commerce_types = site_commerce_type_get_types(TRUE);

    if ($taxonomy_alias) {
      if (count($site_commerce_types) > 1) {
        $type = site_commerce_type_load($site_commerce->type);
        $site_commerce->path['alias'] = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $type->path . '/' . $taxonomy_alias . '/' . $site_commerce->title;
      }
      else {
        $site_commerce->path['alias'] = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $taxonomy_alias . '/' . $site_commerce->title;
      }
    }
    else {
      if (count($site_commerce_types) > 1) {
        $type = site_commerce_type_load($site_commerce->type);
        $site_commerce->path['alias'] = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $type->path . '/' . $site_commerce->title;
      }
      else {
        $site_commerce->path['alias'] = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $site_commerce->title;
      }
    }

    // Корректируем путь.
    $site_commerce->path['alias'] = kvantstudio_url_alias_correct($site_commerce->path['alias']);
    $site_commerce->path['source'] = 'site-commerce/' . $site_commerce->pid;
    $site_commerce->path['language'] = $language;

    // Определяем существует ли такой путь в системе.
    // Предотвращаем создание одинаковых путей в одной категории.
    $pid = db_query("SELECT n.pid FROM {url_alias} n WHERE n.alias = :alias", array(':alias' => $site_commerce->path['alias']))->fetchField();
    if ($pid) {
      $site_commerce->path['alias'] = $site_commerce->path['alias'] . '-' . $site_commerce->pid;
    }

  }
  else {
    $site_commerce->path['alias'] = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $site_commerce->pid;
    $site_commerce->path['source'] = 'site-commerce/' . $site_commerce->pid;
    $site_commerce->path['language'] = $language;
  }

  path_save($site_commerce->path);
}

/**
 * Implements hook_site_commerce_title().
 */
function site_commerce_site_commerce_title($site_commerce) {
   // Изменения не вносятся.
}

/**
 * Title callback.
 */
function site_commerce_page_title($site_commerce) {
  return $site_commerce->title;
}

/**
 * Menu callback; view a single product.
 */
function site_commerce_page_view($site_commerce) {
  // Выполняем проверку на наличие идентификатора в БД.
  if ($site_commerce->pid) {
    // If there is a menu link to this product, the link becomes the last part
    // of the active trail, and the link name becomes the page title.
    // Thus, we must explicitly set the page title to be the product title.
    drupal_set_title($site_commerce->title);

    // Set the product path as the canonical URL to prevent duplicate content.
    $uri = entity_uri('site_commerce', $site_commerce);
    drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);

    // Формируем breadcrumb ссылки.
    $breadcrumb = drupal_get_breadcrumb();
    $count_breadcrumb = 2;
    $title = '<span itemprop="name">' . variable_get('site_commerce_catalog_title', 'Online store') . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
    $breadcrumb[] = l($title, variable_get('site_commerce_catalog_link', 'tovary'), array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));

    // Ссылки для типа товаров.
    // Если в системе зарегистрировано более одного типа товаров.
    $site_commerce_types = site_commerce_type_get_types(TRUE);
    if (count($site_commerce_types) > 1) {
      $type = site_commerce_taxonomy_get_type($site_commerce->tid);

      $count_breadcrumb++;
      $title = '<span itemprop="name">' . $type->name . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
      $breadcrumb[] = l($title, variable_get('site_commerce_catalog_link', 'tovary') . '/' . $type->path, array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));
    }

    // Ссылки breadcrumb для категорий каталога.
    $term = taxonomy_term_load($site_commerce->tid);
    if (isset($term->tid)) {
      $parents = array_reverse(taxonomy_get_parents_all($site_commerce->tid));
      if (empty($term->alias)) {
        $term->alias = 'taxonomy/term/' . $term->tid;
      }
      // Ссылки на термины родителя.
      if (count($parents)) {
        while (count($parents) - 1) {
          $current = array_shift($parents);
          $current_alias = db_query("SELECT n.alias FROM {url_alias} n WHERE n.source=:source", array(':source' => 'taxonomy/term/' . $current->tid))->fetchField();
          if (empty($current_alias)) {
            $current_alias = 'taxonomy/term/' . $current->tid;
          }

          $count_breadcrumb++;
          $title = '<span itemprop="name">' . $current->name . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
          $breadcrumb[] = l($title, $current_alias, array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));
        }
      }
      // Ссылка на термин, к которому принадлежит позиция.
      $count_breadcrumb++;
      $title = '<span itemprop="name">' . $term->name . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
      $breadcrumb[] = l($title, $term->alias, array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));
    }
    drupal_set_breadcrumb($breadcrumb);

    return site_commerce_view_multiple(array($site_commerce->pid => $site_commerce), 'full');
  }
}

/**
 * Construct a drupal_render() style array from an array of loaded products.
 *
 * @param $site_commerces
 *   An array of products as returned by site_commerce_load_multiple().
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param $weight
 *   An integer representing the weight of the first product in the list.
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function site_commerce_view_multiple($site_commerces, $view_mode = 'teaser', $weight = 0, $langcode = NULL) {
  field_attach_prepare_view('site_commerce', $site_commerces, $view_mode, $langcode);
  entity_prepare_view('site_commerce', $site_commerces, $langcode);
  $build = array();
  foreach ($site_commerces as $site_commerce) {
    $build['site_commerces'][$site_commerce->pid] = site_commerce_view($site_commerce, $view_mode, $langcode);
    $build['site_commerces'][$site_commerce->pid]['#weight'] = $weight;
    $weight++;
  }
  $build['site_commerces']['#sorted'] = TRUE;
  return $build;
}

/**
 * Generate an array for rendering the given product.
 *
 * @param $site_commerce
 *   A product object.
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function site_commerce_view($site_commerce, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  // Populate $site_commerce->content with a render() array.
  site_commerce_build_content($site_commerce, $view_mode, $langcode);

  $build = $site_commerce->content;
  // We don't need duplicate rendering info in site_commerce->content.
  unset($site_commerce->content);

  // Определяем функцию темизации в зависимости от типа товара.
  module_invoke_all('site_commerce_theme', $site_commerce);

  $build += array(
    '#theme' => $site_commerce->theme,
    '#site_commerce' => $site_commerce,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  // Allow modules to modify the structured product.
  drupal_alter(array('site_commerce_view', 'entity_view'), $build, $site_commerce->type);

  return $build;
}

/**
 * Implements hook_site_commerce_theme().
 */
function site_commerce_site_commerce_theme($site_commerce) {
  $type = site_commerce_type_get_type($site_commerce->type);
  if ($type->module == 'site_commerce') {
    $site_commerce->theme = 'site_commerce';
  }
}

/**
 * Process variables for site-commerce.tpl.php.
 * @see site-commerce.tpl.php.
 */
function template_preprocess_site_commerce(&$variables) {
  // Объект позиции.
  $site_commerce = $variables['elements']['#site_commerce'];

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($site_commerce->pid);
  
  // Идентификатор позиции.
  $variables['pid'] = $site_commerce->pid;

  // Строковый идентификатор позиции. Артикул или т.п. атрибут.
  $variables['identifier'] = $position->identifier;

  // Режим отображения позиции.
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Дата создания позиции.
  $variables['date_created'] = format_date($site_commerce->created);

  // Заголовок позиции.
  $variables['title'] = check_plain($site_commerce->title);

  // Блок с изображениями позиции.
  $variables['images']['main'] = array();
  $variables['images']['other'] = array();
  $variables['site_commerce_images'] = '';
  if (variable_get('site_commerce_default_image_formatter', TRUE)) {
    if (!empty($position->field_site_commerce_image)) {
      // Стиль главного изображения.
      $style_name = variable_get('site_commerce_imagecache_first', 'sc_first');
      if ($position->sticky) {
        $style_name = variable_get('site_commerce_imagecache_first_new', 'sc_first');
      }

      // Определяем теги главного изображения, описание и заголовок если они не заданы.
      $variables['images']['main']['alt'] = '';
      if (!empty($position->field_site_commerce_image['alt'])) {
        $variables['images']['main']['alt'] = $position->field_site_commerce_image['alt'];
      }
      $variables['images']['main']['title'] = '';
      if (!empty($position->field_site_commerce_image['title'])) {
        $variables['images']['main']['title'] = $position->field_site_commerce_image['title'];
      }

      // Вывод главного фотоизображения.
      $variables['images']['main']['url'] = '';
      $variables['images']['main']['style_url'] = '';
      if ($uri = site_commerce_default_position_image_uri($position)) {
        $variables['images']['main']['url'] = file_create_url($uri);
        $variables['images']['main']['style_url'] = image_style_url($style_name, $uri);
      }

      // Вывод дополнительных изображений.
      $position_images = kvantstudio_field_value('site_commerce', $site_commerce, 'field_site_commerce_image');

      unset($position_images[0]);

      if (count($position_images)) {
        foreach ($position_images as $key => $value) {
          // Стиль главного изображения.
          $style_name = variable_get('site_commerce_imagecache_second', 'sc_thumbnail');

          // Определяем теги главного изображения, описание и заголовок если они не заданы.
          $variables['images']['other'][$key]['alt'] = '';
          if (!empty($value['alt'])) {
            $variables['images']['other'][$key]['alt'] = $value['alt'];
          }
          $variables['images']['other'][$key]['title'] = '';
          if (!empty($value['title'])) {
            $variables['images']['other'][$key]['title'] = $value['title'];
          }

          // Вывод главного фотоизображения.
          $variables['images']['other'][$key]['url'] = '';
          $variables['images']['other'][$key]['style_url'] = '';
          if ($value['uri']) {
            $variables['images']['other'][$key]['url'] = file_create_url($value['uri']);
            $variables['images']['other'][$key]['style_url'] = image_style_url($style_name, $value['uri']);
          }
        }
      }
    }
  }
  else {
    $field_info = field_info_instances('site_commerce', $site_commerce->type);
    $display = array(
      'type' => $field_info['field_site_commerce_image']['display']['default']['type'],
      'settings' => $field_info['field_site_commerce_image']['display']['default']['settings'],
    );
    $images = field_view_field('site_commerce', $site_commerce, 'field_site_commerce_image', $display);
    $variables['site_commerce_images'] = render($images);
  }

  // Краткое описание позиции.
  $variables['site_commerce_summary'] = '';
  if (isset($site_commerce->field_site_commerce_body[$site_commerce->language])) {
    $variables['site_commerce_summary'] = theme('site_commerce_body', array('site_commerce' => $site_commerce, 'summary_allow' => TRUE, 'value_allow' => FALSE));
  }

  // Полное описание позиции.
  $variables['site_commerce_body'] = '';
  if (isset($site_commerce->field_site_commerce_body[$site_commerce->language])) {
    $variables['site_commerce_body'] = theme('site_commerce_body', array('site_commerce' => $site_commerce, 'summary_allow' => FALSE, 'value_allow' => TRUE));
  }

  // Блок для вывода позиций, в которые данный товар входит.
  $variables['site_commerce_position_index'] = theme('site_commerce_position_index', array('pid' => $site_commerce->pid));

  // Блок для характеристик позиции.
  $variables['site_commerce_data'] = theme('site_commerce_data', array('pid' => $site_commerce->pid));

  // Стоимость позиции.
  $variables['site_commerce_cost'] = "";
  if ($position->field_site_commerce_cost || $position->type_sale == 4 || $position->field_site_commerce_cost_min) {
    $variables['site_commerce_cost'] = theme('site_commerce_cost', array('position' => $position, 'type_call' => 'card'));
  }

  // Определяем примечание, если основная стоимость равна 0.
  // Отображаем только для товаров, которые имеют тип продажи - поштучная продажа разрешена.
  $variables['site_commerce_cost_none_exist'] = "";
  if ($position->type_sale < 4) {
    if ($position->field_site_commerce_cost == 0 && $position->field_site_commerce_cost_min == 0 && variable_get('site_commerce_note_none_cost')) {
      $variables['site_commerce_cost_none_exist'] = variable_get('site_commerce_note_none_cost');
    }
  }

  // Определяем примечание, если существует минимальная стоимость.
  $variables['site_commerce_cost_minimal_exist'] = "";
  if ($position->field_site_commerce_cost_min > 0 && variable_get('site_commerce_note_minimal_cost')) {
    $variables['site_commerce_cost_minimal_exist'] = variable_get('site_commerce_note_minimal_cost');
  }

  // Статус позиции на складе.
  $variables['site_commerce_status'] = "";
  if ($position->status) {
    $variables['site_commerce_status'] = theme('site_commerce_status', array('pid' => $site_commerce->pid, 'status' => $position->status, 'type_call' => 'card'));
  }

  // Форма добавления в корзину.
  // Статусы позиции, при которых запрещено добавлять в корзину.
  // Если разрешено отображать кнопку добавления в корзину.
  $variables['site_commerce_cart'] = "";
  $allow_execute_statuses = variable_get('site_commerce_add_to_cart_allow_statuses', site_commerce_position_status());
  if (in_array($position->status, $allow_execute_statuses) && $position->type_sale <> 5 && variable_get('site_commerce_allow_cart', TRUE)) {
    $form_cart = drupal_get_form('site_commerce_actions_form', $site_commerce->pid, TRUE, TRUE, TRUE, TRUE);
    $form_cart = drupal_render($form_cart);
    $variables['site_commerce_cart'] = $form_cart;
  }

  // Блок с привязанными позициями.
  $variables['site_commerce_position_index_content'] = theme('site_commerce_position_index_content', array('pid' => $site_commerce->pid));

  // Формируем ссылки администрирования.
  $variables['site_commerce_admin_actions_form'] = '';
  if (user_access('administer site commerce products')) {
    $form = drupal_get_form('site_commerce_admin_actions_form', $site_commerce->pid);
    $form = drupal_render($form);
    $variables['site_commerce_admin_actions_form'] = $form;
  }

  // Прочие товары, которые относятся к той же категории, что и текущий товар.
  $variables['site_commerce_other_positions'] = theme('site_commerce_other_positions', array('position' => $position));
}

/**
 * Builds a structured array representing the products's content.
 *
 * @param $site_commerce
 *   A product object.
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 */
function site_commerce_build_content($site_commerce, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  // Remove previously built content, if exists.
  $site_commerce->content = array();

  // Build fields content.
  // In case of a multiple view, node_view_multiple() already ran the
  // 'prepare_view' step. An internal flag prevents the operation from running
  // twice.
  field_attach_prepare_view('site_commerce', array($site_commerce->pid => $site_commerce), $view_mode, $langcode);
  entity_prepare_view('site_commerce', array($site_commerce->pid => $site_commerce), $langcode);
  $site_commerce->content += field_attach_view('site_commerce', $site_commerce, $view_mode, $langcode);

  // Allow modules to make their own additions to the node.
  module_invoke_all('site_commerce_view', $site_commerce, $view_mode, $langcode);
  module_invoke_all('entity_view', $site_commerce, 'site_commerce', $view_mode, $langcode);
}

/**
* Implementation of hook_taxonomy_term_load($terms).
*/
function site_commerce_taxonomy_term_load($terms) {
  foreach ($terms as $term) {
    $vid_term = db_query('SELECT n.vid FROM {taxonomy_term_data} n WHERE n.tid = :tid', array(':tid' => $term->tid))->fetchField();
    // Let modules modify the site commerce before it is saved to the database.
    module_invoke_all('site_commerce_term_validate', $term);

    if ($term->validate) {
      $alias = db_query("SELECT n.alias FROM {url_alias} n WHERE n.source = :source", array(':source' => 'taxonomy/term/' . $term->tid))->fetchField();
      $terms[$term->tid]->alias = $alias;
    }
  }
}

/**
* Implementation of hook_kvantstudio_term_page().
*/
function site_commerce_kvantstudio_term_page($term) {
  $value = array();

  // Название модуля, который реализует тип товара.
  $module = db_query('SELECT n.module FROM {site_commerce_type} n WHERE n.categories_vocabulary = :vid', array(':vid' => $term->vid))->fetchField();
  if ($module == "site_commerce") {
    $value = array(
      'module' => 'site_commerce', // Имя модуля.
      'file' => 'site_commerce', // Файл в котором располагается функция реализующая отображение термина таксономии.
      'extension' => 'module', // Расширение файла.
      'function' => 'site_commerce_term_page', // Функция, которая реализует отображение термина таксономии.
    );
    return $value;
  }
}

/**
* Implementation of hook_site_commerce_term_validate().
*/
function site_commerce_site_commerce_term_validate($term) {
  // Создаём параметр валидации термина.
  if (!isset($term->validate)) {
    $term->validate = FALSE;
  }

  // Определяем является ли словарь текущего термина, одним из классификаторов
  // в типах товаров. Если является, то разрешаем выполнение.
  // Присваиваем $term->validate = TRUE.
  $vid_exist = db_query('SELECT COUNT(*) FROM {site_commerce_type} n WHERE n.categories_vocabulary = :vid', array(':vid' => $term->vid))->fetchField();
  if ($vid_exist) {
    $term->validate = TRUE;
  }
}

/**
* Implementation of hook_taxonomy_term_insert($term).
*/
function site_commerce_taxonomy_term_insert($term) {
  // Let modules modify the site commerce before it is saved to the database.
  module_invoke_all('site_commerce_term_validate', $term);

  if ($term->validate) {
    pathauto_taxonomy_term_update_alias($term, 'insert');
//    $alias = '';
//    $parents = taxonomy_get_parents_all($term->tid);
//    while ($parents) {
//      $current = array_shift($parents);
//      if ($alias) {
//        $alias = $current->name . '/' . $alias;
//      }
//      else {
//        $alias = $current->name;
//      }
//    }
//
//    // Если доступно более одного типа товаров.
//    // Дабавляем к пути имя типа товаров.
//    $site_commerce_types = site_commerce_type_get_types(TRUE);
//    if (count($site_commerce_types) > 1) {
//      $type = site_commerce_taxonomy_get_type($term->tid);
//      $alias = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $type->path . '/' . $alias;
//    }
//    else {
//      $alias = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $alias;
//    }
//    $alias = kvantstudio_url_alias_correct($alias);
//
//    // Проверяем существует ли путь.
//    $count = db_query('SELECT n.pid FROM {url_alias} n WHERE n.source = :source', array(':source' => 'taxonomy/term/' . $term->tid))->fetchField();
//    if ($count) {
//    $result = db_update('url_alias')
//      ->fields(array(
//        'alias' => $alias,
//      ))
//      ->condition('source', 'taxonomy/term/' . $term->tid)
//      ->execute();
//    }
//    else {
//      // Если путь не создан.
//      $path = array();
//      $path['source'] = 'taxonomy/term/' . $term->tid;
//      $path['alias'] = $alias;
//      $path['language'] = LANGUAGE_NONE;
//      path_save($path);
//    }
  }
}

/**
* Implementation of hook_taxonomy_term_update($term).
*/
function site_commerce_taxonomy_term_update($term) {
  // Let modules modify the site commerce before it is saved to the database.
  module_invoke_all('site_commerce_term_validate', $term);

  if ($term->validate) {
    // Создавать синоним автоматически.
    //$term->path['pathauto'] = 1;
    pathauto_taxonomy_term_update_alias($term, 'update', array('alias children' => TRUE));
//    $alias = '';
//    $parents = taxonomy_get_parents_all($term->tid);
//    while ($parents) {
//      $current = array_shift($parents);
//      if ($alias) {
//        $alias = $current->name . '/' . $alias;
//      }
//      else {
//        $alias = $current->name;
//      }
//    }
//
//    // Если доступно более одного типа товаров.
//    // Дабавляем к пути имя типа товаров.
//    $site_commerce_types = site_commerce_type_get_types(TRUE);
//    if (count($site_commerce_types) > 1) {
//      $type = site_commerce_taxonomy_get_type($term->tid);
//      $alias = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $type->path . '/' . $alias;
//    }
//    else {
//      $alias = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $alias;
//    }
//    $alias = kvantstudio_url_alias_correct($alias);
//
//    // Проверяем существует ли путь.
//    $count = db_query('SELECT n.pid FROM {url_alias} n WHERE n.source = :source', array(':source' => 'taxonomy/term/' . $term->tid))->fetchField();
//    if ($count) {
//    $result = db_update('url_alias')
//      ->fields(array(
//        'alias' => $alias,
//      ))
//      ->condition('source', 'taxonomy/term/' . $term->tid)
//      ->execute();
//    }
//    else {
//      // Если путь не создан.
//      $path = array();
//      $path['source'] = 'taxonomy/term/' . $term->tid;
//      $path['alias'] = $alias;
//      $path['language'] = LANGUAGE_NONE;
//      path_save($path);
//    }
  }

  // Обнуляем параметр проверки валидации термина.
  $term->validate = FALSE;
}

/**
* Implementation of hook_taxonomy_term_delete.
*/
function site_commerce_taxonomy_term_delete($term) {
  // Let modules modify the site commerce before it is saved to the database.
  module_invoke_all('site_commerce_term_validate', $term);

  if ($term->validate) {
    if (variable_get('site_commerce_catalog_position_delete', FALSE)) {
      // Выбираем перечень всех позиций принадлежащих категории.
      $result = db_query('SELECT n.pid FROM {site_commerce} n WHERE n.tid = :tid', array(':tid' => $term->tid));
      foreach ($result as $row) {
        // Удаляем данные из служебных таблиц.
        site_commerce_delete($row->pid);
      }
    }
    else {
      //  Отключаем все товары, которые привязаны к текущей категории.
      db_update('site_commerce')
        ->fields(array('disabled' => 1, 'tid' => 0))
        ->condition('tid', $term->tid)
        ->execute();
    }

    // Удаляет алиас термина категории.
    path_taxonomy_term_delete($term);
  }
}

/**
* Implementation of hook_taxonomy_vocabulary_delete.
*/
function hook_taxonomy_vocabulary_delete($vocabulary) {
  db_delete('site_commerce_parametrs')->condition('vid', $vocabulary->vid)->execute();
}

/**
 * Implementation of hook_module_vocabulary().
 * Возвращает номер словаря таксономии с каталогом категорий интернет-магазина.
 */
function site_commerce_module_vocabulary() {
  // Определяем словари категорий реализованные в интернет-магазине.
  $data = array();
  $count = db_query('SELECT COUNT(*) FROM {site_commerce_type} n')->fetchField();
  $result = db_query('SELECT n.type, n.categories_vocabulary, n.path FROM {site_commerce_type} n');
  foreach ($result as $type) {
    $data[$type->type]['vid'] = $type->categories_vocabulary;
    $data[$type->type]['delete'] = TRUE;
    $data[$type->type]['path'] = $type->path;
    $data[$type->type]['count'] = $count;
  }
  return $data;
}

/**
 * Обновление alias терминов словаря.
 * @param $vid
 *   Номер словаря, его идентификатор.
 * @param $delete.
 *   Если $delete = TRUE, то старый сушествующий путь терминов словаря будет удален.
 */
function site_commerce_taxonomy_url_alias_update() {
  // Получаем перечень доступных для обновления словарей.
  $vids = module_invoke_all('module_vocabulary');

  foreach ($vids as $type => $data) {
    $vid = $data['vid'];
    $count_term = 0;
    $result = db_query('SELECT n.tid FROM {taxonomy_term_data} n WHERE n.vid = :vid', array(':vid' => $vid));
    foreach ($result as $term) {
      $alias = '';
      $parents = taxonomy_get_parents_all($term->tid);
      while ($parents) {
        $current = array_shift($parents);
        if ($alias) {
          $alias = $current->name . '/' . $alias;
        }
        else {
          $alias = $current->name;
        }
      }

      // Если доступно более одного типа товаров.
      // Дабавляем определенный в настройках путь для типа товаров.
      if ($data['count'] > 1) {
        $site_commerce_types = site_commerce_type_get_types();
        $alias = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $data['path'] . '/' . $alias;
      }
      else {
        $alias = variable_get('site_commerce_catalog_link', 'tovary') . '/' . $alias;
      }
      $alias = kvantstudio_url_alias_correct($alias);

      // Проверяем существует ли alias у текущего термина.
      // Если разрешено в настройках типа товаров, то удаляем текущий существующий путь.
      $result_pids = db_query('SELECT n.pid FROM {url_alias} n WHERE n.source = :source', array(':source' => 'taxonomy/term/' . $term->tid));
      foreach ($result_pids as $result_pid) {
        if ($result_pid->pid && $data['delete']) {
          path_delete($result_pid->pid);
        }
      }

      // Создаем путь.
      $criteria = array(
        'source' => 'taxonomy/term/' . $term->tid,
        'alias' => $alias,
        'language' => LANGUAGE_NONE,
      );
      path_save($criteria);

      $count_term++;
    }

    drupal_set_message(t('Updating URL of names of categories of the catalogue is executed. It is updated categories - @count.', array('@count' => $count_term)));
  }
}

/**
 * Implements hook_site_commerce_insert().
 */
function site_commerce_site_commerce_insert($site_commerce) {
  // Add taxonomy index entries for the product.
  site_commerce_insert_taxonomy_index($site_commerce);
}

/**
 * Implements hook_site_commerce_update().
 */
function site_commerce_site_commerce_update($site_commerce) {
  // Always rebuild the product's taxonomy index entries on product save.
  site_commerce_delete_taxonomy_index($site_commerce);
  site_commerce_insert_taxonomy_index($site_commerce);
}

/**
 * Implements hook_site_commerce_delete().
 */
function site_commerce_site_commerce_delete($site_commerce) {
  // Clean up the {site_commerce_taxonomy_index} table when products are deleted.
  site_commerce_delete_taxonomy_index($site_commerce);
}

/**
 * Deletes taxonomy index entries for a given product.
 *
 * @param $site_commerce
 *   The product object.
 */
function site_commerce_delete_taxonomy_index($site_commerce) {
  // Удаляем все записи в таблице site_commerce_taxonomy_index.
  db_delete('site_commerce_taxonomy_index')->condition('pid', $site_commerce->pid)->execute();

  // Удаляем привязку термина к позиции в таблице site_commerce.
  db_update('site_commerce')
  ->fields(array(
    'tid' => 0,
  ))
  ->condition('pid', $site_commerce->pid)
  ->execute();
}

/**
 * Builds and inserts taxonomy index entries for a given product.
 *
 * The index lists all terms that are related to a given site_commerce entity, and is
 * therefore maintained at the entity level.
 *
 * @param $site_commerce
 *   The product object.
 */
function site_commerce_insert_taxonomy_index($site_commerce) {
  // Выполняем только для обьектов с активным статусом.
  $status = NULL;
  // If a site_commerce property is not set in the site_commerce object when site_commerce_save() is
  // called, the old value from $site_commerce->original is used.
  if (!empty($site_commerce->original)) {
    $status = (int)(!empty($site_commerce->status) || (!isset($site_commerce->status) && !empty($site_commerce->original->status)));
  }
  else {
    $status = (int)(!empty($site_commerce->status));
  }

  $type = site_commerce_type_get_type($site_commerce->type);

  // Выполняем только для опубликованных позиций.
  //if ($status) {
    // Формируем термины относящиеся к текущей позиции.
    $tid_all = array();
    foreach (field_info_instances('site_commerce', $site_commerce->type) as $instance) {
      $field_name = $instance['field_name'];
      $field = field_info_field($field_name);
      if ($field['module'] == 'taxonomy' && $field['storage']['type'] == 'field_sql_storage') {
        // If a field value is not set in the site_commerce object when site_commerce_save() is
        // called, the old value from $site_commerce->original is used.
        if (isset($site_commerce->{$field_name})) {
          $items = $site_commerce->{$field_name};
        }
        elseif (isset($site_commerce->original->{$field_name})) {
          $items = $site_commerce->original->{$field_name};
        }
        else {
          continue;
        }
        foreach (field_available_languages('site_commerce', $field) as $langcode) {
          if (!empty($items[$langcode])) {
            foreach ($items[$langcode] as $item) {
              $tid_all[$item['tid']] = $item['tid'];
              // Регистрируем привязку категории позиции.
              if ($field_name == "field_category_" . $type->categories_vocabulary) {
                db_update('site_commerce')
                ->fields(array(
                  'tid' => $item['tid'],
                ))
                ->condition('pid', $site_commerce->pid)
                ->execute();

                $site_commerce->tid = $item['tid'];
              }
            }
          }
        }
      }

    }
    // Регистрируем в БД привязку термина к текущей позиции.
    if (!empty($tid_all)) {
      $query = db_insert('site_commerce_taxonomy_index')->fields(array('pid', 'tid', 'created'));
      foreach ($tid_all as $tid) {
        $query->values(array(
          'pid' => $site_commerce->pid,
          'tid' => $tid,
          'created' => $site_commerce->created,
        ));
      }
      $query->execute();
    }
  //}
}

/**
 * Формируем идентификатор пользователя.
 *
 * Если пользователь авторизован то возвращаем {users}.uid.
 * Если пользователь не авторизован, то возвращаем идентификатор сессии php.
 * TODO: заменить вызов этой функции на kvantstudio_user_id();
 */
function site_commerce_user_id() {
  // Проверяем авторизован пользователь или нет.
  if (user_is_logged_in()) {
    global $user;
    return (int) $user->uid;
  }
  return session_id();
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function site_commerce_block_info() {
    $blocks['cart'] = array(
      'info' => t('Cart'),
      'status' => TRUE,
      'region' => 'sidebar_first',
      'cache' => DRUPAL_NO_CACHE,
    );

    $blocks['novelties'] = array(
      'info' => t('New in the online store'),
      'status' => TRUE,
      'region' => 'sidebar_first',
    );

    $blocks['search_requests'] = array(
      'info' => t('Search requests'),
      'status' => FALSE,
      'region' => 'sidebar_first',
      'cache' => DRUPAL_NO_CACHE,
    );

    $blocks['categories'] = array(
      'info' => t('Categories'),
      'status' => TRUE,
      'region' => 'sidebar_first',
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function site_commerce_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'cart':
      if (site_commerce_view_access() && variable_get('site_commerce_allow_cart', TRUE)) {
        $block['subject'] = variable_get('site_commerce_cart_title');
        $block['content'] = array(
          '#markup' => site_commerce_block_cart(),
        );
      }
    break;
    case 'novelties':
      if (site_commerce_view_access() && site_commerce_count_novelties()) {
        $block['subject'] = t('Novelties of shop');
        $block['content'] = array(
          '#markup' => site_commerce_block_novelties(),
        );
      }
    break;
    case 'search_requests':
      if (site_commerce_view_access() && user_access('access search requests site commerce')) {
        $block['subject'] = t('Search requests');
        $block['content'] = array(
          '#prefix' => '<noindex>',
          '#markup' => site_commerce_block_search_requests(),
          '#suffix' => '</noindex>',
        );
      }
    break;
    case 'categories':
      if (site_commerce_count_categories()) {
        $block['subject'] = t('Categories');
        $block['content'] = array(
          '#markup' => theme('site_commerce_block_categories'),
        );
      }
    break;
  }
  return $block;
}

/**
 * Функция: callback для блока корзины.
 */
function site_commerce_block_cart() {
  $output = "";

  // Количество товаров готовых для заказа в корзине.
  $cart_1 = site_commerce_count_position_in_cart(1);
  $cost_result = $cart_1->cost;

  // Количество отложенных товаров в корзине.
  $cart_2 = site_commerce_count_position_in_cart(2);

  // Информация о стоимости товаров в корзине, которые готовы к заказу.
  $order_info = array();
  if ($cost_result && variable_get('site_commerce_allow_total_cost_in_cart', FALSE)) {
    // Скидка за объем заказанного товара.
    $cost_result_discount = site_commerce_order_discount($cost_result);
    if ($cost_result_discount['cost'] <> $cost_result) {
      $discount = $cost_result_discount['discount'];
      $cost_discount = (int) ($cost_result - $cost_result_discount['cost']);
    }

    $order_info = array(
      'cost' => $cost_result_discount['cost'],
      'currency' => variable_get('site_commerce_default_currency'),
    );
  }

  $output = theme('site_commerce_block_cart', array(
    'quantity_order' => $cart_1->cid,
    'quantity_postponed' => $cart_2->cid,
    'order_info' => $order_info,
  ));

  return $output;
}

/**
 * Содержимое блока новинки.
 */
function site_commerce_block_novelties() {
  $output = '';

  $query = db_select('site_commerce', 'n');
  $query->fields('n', array('pid', 'type'));
  $query->condition('n.sticky', TRUE);
  if (!user_access('administer site commerce products')) {
    $query->condition('n.disabled', 0);
  }
  $query->orderBy('pid', 'desc');
  $query->range(0, variable_get('site_commerce_block_novelties_limit', 5));
  $result = $query->execute();

  $pids = array();

  foreach ($result as $row) {
    $pids[] = $row->pid;
  }

  $path = 'new';

  if (count($pids)) {
    $output = theme('site_commerce_block_content', array('pids' => $pids, 'type_call' => 'novelties', 'path' => $path));
  }

  return $output;
}

/**
 * Подсчет кол-ва новинок.
 */
function site_commerce_count_novelties() {
  return db_query("SELECT COUNT(*) FROM {site_commerce} n WHERE n.sticky = :sticky", array(':sticky' => TRUE))->fetchField();
}

/**
 * Функция: callback для блока последних запросов.
 */
function site_commerce_block_search_requests() {
  $output = '';

  // Выбираем таблицу.
  $query = db_select('site_commerce_search', 'n');
  // Выбираем поля и условия.
  $query->fields('n', array('search_string'));
  // Сортировать по.
  $query->orderBy('sid', 'desc');
  $query->range(0, 5);
  $result = $query->execute();

  // Подключаем css.
  foreach ($result as $row) {
    $output .= l($row->search_string, variable_get('site_commerce_catalog_link', 'tovary') . '/search/site-commerce/' . $row->search_string) . '<br>';
  }

  return $output;
}

/**
 * Implements hook_search_info().
 */
function site_commerce_search_info() {
  return array(
    'title' => 'Online store',
    'path' => 'site-commerce',
  );
}

/**
 * Главная страница, которая формирует результаты поиска товаров.
 * Формирует данные в зависимости от вида поисковой формы, применяя сответствующую функцию темизации.
 */
function site_commerce_search($type, $search_string = NULL) {
  // Формируем breadcrumb ссылки.
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(variable_get('site_commerce_catalog_title', 'Online store'), variable_get('site_commerce_catalog_link', 'tovary'));
  drupal_set_breadcrumb($breadcrumb);

  $output = '';

  // Преобразуем тип.
  $type = str_replace('-', '_', $type);

  // Форма поиска.
  if (variable_get('site_commerce_search_form', TRUE)) {
    $output .= site_commerce_create_search_form($type);
  }

  // Формируем массив с результатами поиска.
  $function = $type . '_search_execute';
  $search_execute = call_user_func($function, $search_string);

  // Темизация поискового запроса.
  $function = $type . '_search_page';
  $search_page = call_user_func($function, $search_execute);

  $output .= $search_page;

  return $output;
}

/**
* Implementation of hook_search_execute().
*/
function site_commerce_search_execute($keys = NULL, $conditions = NULL) {
  $find = array();

  $string_array_keys = kvantstudio_search_request_prepare($keys);

  // Определяем тип функции, которая будет использоваться для поиска.
  if (variable_get('site_commerce_search_engine', TRUE)) {
    $matches = array();
    $matches_id = array();

    $string_array = explode(" ", $string_array_keys);
    $request = '';
    $arguments = array();
    $i = 1;
    $count_array_string = count($string_array);
    foreach ($string_array as $key) {
      $arguments[':key' . $i] = $key;
      if ($count_array_string > $i) {
        $request .= 'INSTR(i.data, :key' . $i . ') > 0 AND ';
      }
      else {
        $request .= 'INSTR(i.data, :key' . $i . ') > 0';
      }
      $i++;
    }

    // Подсчет кол-ва найденных результатов.
    $query_count = db_select('search_dataset', 'i');
    $query_count->where($request, $arguments);
    $query_count->addExpression('COUNT(*)');
    $query_count->join('site_commerce', 's', 's.pid = i.sid');
    if (!user_access('administer site commerce products')) {
      $query_count->condition('s.disabled', 0);
    }
    (int) $count = $query_count->execute()->fetchField();

    // Поиск по наименованию.
    if ($count) {
      $query = db_select('search_dataset', 'i')->extend('PagerDefault');
      $query->fields('i', array('sid'));
      $query->where($request, $arguments);
      $query->join('site_commerce', 's', 's.pid = i.sid');
      if (!user_access('administer site commerce products')) {
        $query->condition('s.disabled', 0);
      }
      // Сортировать по.
      $query->orderBy('s.status=10', 'DESC');
      $query->orderBy('s.title', 'ASC');
      $query->limit(variable_get('site_commerce_search_limit', 10));
      $results = $query->execute();

      foreach ($results as $row) {
        if (!array_key_exists($row->sid, $matches_id)) {
          $find[] = array(
            'search_string' => $keys,
            'pid' => $row->sid,
            'count' => $count,
          );
          $matches_id[$row->sid] = $row->sid;
        }
      }
    }
  }
  else {
    // Поиск по наименованию без учета поиска по части слова.
    $query = db_select('search_index', 'i')->extend('SearchQuery')->extend('PagerDefault');
    $query->join('site_commerce', 's', 's.pid = i.sid');
    if (!user_access('administer site commerce products')) {
      $query->condition('s.disabled', 0);
    }
    // Сортировать по.
    $query->orderBy('s.status=10', 'DESC');
    $query->orderBy('s.title', 'ASC');
    $query->searchExpression($string_array_keys, 'site_commerce');

    // Проверка на наличие результатов поискового запроса.
    if(!$query->executeFirstPass()) {
      return array();
    }

    // Подсчет кол-ва найденных результатов.
    $inner_query = clone $query;
    $count_query = db_select($inner_query->fields('i', array('sid')));
    $count_query->addExpression('COUNT(*)');
    (int) $count = $count_query->execute()->fetchField();

    $query->limit(variable_get('site_commerce_search_limit', 10));
    $query->orderBy('s.title', 'ASC');
    $results = $query->execute();

    foreach ($results as $row) {
      $find[] = array(
        'search_string' => $keys,
        'pid' => $row->sid,
        'count' => $count,
      );
    }
  }

  return $find;
}

/**
 * Конструктор формы поиска товаров.
 * $type - название модуля, для которого вызывается форма поиска товаров.
 * $search_form_in_header - если TRUE формируется вызов формы для шапки сайта.
 */
function site_commerce_create_search_form($type = 'site_commerce', $search_form_in_header = FALSE) {
  $output = '';

  // Считываем cookies текущий запрос.
  $search_string = '';
  if (isset($_COOKIE['search_string'])) {
    $search_string = check_plain($_COOKIE['search_string']);
  }

  // Определяем переменную поиска по типу.
  if ($type == 'site_commerce') {
    $type_positions = 'site_commerce_basic';
  }
  else {
    $type_positions = $type;
  }

  // Общее количество позиций для статусов, при которых разрешено отображать позицию.
  $allow_view_statuses = variable_get('site_commerce_catalog_allow_statuses', site_commerce_position_status());
  $query = db_select('site_commerce', 'n');
  $query->fields('n', array('pid'));
  $query->condition('n.type', $type_positions);
  $query->condition('n.status', $allow_view_statuses, 'IN');
  $query->condition('n.disabled', 0);
  $count = $query->execute()->rowCount();

  if ($count) {
    // Определяем заголовок формы поиска.
    // По умолчанию выводим его в placeholder поля поиска.
    if (variable_get($type . '_search_form_title', "")) {
      $placeholder = variable_get($type . '_search_form_title', "");
    }
    else {
      $singular = 'Search among 1 good';
      $plural = 'Search among @count goods';
      $placeholder = format_plural($count, $singular, $plural);
    }

    // Форма поиска.
    $function = $type . '_header_search_form';
    if (!function_exists($function)) {
      $function = 'site_commerce_header_search_form';
    }
    if ($search_form_in_header) {
      $form = drupal_get_form($type . '_header_search_form', $search_string, $placeholder, TRUE);
      $type_wrapper = str_replace('_', '-', $type) . '-header';
    }
    else {
      $function = $type . '_search_form';
      if (!function_exists($function)) {
        $function = 'site_commerce_search_form';
      }
      $form = drupal_get_form($function, $search_string, $placeholder);
      $type_wrapper = str_replace('_', '-', $type);
    }
    $form = drupal_render($form);

    // Определяем текст над полем формы.
    $search_form_up = '';
    if (variable_get('site_commerce_search_form_up')) {
      $search_form_up = trim(variable_get('site_commerce_search_form_up', ""));
    }

    // Определяем текст под полем формы.
    $search_form_bottom = '';
    if (variable_get('site_commerce_search_form_bottom')) {
      $search_form_bottom = trim(variable_get('site_commerce_search_form_bottom', ""));
    }

    $elements = array(
      '#theme' => 'site_commerce_create_search_form',
      '#search_form' => $form,
      '#search_form_up' => $search_form_up,
      '#search_form_bottom' => $search_form_bottom,
      '#search_form_in_header' => $search_form_in_header,
    );
    $output = drupal_render($elements);
  }
  else {
    return FALSE;
  }

  return $output;
}

/**
 * Форма поиска.
 */
function site_commerce_search_form($form, &$form_state, $search_string = "", $placeholder = "", $header = FALSE) {
  $autocomplete = NULL;
  if (variable_get('site_commerce_search_autocomplete', TRUE)) {
    $autocomplete = 'site-commerce-search-autocomplete';
  }
  $form = array();

  // Модификатор формы поиска.
  $class = 'site-commerce-search__form_default';
  if ($header) {
    $class = 'site-commerce-search__form_header';
  }

  $form['#attributes'] = array('class' => array('site-commerce-search__form', $class));
  $form['search_string'] = array(
    '#type' => module_exists('elements') ? 'searchfield' : 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#autocomplete_path' => $autocomplete,
    '#default_value' => $search_string,
    '#attributes' => array('placeholder' => $placeholder, 'class' => array('site-commerce-search__search-string')),
    '#required' => TRUE,
  );

  if (variable_get('site_commerce_search_form_alt', "")) {
    $form['search_string']['#attributes']['title'] = variable_get('site_commerce_search_form_alt', "");
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Search'), '#attributes' => array('class' => array('site-commerce-search__submit')));

  $form['#submit'][] = 'site_commerce_search_form_submit';

  return $form;
}

/**
 * Callback for site_commerce_search_form.
 */
function site_commerce_search_form_submit($form, &$form_state) {
  $search_string = trim($form_state['values']['search_string']);
  if ($search_string) {
    // Регистрация поискового запроса.
    if (variable_get('site_commerce_search_requests_save', FALSE)) {
      site_commerce_search_request_save($search_string);
    }
    // Устанавливаем cookies текущий запрос.
    setcookie('search_string', $search_string, time() + 3600);
    // Выполняем редирект.
    $form_state['redirect'] = variable_get('site_commerce_catalog_link', 'tovary') . '/search/site-commerce/' . $search_string;
  }
}

/**
 * Implements hook_search_page().
 */
function site_commerce_search_page($results) {
  // Формируем заголовок по результатам поискового запроса.
  if (isset($results[0]['search_string'])) {
    $search_string = $results[0]['search_string'];
    $count = $results[0]['count'];
    $singular = 'On request «@request» found 1 result';
    $plural = 'On request «@request» found @count results';
    $title = format_plural($count, $singular, $plural, array('@request' => $search_string));
    drupal_set_title($title);
  }
  else {
    if (isset($_COOKIE['search_string'])) {
      $search_string = $_COOKIE['search_string'];
      drupal_set_title(t('On request «@request» no results were found', array('@request' => $search_string)));
    }
    else {
      drupal_set_title(t('No results were found'));
    }
  }

  // Удаляем переменную поискового запроса.
  unset($_COOKIE['search_string']);

  $pids = array();
  $output = array();

  // Получаем позиции из поиска.
  foreach ($results as $row => $key) {
    $pids[] = $key['pid'];
  }

  // Темизация результатов поиска.
  if (count($pids)) {
    $output[] = array(
      '#theme' => 'site_commerce_term',
      '#pids' => $pids,
      '#total' => $count,
      '#module' => 'site_commerce',
    );
  }

  return drupal_render($output);
}

/**
 * Автозавершение ввода формы поиска.
 */
function site_commerce_search_autocomplete($string) {
  $matches = array();
  $matches_id = array();

  $string = kvantstudio_error_transliterate($string);

  $string_array = explode(" ", $string);
  $request = '';
  $arguments = array();
  $i = 1;
  $count_array_string = count($string_array);
  foreach ($string_array as $key) {
    $arguments[':key' . $i] = $key;
    if ($count_array_string > $i) {
      $request .= 'INSTR(i.data, :key' . $i . ') > 0 AND ';
    }
    else {
      $request .= 'INSTR(i.data, :key' . $i . ') > 0';
    }
    $i++;
  }

  // Поиск по наименованию.
  $query = db_select('search_dataset', 'i');
  $query->fields('i', array('sid'));
  $query->join('site_commerce', 's', 's.pid = i.sid');
  $query->fields('s', array('title', 'type'));
  $query->condition('i.type', 'site_commerce');
  $query->condition('s.disabled', 0);
  $query->where($request, $arguments);
  $query->orderBy('s.title', 'ASC');
  $query->range(0, variable_get('site_commerce_search_autocomplete_limit', 10));
  $result = $query->execute();

  foreach ($result as $row) {
    if (!array_key_exists($row->sid, $matches_id)) {
      $path = path_load('site-commerce/' . $row->sid);
      $matches_id[$row->sid] = $row->sid;
      $matches[$row->title] = '<div class="site-commerce-search-autocomplete">' . l($row->title, $path['alias'], array('html' => TRUE)) . '</div>';
    }
  }

  // Регистрация поискового запроса.
  if (variable_get('site_commerce_search_requests_save', FALSE)) {
    site_commerce_search_request_save($string);
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_search_status().
 */
function site_commerce_search_status() {
  $total = db_query('SELECT COUNT(*) FROM {site_commerce}')->fetchField();
  $remaining = db_query("SELECT COUNT(*) FROM {site_commerce} n LEFT JOIN {search_dataset} d ON d.type = 'site_commerce' AND d.sid = n.pid WHERE d.sid IS NULL OR d.reindex <> 0")->fetchField();
  return array('remaining' => $remaining, 'total' => $total);
}

/**
 * Implements hook_search_reset().
 */
function site_commerce_search_reset() {
  db_update('search_dataset')
    ->fields(array('reindex' => REQUEST_TIME))
    ->condition('type', 'site_commerce')
    ->execute();
}

/**
 * Implements hook_update_index().
 */
function site_commerce_update_index() {
  if (variable_get('site_commerce_search_cron', FALSE)) {
    $limit = (int) variable_get('site_commerce_search_cron_limit', 1000);

    $result = db_query_range("SELECT n.pid FROM {site_commerce} n LEFT JOIN {search_dataset} d ON d.type = 'site_commerce' AND d.sid = n.pid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, n.pid ASC", 0, $limit, array(), array('target' => 'slave'));

    $count = 0;
    $start_pid = 0;
    $stop_pid = 0;

    foreach ($result as $site_commerce) {
      site_commerce_index_site_commerce($site_commerce);
      if (!$count) {
        $start_pid = $site_commerce->pid;
      }
      $stop_pid = $site_commerce->pid;
      $count++;
    }
    if ($count) {
      drupal_set_message(t('Completed the update URL catalog items with id @first on id @last.', array('@first' => $start_pid, '@last' => $stop_pid)));
    }
  }
}

/**
 * Индексация позиции.
 */
function site_commerce_index_site_commerce($site_commerce) {
  $site_commerce = site_commerce_load($site_commerce->pid);

  // Save the changed time of the most recent indexed node, for the search
  // results half-life calculation.
  variable_set('site_commerce_cron_last', $site_commerce->changed);

  // Render the node.
  $build = site_commerce_view($site_commerce, 'search_index');
  unset($build['#theme']);
  $site_commerce->rendered = drupal_render($build);

  // Категория позиции.
  $taxonomy_alias = "";
  if (isset($site_commerce->tid)) {
    $term = taxonomy_term_load($site_commerce->tid);
    if (isset($term) && $term->name) {
      $parents = taxonomy_get_parents_all($site_commerce->tid);
      while ($parents) {
        $current = array_shift($parents);
        if ($taxonomy_alias) {
          $taxonomy_alias = $current->name . ' ' . $taxonomy_alias;
        }
        else {
          $taxonomy_alias = $current->name;
        }
      }
    }
  }

  $title = check_plain($site_commerce->title);
  $title_ru_en = check_plain(transliteration_get($site_commerce->title));
  $title_en_ru = check_plain(kvantstudio_transliterate($site_commerce->title, 'en_ru'));
  $title_error = check_plain(kvantstudio_error_transliterate($site_commerce->title));
  $title_error_transliterate = kvantstudio_error_transliterate($site_commerce->title);

  $text = $taxonomy_alias . ' ' . '<h1>' . $title . '</h1>' . ' ' . $title_ru_en . ' ' . $title_en_ru . ' ' . $title_error . ' ' . $title_error_transliterate . ' ' . $site_commerce->rendered . ' ' . kvantstudio_error_transliterate($site_commerce->rendered);

  // Fetch extra data normally not visible.
  $extra = module_invoke_all('site_commerce_update_index', $site_commerce);
  foreach ($extra as $t) {
    $text .= $t;
  }

  // Update index.
  search_index($site_commerce->pid, 'site_commerce', $text);
}

/**
 * Регистрация поискового запроса.
 */
function site_commerce_search_request_save($search_string, $status = 1) {
  $record = array(
    'search_string' => $search_string,
    'status' => $status,
    'created' => REQUEST_TIME,
    'hostname' => ip_address(),
  );

  if (!empty($search_string)) {
    drupal_write_record('site_commerce_search', $record);
  }
}

/**
 * Отображение поисковых запросов.
 */
function site_commerce_search_requests() {
  // Выбираем таблицу.
  $query = db_select('site_commerce_search', 'n');
  // Выбираем поля.
  $query->fields('n');
  // Сортировать по.
  $query->orderBy('sid', 'DESC');
  // Для нумерации страниц.
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(100);
  $result = $query->execute();

  $rows = array();

  foreach ($result as $row) {
    $rows[] = array(
      'data' => array(
        array('data' => filter_xss($row->search_string)),
        array('data' => format_date($row->created, 'long')),
        array('data' => $row->hostname . ' ' . l(t('block IP address'), 'admin/config/people/ip-blocking/' . $row->hostname)),
      )
    );
  }

  $header = array(
    array('data' => t('Text'), 'class' => array('')),
    array('data' => t('Created'), 'class' => array('')),
    array('data' => t('IP'), 'class' => array('')),

  );

  $output = theme('table', array('header' => $header, 'rows' => $rows));

  // Выводим постраничную навигацию.
  $output .= theme('pager', array('quantity' => 3));

  return $output;
}

/**
 * Формирует стоимость заказа с учетом скидок.
 * (int) $cost - стоимость.
 * (int) $discount - скидка.
 */
function site_commerce_order_discount($cost, $discount = 0) {

  $discounts = unserialize(variable_get('site_commerce_order_discounts_values'));

  $result = array('cost' => $cost, 'discount' => $discount);

  if (!empty($discounts) && !$discount) {
    foreach ($discounts as $key) {
      if ($cost >= $key['cost']) {
        $cost = $cost - (($cost * $key['discount']) / 100);
        $result['discount'] = $key['discount'];
      }
    }
  }

  // Если передана скидка то вычисляем стоимость относительно нее.
  if ($discount) {
    $cost = $cost - (($cost * $discount) / 100);
    $result['discount'] = $discount;
  }

  $result['cost'] = round($cost, 2);
  return $result;
}

/**
 * Формирует стоимость с учетом скидки.
 * (int) $cost - стоимость.
 * (int) $discount - скидка.
 */
function site_commerce_cost_discount($value1, $value2, $type = 'procent') {
  $result = array(
    'cost' => 0,
    'discount' => 0,
    'cost_discount' => 0,
    'old' => 0,
  );

  // Если вычисляется скидка как процент от стоимости.
  if ($type == 'procent') {
    $cost_discount = (($value1 * $value2) / 100);
    $cost = $value1 - $cost_discount;
    $discount = $value2;

    $result['cost_discount'] = round($cost_discount, 2); // Величина скидки.
    $result['discount'] = $discount; // Процент скидки.
    $result['cost'] = round($cost, 2); // Стоимость с учётом скидки.
  }

  if ($type == 'minus') {
    $cost_discount = $value2 - $value1;
    $result['cost_discount'] = round($cost_discount, 2);
    $result['old'] = $value2;
    $result['cost'] = $value1;
  }

  return $result;
}

/**
 * Количество позиций в корзине.
 * (int) $status - статсус позиции в корзине.
 * (int) $order - идентификатор заказа.
 */
function site_commerce_count_position_in_cart($status, $order = 0) {
  $data = new stdClass();

  // Получаем идентификатор пользователя.
  $user_id = site_commerce_user_id();

  // Проверяем есть ли в корзине не оформленные в заказ позиции.
  if (is_numeric($user_id)) {
    $data->cid = db_query("SELECT COUNT(n.cid) FROM {site_commerce_cart} n WHERE n.oid = :order AND n.uid = :uid AND n.status = :status", array(':order' => $order, ':uid' => $user_id, ':status' => $status))->fetchField();
    $data->cost = db_query("SELECT SUM(n.cost * n.quantity) FROM {site_commerce_cart} n WHERE n.oid = :order AND n.uid = :uid AND n.status = :status", array(':order' => $order, ':uid' => $user_id, ':status' => $status))->fetchField();
  }
  else {
    $data->cid = db_query("SELECT COUNT(n.cid) FROM {site_commerce_cart} n WHERE n.oid = :order AND n.sid = :sid AND n.status = :status", array(':order' => $order, ':sid' => $user_id, ':status' => $status))->fetchField();
    $data->cost = db_query("SELECT SUM(n.cost * n.quantity) FROM {site_commerce_cart} n WHERE n.oid = :order AND n.sid = :sid AND n.status = :status", array(':order' => $order, ':sid' => $user_id, ':status' => $status))->fetchField();
  }

  // Если стоимость не удалось посчитать.
  if (is_null($data->cost)) {
    $data->cost = 0;
  }

  return $data;
}

/**
 * Получает объект типа товара, к которому принадлежит категория.
 * (int) $tid - термин таксономии.
 */
function site_commerce_taxonomy_get_type($tid) {
  // Пытаемся получить имя типа позиции, где есть хотя бы одно совпадение с категорией.
  $type_get_name = db_query("SELECT n.type FROM {site_commerce} n WHERE n.tid = :tid LIMIT 1", array(':tid' => $tid))->fetchField();

  // Если совпадений не найдено, проверяем термины дочерние.
  if (empty($type_get_name)) {
    $terms = taxonomy_get_children($tid);
    foreach ($terms as $term) {
      $type_name = db_query("SELECT n.type FROM {site_commerce} n WHERE n.tid = :tid LIMIT 1", array(':tid' => $term->tid))->fetchField();
      if (!empty($type_name) && empty($type_get_name)) {
        $type_get_name = $type_name;
      }
    }
  }
  return site_commerce_type_get_type($type_get_name);
}

/**
 * Implements hook_site_commerce_identifier().
 */
function site_commerce_site_commerce_identifier($position) {
  if ($position->type == 'site_commerce_basic') {
    if ($position->field_site_commerce_code) {
      $position->identifier = $position->field_site_commerce_code;
    }
    else {
      $position->identifier = $position->pid;
    }
  }
}

/**
 * Implements hook_taxonomy_term_view_alter().
 */
function site_commerce_taxonomy_term_view_alter(&$build, &$entity_type) {
  if (isset($build['#term']) && $build['#term']->vocabulary_machine_name == 'site_commerce_categories') {
    if (module_exists('metatag')) {
      $entity = taxonomy_term_load($build['#term']->tid);
      metatag_entity_view($entity, $entity_type, 'full', NULL);
    }
  }
}

/**
 * Темизация позиции, которая добавлена в корзину.
 * Используется во всплывающем окне после добавления в корзину.
 */
function theme_site_commerce_add_to_cart_position($variables) {
  $pid = $variables['pid'];
  $output = '';

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($pid);

  // Фотоизображение.
  $image = '';

  if (isset($position->field_site_commerce_image['uri'])) {
    $variables = array(
      'style_name' => 'thumbnail',
      'style_name_popup' => variable_get('site_commerce_imagecache_full', 'sc_full'),
      'image_path' => $position->field_site_commerce_image['uri'],
      'alt' => $position->field_site_commerce_image['alt'],
      'title' => $position->field_site_commerce_image['title'],
      'attributes' => array(),
      'class' => array('colorbox'),
      'link' => FALSE,
      'gid' => NULL,
    );
    $image =  theme('kvantstudio_image', $variables);
  }

  $output .= '<div class="site-commerce-addedtocart clearfix">';
    if ($image) {
      $output .= '<div class="site-commerce-addedtocart-img">' . $image . '</div>';
    }
    $output .= '<div class="site-commerce-addedtocart-about">';
      $output .= '<span class="title">' . t('You add to cart') . '</span>';
      $output .= '<span class="subheader">' . $position->title . '</span>';
    $output .= '</div>';
  $output .= '</div>';

  $output .= '<div class="site-commerce-actions-order-confirm">';
    $output .= '<div class="item"><a href="' . base_path() . 'cart" class="site-commerce-goto-cart-link">' . t('To issue the order') . '</a></div>';
    $output .= '<div class="item"><a href="javascript:void(0);" id="' . $pid . '" class="site-commerce-goto-buy">' . t('To continue purchases') . '</a></div>';
  $output .= '</div>';

  return $output;
}

/**
 * Регистрирует позицию в корзине.
 */
function site_commerce_add_position($form_state) {
  // Получаем значения параметров из формы.
  $pid = (int) $form_state['values']['pid'];

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($pid);

  // Определяем количество для заказа.
  $quantity = 1;
  if (isset($form_state['values']['site_commerce_quantity'])) {
    $quantity = (int) $form_state['values']['site_commerce_quantity'];
    if ($quantity <= 0) {
      $quantity = 1;
    }
  }

  // Получаем идентификатор пользователя.
  $user_id = site_commerce_user_id();

  // Проверяем находится данная позиция в корзине.
  if (is_numeric($user_id)) {
    $cid = db_query("SELECT n.cid FROM {site_commerce_cart} n WHERE n.oid = :order AND n.pid = :pid AND n.uid = :uid", array(':order' => 0, ':pid' => $position->pid, ':uid' => $user_id))->fetchField();
  }
  else {
    $cid = db_query("SELECT n.cid FROM {site_commerce_cart} n WHERE n.oid = :order AND n.pid = :pid AND n.sid = :sid", array(':order' => 0, ':pid' => $position->pid, ':sid' => $user_id))->fetchField();
  }
  if ($cid) {
    // Обновление позиции в корзине.
    // Выполняем на случай если позиция ранее была удалена из корзины.
    // Возвращаем ее в состояние покупки - доступной к заказу.
    $result = db_update('site_commerce_cart')
    ->fields(array(
      'quantity' => $quantity,
      'status' => 1,
    ))
    ->condition('cid', $cid)
    ->execute();

    return $result;
  }

  // Определяем стоимость товара.
  $cost = site_commerce_cost_value($position);

  // Определяем колонку привязки к пользователю.
  if (is_numeric($user_id)) {
    $uid = $user_id;
    $sid = NULL;
  }
  else {
    $uid = 0;
    $sid = $user_id;
  }

  // Определяем дополнительные параметры заказа.
  $data = array();

  $query = db_select('site_commerce_cart_parametrs', 'n');
  $query->fields('n');
  $query->condition('pid', $pid);
  if (is_numeric($user_id)) {
    $query->condition('uid', $user_id);
  }
  else {
    $query->condition('sid', $user_id);
  }
  $query->condition('oid', 0);
  $result = $query->execute();
  foreach ($result as $row) {
    $data += array(
      $row->machine_name => array(
        'machine_name' => $row->machine_name,
        'tid' => $row->tid,
        'cost' => $row->cost,
      )
    );
  }

  $result = db_insert('site_commerce_cart', array('return' => Database::RETURN_INSERT_ID))
  ->fields(array(
    'pid' => $pid,
    'cost' => $cost,
    'quantity' => $quantity,
    'uid' => $uid,
    'sid' => $sid,
    'created' => REQUEST_TIME,
    'data' => serialize($data),
  ))
  ->execute();

  if ($result) {
    return $result;
  }
  else {
    return FALSE;
  }
}

/**
 * Регистрирует параметр товара для корзины.
 */
function site_commerce_add_cart_parametr($pid, $tid, $machine_name, $cost) {
  // Получаем идентификатор пользователя.
  $user_id = site_commerce_user_id();

  // Загружаем информацию о позиции.
  $position = site_commerce_position_load($pid);

  // Проверяем находится ли данный параметр в таблице.
  $cpid = 0;
  if (is_numeric($user_id)) {
    $cpid = db_query("SELECT n.cpid FROM {site_commerce_cart_parametrs} n WHERE n.machine_name = :machine_name AND n.uid = :uid AND n.oid = 0", array(':machine_name' => $machine_name, ':uid' => $user_id))->fetchField();
  }
  else {
    $cpid = db_query("SELECT n.cpid FROM {site_commerce_cart_parametrs} n WHERE n.machine_name = :machine_name AND n.sid = :sid AND n.oid = 0", array(':machine_name' => $machine_name, ':sid' => $user_id))->fetchField();
  }

  // Если регистрация существует удаляем.
  if ($cpid > 0) {
    db_delete('site_commerce_cart_parametrs')
      ->condition('cpid', $cpid)
      ->execute();
  }

  // Определяем колонку привязки к пользователю.
  if (is_numeric($user_id)) {
    $uid = $user_id;
    $sid = NULL;
  }
  else {
    $uid = 0;
    $sid = $user_id;
  }

  $result = db_insert('site_commerce_cart_parametrs', array('return' => Database::RETURN_INSERT_ID))
  ->fields(array(
    'pid' => $pid,
    'cost' => $cost,
    'machine_name' => $machine_name,
    'tid' => $tid,
    'uid' => $uid,
    'sid' => $sid,
    'created' => REQUEST_TIME,
  ))
  ->execute();

  if ($result) {
    return $result;
  }
  else {
    return FALSE;
  }
}

/**
 * Формирует суммарную стоимость параметров для позиции для текущего пользователя.
 */
function site_commerce_get_cost_parametrs($pid, $order = 0, $cost_add = 0, $machine_name = '') {
  // Получаем идентификатор пользователя.
  $user_id = site_commerce_user_id();

  $cost = 0;
  $cost_none_arithmetic = 0;
  $count = 0;

  $site_commerce_sum_parameters_arithmetic = variable_get('site_commerce_sum_parameters_arithmetic', TRUE);

  $query = db_select('site_commerce_cart_parametrs', 'n');
  $query->fields('n', array('cost', 'machine_name'));
  $query->condition('n.pid', $pid);
  if (!$order) {
    if (is_numeric($user_id)) {
      $query->condition('n.uid', $user_id);
    }
    else {
      $query->condition('n.sid', $user_id);
    }
  }
  if ($cost_add && $machine_name) {
    $query->condition('n.machine_name', $machine_name, '<>');
  }
  $query->condition('n.oid', $order);
  $result = $query->execute();
  foreach ($result as $row) {
     if ($site_commerce_sum_parameters_arithmetic && variable_get($row->machine_name . '_allow_arithmetic', TRUE)) {
      $cost = $cost + $row->cost;
      $count++;
    }
    else {
      $cost_none_arithmetic = $cost_none_arithmetic + $row->cost;
    }
  }
  if ($cost && !$cost_add) {
    if ($site_commerce_sum_parameters_arithmetic) {
      $cost = $cost/$count;
    }
  }
  if ($cost && $cost_add) {
    $cost_add = round($cost_add, 2);
    $cost = $cost + $cost_add;
    if ($site_commerce_sum_parameters_arithmetic && variable_get($machine_name . '_allow_arithmetic', TRUE)) {
      $count++;
      $cost = $cost/$count;
    }
  }
  $cost = $cost + $cost_none_arithmetic;
  if (!$cost && $cost_add) {
    $cost_add = round($cost_add, 2);
    $cost = $cost_add;
  }
  return $cost;
}

/**
 * Формирует перечень выбранных параметров для позиции для текущего пользователя.
 * на странице карточки товара.
 */
function site_commerce_get_user_parametrs($pid, $order = 0, $view_image = TRUE, $is_cart = FALSE) {
  // Получаем идентификатор пользователя.
  $user_id = site_commerce_user_id();

  $output = '';

  // Определяем стиль изображения.
  $style_name = variable_get('site_commerce_imagecache_select_card', 'sc_select_card');
  if ($is_cart) {
    $style_name = 'sc_parametr_cart';
  }

  $query = db_select('site_commerce_cart_parametrs', 'n');
  $query->fields('n');
  $query->condition('pid', $pid);
  if (!$order) {
    if (is_numeric($user_id)) {
      $query->condition('uid', $user_id);
    }
    else {
      $query->condition('sid', $user_id);
    }
  }
  $query->condition('oid', $order);
  $result = $query->execute();
  foreach ($result as $row) {
    $param = str_replace('_', '-', $row->machine_name);

    $term = taxonomy_term_load($row->tid);

    // Название текущего параметра.
    $query = db_select('site_commerce_parametrs', 'n');
    $query->fields('n', array('name'));
    $query->condition('machine_name', $row->machine_name);
    $row->name = $query->execute()->fetchField();

    // Путь к изображению категории по умолчанию.
    $uri = site_commerce_default_term_image_uri($term->tid);
    if ($uri && $view_image) {
      // Вывод фотоизображения.
      $variables = array(
        'style_name' => $style_name,
        'image_path' => $uri,
        'attributes' => array('class' => array('site-commerce-select-category-image')),
      );
      $row->image =  theme('kvantstudio_image', $variables);
    }
    else {
      $row->image = '';
    }

    // Стоимость параметра.
    $cost = 0;
    $currency = '';
    if ($row->cost <> '0.00') {
      $cost = round($row->cost, 2);
      $currency = variable_get('site_commerce_default_currency');
    }

    $link_edit = "";
    $link_delete = "";
    if (!$is_cart) {
      $parametr_id = str_replace('_', '-', $row->machine_name);
      $link_edit = l(t('Change'), 'site-commerce-select/' . $pid . '/' . $parametr_id . '/nojs', array('html' => TRUE, 'attributes' => array(
        'class' => array('use-ajax'),
      )));
      $link_delete = l(t('Delete'), 'site-commerce-parametr-delete/' . $row->cpid . '/' . $pid . '/nojs', array('html' => TRUE, 'attributes' => array(
        'class' => array('use-ajax'),
      )));
    }

    $output .= theme('site_commerce_selected_parametr', array(
      'cpid' => $row->cpid,
      'parametr_name' => kvantstudio_string_correct(t($row->name)),
      'parametr_value' => t('@value', array('@value' => $term->name)),
      'parametr_cost' => $cost,
      'parametr_currency' => $currency,
      'parametr_image' => $row->image,
      'parametr_link_edit' => $link_edit,
      'parametr_link_delete' => $link_delete,
      'parametr_is_cart' => $is_cart,
    ));
  }

  return $output;
}

/**
 * Сохранение любого параметра позиции.
 */
function site_commerce_update_position($pid, $value, $key) {
  // Проверка переменных.
  if (!is_numeric($pid)) {
    return FALSE;
  }
  $site_commerce = site_commerce_load($pid);

  // Выполняем изменения.
  $site_commerce->$key = $value;

  site_commerce_save($site_commerce);
}

/**
 * Путь к изображению термина по умолчанию.
   Определяем какое изображение использовать, глобальное для поля или конкретной сущности.
 */
function site_commerce_default_term_image_uri($tid) {
  $uri = NULL;
  $field = field_info_field('field_site_commerce_image');
  $default_image_field_fid = $field['settings']['default_image'];

  $term = taxonomy_term_load($tid);
  $vocabulary = taxonomy_vocabulary_load($term->vid);
  $bundle_name = $vocabulary->machine_name;

  $instance = field_info_instance('taxonomy_term', 'field_site_commerce_image', $bundle_name);
  $default_image_instance_fid = $instance['settings']['default_image'];

  if ($default_image_field_fid) {
    $default_fid = $default_image_field_fid;
  }
  else if ($default_image_instance_fid) {
    $default_fid = $default_image_instance_fid;
  }
  else {
    $default_fid = 0;
  }
  $file = file_load($default_fid);
  if (is_object($file)) {
    $default_image_uri = $file->uri;
  }
  else {
    $default_image_uri = NULL;
  }

  $term = taxonomy_term_load($tid);

  if (isset($term->field_site_commerce_image['und'][0]['uri'])) {
    $uri = $term->field_site_commerce_image['und'][0]['uri'];
  }
  else if ($default_image_uri) {
    $uri = $default_image_uri;
  }

  return $uri;
}

/**
 * Путь к изображению позиции по умолчанию.
   Определяем какое изображение использовать, глобальное для поля или конкретной сущности.
 */
function site_commerce_default_position_image_uri($pid) {
  // Загружаем информацию о позиции.
  if (is_numeric($pid)) {
    $position = site_commerce_position_load($pid);
  }
  if (is_object($pid)) {
    $position = $pid;
  }

  $uri = NULL;

  $field = field_info_field('field_site_commerce_image');
  $default_image_field_fid = $field['settings']['default_image'];

  $instance = field_info_instance('site_commerce', 'field_site_commerce_image', $position->type);
  $default_image_instance_fid = $instance['settings']['default_image'];

  if ($default_image_field_fid) {
    $default_fid = $default_image_field_fid;
  }
  else if ($default_image_instance_fid) {
    $default_fid = $default_image_instance_fid;
  }
  else {
    $default_fid = 0;
  }
  $file = file_load($default_fid);
  if (is_object($file)) {
    $default_image_uri = $file->uri;
  }
  else {
    $default_image_uri = NULL;
  }

  $uri = $default_image_uri;

  if ($position->field_site_commerce_image['uri']) {
    $uri = $position->field_site_commerce_image['uri'];
  }

  return $uri;
}

/**
 * Проверяет разрешено ли отображать позицию в каталоге и при поиске.
   В качестве параметра передается статус позиции.
 */
function site_commerce_view_position_in_catalog($status) {
    if (user_access('administer site commerce products')) {
      return TRUE;
    }
    $allow_view_statuses = variable_get('site_commerce_catalog_allow_statuses', site_commerce_position_status());
    if (in_array($status, $allow_view_statuses)) {
      return TRUE;
    }
    return FALSE;
}

/**
 * Отображение корневого каталога товаров по умолчанию.
 * Если создан один тип товара (базовый) для загрузки каталога будет вызвана функция site_commerce_catalog_load.
 * Если создано несколько типов товаров, то выводиться страница
 * для выбора типа товаров. При клике на тип товара, каталог загружается
 * функцией site_commerce_catalog_type().
 */
function site_commerce_catalog() {
  $output = '';

  // Выполняем проверку на наличие категорий в каталоге.
  if (!site_commerce_count_categories() && user_access('administer site commerce products')) {
    return site_commerce_count_categories(TRUE);
  }

  // Получаем типы товаров.
  $site_commerce_types = site_commerce_type_get_types(TRUE);
  if (count($site_commerce_types) == 1) {
    foreach ($site_commerce_types as $type) {
      $function = $type->module . '_catalog_load';
      $output .= call_user_func($function, $type->categories_vocabulary);
    }
  }
  // Если несколько типов товаров. Выводим ссылку для доступа к каталогу по каждому типу товаров.
  else {
    foreach ($site_commerce_types as $type) {
      $type->path = str_replace('_', '-', $type->path);
      $output .= '<div class="site-commerce-catalog-type">' . l(t($type->name), variable_get('site_commerce_catalog_link', 'tovary') . '/' . $type->path) . '</div>';
    }
  }

  return $output;
}

/**
 * Отображение каталога товаров, если необходимо отобразить его
 * по определенному типу товара - словарю.
 */
function site_commerce_catalog_type($name) {
  // Загружаем тип товара.
  $type = site_commerce_type_load($name);

  // Формируем breadcrumb ссылки.
  $breadcrumb = drupal_get_breadcrumb();
  $count_breadcrumb = 2;
  $title = '<span itemprop="name">' . variable_get('site_commerce_catalog_title', 'Online store') . '</span><meta itemprop="position" content="' . $count_breadcrumb . '" />';
  $breadcrumb[] = l($title, variable_get('site_commerce_catalog_link', 'tovary'), array('html' => TRUE, 'attributes' => array('itemprop' => 'item')));
  drupal_set_breadcrumb($breadcrumb);

  // Выполняем если существует функция, которая формирует представление каталога.
  // для данного типа товара. Функция должна быть реализована в виде
  // отдельного модуля и должна иметь название
  // $type->module . '_catalog_load', где $type->module - имя
  // модуля реализующего функцию.
  // Если функция не будет найдена, пытаемся сформировать каталог стандартной функцией.
  $function = $type->module . '_catalog_load';
  $output = '';
  if (function_exists($function)) {
    $output = call_user_func($function, $type->categories_vocabulary);
  }
  else {
    $output = site_commerce_catalog_load($type->categories_vocabulary);
  }

  return $output;
}

/**
 * Отображение корневого каталога товаров по умолчанию для выбранного словаря.
 * (int) $vid - номер словаря по которому строится каталог. По умолчанию загружаются
 * позиции словаря "site_commerce_categories".
 */
function site_commerce_catalog_load($vid = NULL) {
  // Определяем словарь по умолчанию.
  if (!$vid) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_categories');
    $vid = $vocabulary->vid;
  }

  // Темизация вывода каталога в шаблон.
  $output = theme('site_commerce_catalog', array('vid' => $vid));
  return $output;
}

/**
 * Process variables for site-commerce-catalog.tpl.php.
 * @see site-commerce-catalog.tpl.php.
 */
function template_preprocess_site_commerce_catalog(&$variables) {
  $vid = $variables['vid'];

  // Статусы, для которых разрешено отображать позицию.
  $allow_view_statuses = variable_get('site_commerce_catalog_allow_statuses', site_commerce_position_status());

  // Тип сортировки.
  if (variable_get('site_commerce_catalog_sort_type', FALSE)) {
    $type_sort = 't.weight';
  }
  else {
    $type_sort = 't.name';
  }

  // Выбираем категории корневого уровня.
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
  $query->addField('t', 'tid');
  $query->condition('t.vid', $vid);
  $query->condition('h.parent', 0);
  $query->addTag('term_access');
  $query->orderBy($type_sort);
  $result = $query->execute();

  $variables['terms'] = array();

  if ($result) {
    // Дата и время последнего обновления товаров в каталоге.
    $variables['changed'] = '';
    if (variable_get('site_commerce_allow_date_and_time', FALSE)) {
      $date = db_query('SELECT MAX(changed) FROM {site_commerce}')->fetchField();
      $variables['changed'] = format_date($date, 'short');
    }

    foreach ($result as $row) {
      $term = taxonomy_term_load($row->tid);

      // Если разрешено отображать количество позиций в категории каталога.
      $term->count = 0;
      $count_positions = site_commerce_count_positions($term->tid, $allow_view_statuses, SITE_COMMERCE_PUBLISHED, TRUE, TRUE);
      if (variable_get('site_commerce_allow_count_main_catalog', FALSE)) {
        $term->count = $count_positions;
      }

      if (variable_get('site_commerce_allow_null_category', TRUE) || $count_positions) {
        // Определяем изображение категории.
        $term->image_url = '';
        $term->image_style_url = '';
        if (variable_get('site_commerce_catalog_images', TRUE)) {
          $style_name = variable_get('site_commerce_imagecache_taxonomy', 'sc_taxonomy');
          if ($uri = site_commerce_default_term_image_uri($term->tid)) {
            $term->image_url = file_create_url($uri);
            $term->image_style_url = image_style_url($style_name, $uri);
          }
        }

        // Термин корневой категории.
        $variables['terms'][$term->tid]['root'] = $term;

        // Формируем дочерние категории.
        $variables['terms'][$term->tid]['childrens'] = array();
        if (variable_get('site_commerce_allow_view_subcategories', TRUE)) {
          $tree = taxonomy_get_tree($vid, $row->tid, 1, TRUE);

          foreach ($tree as $term_children) {
            // Количество позиций у текущей дочерней категории.
            $count_positions = site_commerce_count_positions($term_children->tid, $allow_view_statuses, SITE_COMMERCE_PUBLISHED, TRUE, TRUE);

            // Если разрешено отображать количество позиций в категории каталога.
            $term_children->count = 0;
            if (variable_get('site_commerce_allow_count_catalog', FALSE)) {
              $term_children->count = $count_positions;
            }

            if (variable_get('site_commerce_allow_null_category', TRUE) || $count_positions) {
              // Определяем изображение категории.
              $term_children->image_url = '';
              $term_children->image_style_url = '';
              if (variable_get('site_commerce_catalog_images', TRUE)) {
                $style_name = 'sc_children_image';
                if ($uri = site_commerce_default_term_image_uri($term_children->tid)) {
                  $term_children->image_url = file_create_url($uri);
                  $term_children->image_style_url = image_style_url($style_name, $uri);
                }
              }
              $variables['terms'][$term->tid]['childrens'][$term_children->tid] = $term_children;
            }
          }
        }
      }
    }
  }
}

/**
 * Callback функция формирования страницы категории каталога.
 * $term: The taxonomy term.
 */
function site_commerce_term_page($term) {
  // Проверяем есть ли позиции для вывода в категории.
  // Если позиций нет выполняем редирект на главную страницу каталога.
  // Статусы, для которых разрешено отображать позицию.
  $allow_view_statuses = variable_get('site_commerce_catalog_allow_statuses', site_commerce_position_status());

//  $count_positions = site_commerce_count_positions($term->tid, $allow_view_statuses, SITE_COMMERCE_PUBLISHED, TRUE, TRUE);
//  if (!$count_positions) {
//    drupal_goto(variable_get('site_commerce_catalog_link', 'tovary'));
//  }

  // Устанавливаем заголовок страницы.
  drupal_set_title($term->name);

  // Формируем алиас термина.
  $parents = array_reverse(taxonomy_get_parents_all($term->tid));
  if (empty($term->alias)) {
    $term->alias = 'taxonomy/term/' . $term->tid;
  }

  // Формируем breadcrumb ссылки.
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(variable_get('site_commerce_catalog_title', 'Online store'), variable_get('site_commerce_catalog_link', 'tovary'));
  $site_commerce_types = site_commerce_type_get_types(TRUE);
  if (count($site_commerce_types) > 1) {
    $type = site_commerce_taxonomy_get_type($term->tid);
    $breadcrumb[] = l($type->name, variable_get('site_commerce_catalog_link', 'tovary') . '/' . $type->path);
  }
  while (count($parents) - 1) {
    $current = array_shift($parents);
    $alias = db_query("SELECT n.alias FROM {url_alias} n WHERE n.source=:source", array(':source' => 'taxonomy/term/' . $current->tid))->fetchField();
    $breadcrumb[] = l($current->name, $alias);
  }
  drupal_set_breadcrumb($breadcrumb);
  drupal_add_feed('taxonomy/term/' . $term->tid . '/feed', 'RSS - ' . $term->name);

  $output = '';

  // Позволяем модулям изменить структуру taxonomy term.
  $build = array(
    '#term' => $term,
  );
  $type = 'taxonomy_term';
  drupal_alter(array('taxonomy_term_view', 'entity_view'), $build, $type);

  // Вывод описания категории.
  if ($term->description) {
    $output .= $term->description;
  }

  // Форма поиска.
  if (variable_get('site_commerce_search_form', FALSE)) {
    $output .= site_commerce_create_search_form('site_commerce');
  }

  // Вывод подкатегорий.
  $output .= theme('site_commerce_subcategories', array('tid' => $term->tid));

  // Форма сортировки позиций.
  if (variable_get('site_commerce_allow_sort', TRUE)) {
    // Определяем есть ли новинки позиций у текущей категории.
    $novelties = db_query("SELECT COUNT(*) FROM {site_commerce} n WHERE n.tid = :tid AND n.sticky = :sticky", array(':tid' => $term->tid, ':sticky' => 1))->fetchField();

    // Определяем количество позиций в категории.
    // Если в текущей категории есть позиции, заносим ее в массив.
    $count_positions_in_tid = db_query("SELECT COUNT(n.pid) FROM {site_commerce_taxonomy_index} n WHERE n.tid = :tid", array(':tid' => $term->tid))->fetchField();
    if ($count_positions_in_tid) {
      $output .= theme('site_commerce_sort', array('title' => t('@value', array('@value' => $term->name)), 'tid' => $term->tid, 'novelties' => $novelties));
    }
  }

  // Перечень позиций каталога для отображения.
  $variables = site_commerce_get_pids_by_term($term->tid);

  $output .= theme('site_commerce_term', array('pids' => $variables['pids'], 'total' => $variables['total']));

  return $output;
}

/**
 * Callback функция формирования страницы новинок каталога.
 * @param
 * (int) $tid - номер категории каталога для вывода. Если = 0, будут выведены все новинки по всем категориям.
 */
function site_commerce_catalog_novelties($tid = 0) {
  $output = '';

  // Формируем breadcrumb ссылки.
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(site_commerce_catalog_title_callback(), variable_get('site_commerce_catalog_link', 'tovary'));
  drupal_set_breadcrumb($breadcrumb);

  // Устанавливаем заголовок страницы.
  $title = t('Novelties');
  drupal_set_title($title);

  // Форма поиска.
  if (variable_get('site_commerce_search_form', FALSE)) {
    $form = drupal_get_form('site_commerce_search_form');
    $output .= drupal_render($form);
  }

  // Определяем количество позиций в категории определенного спецпредложения.
  // Если в текущей категории есть позиции, заносим ее в массив.
  if ($tid) {
    if (!is_numeric($tid)) {
      drupal_goto('<front>');
    }
    $count_positions_in_tid = db_query("SELECT COUNT(*) FROM {site_commerce} n WHERE n.tid = :tid AND n.sticky = :sticky", array(':tid' => $tid, ':sticky' => TRUE))->fetchField();
  }
  else {
    // Определяем есть ли новинки.
    $count_positions_in_none_tid = db_query("SELECT COUNT(*) FROM {site_commerce} n WHERE n.sticky = :sticky", array(':sticky' => TRUE))->fetchField();
  }
  // Форма сортировки позиций.
  if (variable_get('site_commerce_allow_sort', TRUE)) {
    if ($tid && $count_positions_in_tid) {
      $output .= theme('site_commerce_sort', array('title' => $title, 'novelties' => FALSE));
    }
    if (!$tid && $count_positions_in_none_tid) {
      $output .= theme('site_commerce_sort', array('title' => $title, 'novelties' => FALSE));
    }
  }

  // Перечень позиций каталога для отображения.
  $variables = site_commerce_get_pids_by_term($tid, TRUE);

  $output = theme('site_commerce_term', array('pids' => $variables['pids'], 'total' => $variables['total']));

  return $output;
}

/**
 * Перечень позиций по категории - номеру термина словаря.
 * @param
 * (int) $tid - номер категории каталога, спецпредложения для вывода.
 * (bool) $sticky - параметр отображения только товаров со статусом новинка.
 * (bool) $special_offers - параметр отображения только товаров, которые входят в спецпредложение.
 */
function site_commerce_get_pids_by_term($tid, $sticky = 0, $special_offers = 0) {
  $array_tid = array();

  $pids = array();

  if ($tid && is_numeric($tid)) {
    $result = db_query("SELECT COUNT(*) FROM {taxonomy_term_data} n WHERE n.tid = :tid", array(':tid' => $tid))->fetchField();
    if (!$result) {
      drupal_goto('<front>');
    }
  }

  //----------------------------------------------------------------------------
  // Определяем термины товаров.
  //----------------------------------------------------------------------------
  if ($sticky && $tid) {
    // Определяем есть ли новинки в выбраной категории.
    $count_sticky = db_query("SELECT COUNT(*) FROM {site_commerce} n WHERE n.tid = :tid AND n.sticky = :sticky", array(':tid' => $tid, ':sticky' => 1))->fetchField();
    if ($count_sticky) {
      $array_tid = array($tid);
    }
  }
  else if (!$sticky && $tid) {
    // Определяем количество позиций в категории.
    // Если в текущей категории есть позиции, заносим ее в массив.
    $count_positions_in_tid = db_query("SELECT COUNT(n.pid) FROM {site_commerce_taxonomy_index} n WHERE n.tid = :tid", array(':tid' => $tid))->fetchField();
    if ($count_positions_in_tid) {
      $array_tid = array($tid);
    }
    // Если разрешено отображать позиции подкатегорий.
    // Определяем имеются ли дочерние элементы у текущей категории.
    if (variable_get('site_commerce_allow_view_positions_subcategories', TRUE)) {
      $count_children = db_query("SELECT COUNT(*) FROM {taxonomy_term_hierarchy} n WHERE n.parent = :parent", array(':parent' => $tid))->fetchField();
      if ($count_children) {
        $result = kvantstudio_taxonomy_get_children_all($tid);
        foreach ($result as $key) {
          $array_tid[] = $key->tid;
        }
      }
    }
  }

  //----------------------------------------------------------------------------
  // Определяем термины спецпредложений.
  //----------------------------------------------------------------------------
  if ($special_offers) {
    if ($tid) {
      $term = taxonomy_term_load($tid);
      $term_status = kvantstudio_field_value('taxonomy_term', $term, 'field_site_commerce_so_type', 0);
      if ($term_status) {
        // Определяем количество позиций в категории определенного спецпредложения.
        // Если в текущей категории есть позиции, заносим ее в массив.
        $count_positions_in_tid = db_query("SELECT COUNT(n.pid) FROM {site_commerce_taxonomy_index} n WHERE n.tid = :tid", array(':tid' => $tid))->fetchField();
        if ($count_positions_in_tid) {
          $array_tid = array($tid);
        }
      }
    }
    else {
      $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_special_offers_vocabulary');
      $tree = taxonomy_get_tree($vocabulary->vid);
      foreach ($tree as $tree_term) {
        $term = taxonomy_term_load($tree_term->tid);
        $term_status = kvantstudio_field_value('taxonomy_term', $term, 'field_site_commerce_so_type', 0);
        if ($term_status) {
          // Определяем количество позиций в категории определенного спецпредложения.
          // Если в текущей категории есть позиции, заносим ее в массив.
          $count_positions_in_tid = db_query("SELECT COUNT(n.pid) FROM {site_commerce_taxonomy_index} n WHERE n.tid = :tid", array(':tid' => $term->tid))->fetchField();
          if ($count_positions_in_tid) {
            $array_tid[] = $term->tid;
          }
        }
      }
    }
  }

  // Если есть категории для вывода.
  $variables = array(
    'pids' => array(),
    'total' => 0,
  );
  if (count($array_tid) || $sticky) {
    // Выполняем проверку запроса сортировки.
    if (isset($_GET['sort']) && isset($_GET['order'])) {
      // Параметр сортировки по возрастанию или убыванию.
      if ($_GET['sort'] == 'asc') {
        $sort = 'ASC';
      }
      else {
        $sort = 'DESC';
      }

      // Колонки таблицы, которые будут отсортированны.
      switch ($_GET['order']) {
        case t('Title'):
          $order = 'title';
          break;
        case t('Cost'):
          $order = 'field_site_commerce_cost_value';
          break;
        case 'sticky':
          $order = 'sticky';
          break;
        default:
          $order = 'pid';
      }
    }
    else {
      // Сортировка по умолчанию.
      $sort = 'DESC';
      $order = 'n.status = 10';
    }

    // Выбираем таблицу.
    $query = db_select('site_commerce', 'n');
    // Выбираем поля и условия.
    $query->fields('n', array('pid', 'status', 'title', 'type_sale'));
    if ($sticky && !$tid) {
      $query->condition('n.sticky', TRUE);
    }
    else if ($sticky && $tid) {
      $query->condition('n.sticky', TRUE);
      $query->innerJoin('site_commerce_taxonomy_index', 't', 'n.pid = t.pid');
      $query->condition('t.tid', $array_tid, 'IN');
    }
    else {
      $query->innerJoin('site_commerce_taxonomy_index', 't', 'n.pid = t.pid');
      $query->condition('t.tid', $array_tid, 'IN');
    }
    // Связываем таблицы.
    $query->innerJoin('field_data_field_site_commerce_cost', 'f', 'n.pid = f.entity_id');
    $query->fields('f', array('field_site_commerce_cost_value'));
    $query->condition('f.entity_type', 'site_commerce');
    if (!user_access('administer site commerce products')) {
      $query->condition('n.disabled', 0);
    }
    // Запрещаем отображение позиций с типом продажи не отображать в каталоге.
    // Но для спецпредложений проверку опускаем.
    if (!$special_offers) {
      $query->condition('n.type_sale', 3, '<>');
    }

    // Подсчитываем количество возвращаемых товаров.
    $total = $query->countQuery()->execute()->fetchField();

    // Сортировать по.
    $query->orderBy($order, $sort);
    $query->orderBy('n.title', 'ASC');

    // Для нумерации страниц.
    if (variable_get('site_commerce_allow_pager', TRUE)) {
      $query = $query->extend('TableSort')->extend('PagerDefault')->limit(variable_get('site_commerce_num_per_page', 20));
    }
    $result = $query->execute();

    foreach ($result as $row) {
      // Проверяем разрешено ли отображать позицию при текущем статусе.
      if (site_commerce_view_position_in_catalog($row->status)) {
        $pids[] = $row->pid;
      }
    }

    $variables = array(
      'pids' => $pids,
      'total' => $total,
    );

  }

  return $variables;
}

/**
* Implementation of hook_flush_caches().
*/
function site_commerce_flush_caches() {
  return array('cache_site_commerce');
}

/**
 * Перечень стилей изображений.
 * @return
 *   $styles - массив с перечнем стилей изображений.
 */
function site_commerce_select_imagecache_presets() {
  $result = db_query("SELECT n.name FROM {image_styles} n");
  $styles = array(
    '0' => t('It is not chosen'),
    'thumbnail' => 'thumbnail',
    'medium' => 'medium',
    'large' => 'large',
    'sc_taxonomy' => 'sc_taxonomy',
    'sc_taxonomy_block' => 'sc_taxonomy_block',
    'sc_taxonomy_term' => 'sc_taxonomy_term',
    'sc_subtaxonomy' => 'sc_subtaxonomy',
    'sc_first' => 'sc_first',
    'sc_thumbnail' => 'sc_thumbnail',
    'sc_select' => 'sc_select',
    'sc_select_card' => 'sc_select_card',
    'sc_full' => 'sc_full',
    'sc_block' => 'sc_block',
    'sc_parametr_cart' => 'sc_parametr_cart',
  );
  foreach ($result as $row) {
    $styles[$row->name] = $row->name;
  }
  return $styles;
}

/**
 * Перечень комплектов товаров.
 * @return
 *   $styles - массив с названиями комплектов.
 */
function site_commerce_get_packages() {
  $result = db_query("SELECT n.pid, n.title FROM {site_commerce} n WHERE n.type_sale = 4 OR n.type_sale = 5");
  $output = array('0' => t('It is not chosen'));
  foreach ($result as $row) {
    $output[$row->pid] = $row->title;
  }
  return $output;
}

/**
 * Идентификатор комплекта, к которому принадлежит товар.
 * @return
 *   $pid - идентификатор товара.
 */
function site_commerce_get_pid_package($rpid) {
  $pid = db_query("SELECT n.pid FROM {site_commerce_position_index} n WHERE n.rpid = :rpid", array(':rpid' => $rpid))->fetchField();
  return $pid;
}

/**
 * Implements hook_forms().
 */
function site_commerce_forms() {
  $forms = array();
  $forms['site_commerce_search_form'] = array(
    'callback' => 'site_commerce_search_form',
  );
  $forms['site_commerce_header_search_form'] = array(
    'callback' => 'site_commerce_search_form',
  );
  return $forms;
}

/**
 * Регистрация словаря в качестве параметра товара.
 * @param
 *   $vid - идентификатор словаря.
  *  $name - название параметра. Если не указано будет использовано название словаря.
 */
function site_commerce_create_parametr_by_vid($vid, $name = "") {
  $vocabulary = taxonomy_vocabulary_load($vid);
  if ($vocabulary) {
    $result = db_query("SELECT COUNT(*) FROM {site_commerce_parametrs} n WHERE n.vid = :vid", array(':vid' => $vocabulary->vid))->fetchField();
    if ($result) {
      if ($result > 1) {
        $result++;
      }
      $vocabulary->machine_name = $vocabulary->machine_name . "_" . $result;
    }
    if (!$name) {
      $name = $vocabulary->name;
    }
    $record = array (
      "vid" => $vocabulary->vid,
      "name" => $name,
      "machine_name" => $vocabulary->machine_name,
    );
    drupal_write_record ('site_commerce_parametrs', $record);
  }
}

/**
 * Отключает видимость всех позиций.
 */
function site_commerce_reset() {
  db_update('site_commerce')
    ->fields(array('disabled' => 1))
    ->condition('type', 'site_commerce_basic')
    ->execute();
}

/**
 * Implements hook_views_api().
 */
function site_commerce_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'site_commerce') . '/views',
  );
}

/**
 * Подготовливает стоимость для импорта.
 */
function site_commerce_import_prepare_cost($cost) {
  $cost = str_replace(',', '', $cost);
  $cost = str_replace(' ', '', $cost);
  return trim($cost);
}

/**
 * Implements hook_schema_alter().
 */
function site_commerce_schema_alter(&$schema) {
  $schema ['field_data_field_special_offer']['fields']['view_block'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Определяет видимость товара в блоке',
  );
}

/**
 * Implements hook_pathauto().
 */
function site_commerce_pathauto($op) {
  if ($op == 'settings') {
    $settings = array(
      'module' => 'site_commerce',
      'groupheader' => t('Online store site commerce paths'),
      'patterndescr' => t('Default path pattern (applies to all site_commerces with blank patterns below)'),
      'patterndefault' => '[site_commerce:product-path]',
      'token_type' => 'site_commerce',
      'patternitems' => array(), // В этом массиве хранятся настройки для кажого бандла, их мы добавим ниже.
      'batch_update_callback' => 'site_commerce_bulk_update_batch_process', // Функция, которая будет срабатывать при массиовом обновлении альясов.
      //'batch_file' => drupal_get_path('module', 'site_commerce') . '/site_commerce.pathauto.inc', // Путь к файлу, в котором хранится функция.
    );

    // Получаем информацию о нашей сущности и делаем возможность настроить шаблон для каждого бандла в отдельности.
    $entity_info = entity_get_info('site_commerce');
    foreach ($entity_info['bundles'] as $bundle_id => $bundle) {
      $settings['patternitems'][$bundle_id] = t('Pattern for all @label paths', array('@label' => $bundle['label']));
    }

    return (object) $settings;
  }
}

/**
 * Implements hook_path_alias_types().
 */
function site_commerce_path_alias_types() {
  $objects['site-commerce/'] = t('Products');
  return $objects;
}

/**
 * Update the URL aliases for an individual site_commerce.
 *
 * @param $site_commerce
 *   A site_commerce object.
 * @param $op
 *   Operation being performed on the site_commerce ('insert', 'update' or 'bulkupdate').
 */
function site_commerce_update_alias(stdClass $site_commerce, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the site_commerce.
  if (isset($site_commerce->path['pathauto']) && empty($site_commerce->path['pathauto'])) {
    return;
  }

  $options += array('language' => pathauto_entity_language('site_commerce', $site_commerce));

  // Skip processing if the site_commerce has no pattern.
  if (!pathauto_pattern_load_by_entity('site_commerce', $site_commerce->type, $options['language'])) {
    return;
  }

  $uri = site_commerce_uri($site_commerce);
  module_load_include('inc', 'pathauto');
  pathauto_create_alias('site_commerce', $op, $uri['path'], array('site_commerce' => $site_commerce), $site_commerce->type, $options['language']);
}

/**
 * Update the URL aliases for multiple site_commerces.
 *
 * @param $ids
 *   An array of site_commerce IDs.
 * @param $op
 *   Operation being performed on the site_commerces ('insert', 'update' or
 *   'bulkupdate').
 */
function site_commerce_update_alias_multiple($pids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $site_commerces = site_commerce_load_multiple($pids);
  foreach ($site_commerces as $site_commerce) {
    site_commerce_update_alias($site_commerce, $op, $options);
  }
  drupal_set_message(format_plural(count($pids), 'Updated URL alias for 1 product.', 'Updated URL aliases for @count products.'));
}

/**
 * Batch processing callback; Generate aliases for site_commerces.
 */
function site_commerce_bulk_update_batch_process(&$context) {
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }

  $query = db_select('site_commerce', 'n');
  $query->leftJoin('url_alias', 'ua', "CONCAT('site_commerce/', n.pid) = ua.source");
  $query->addField('n', 'pid');
  $query->isNull('ua.source');
  $query->condition('n.pid', $context['sandbox']['current'], '>');
  $query->orderBy('n.pid');
  $query->addTag('pathauto_bulk_update');
  $query->addMetaData('entity', 'site_commerce');

  // Получаем количество продуктов для обработки.
  if (!isset($context['sandbox']['total'])) {
    $context['sandbox']['total'] = $query->countQuery()->execute()->fetchField();

    // Если нет продуктов для обработки, то тут же завершаем работу.
    if (!$context['sandbox']['total']) {
      $context['finished'] = 1;
      return;
    }
  }
  $query->range(0, 25);
  $pids = $query->execute()->fetchCol();

  site_commerce_update_alias_multiple($pids, 'bulkupdate');

  $context['sandbox']['count'] += count($pids);
  $context['sandbox']['current'] = max($pids);
  $context['message'] = t('Updated alias for site_commerce @pid.', array('@pid' => end($pids)));

  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}

/**
 * Implements hook_entity_insert().
 */
function site_commerce_entity_insert($entity, $type) {
  if ($type == 'site_commerce') {
    site_commerce_update_alias($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function site_commerce_entity_update($entity, $type) {
  if ($type == 'site_commerce') {
    site_commerce_update_alias($entity, 'update');
  }
}

/**
 * Implements hook_entity_delete().
 */
function site_commerce_entity_delete($entity, $type) {
  if ($type == 'site_commerce') {
    $uri = site_commerce_uri($entity);
    pathauto_entity_path_delete_all('site_commerce', $entity, $uri['path']);
  }
}

/**
 * Создаёт путь для токена [site_commerce:product-path].
 */
function site_commerce_product_path($site_commerce) {
  module_load_include('inc', 'pathauto');

  // Определяем разрешено ли создавать путь с учетом названия категории.
  if (variable_get('site_commerce_full_path', TRUE)) {
    $term = taxonomy_term_load($site_commerce->tid);

    // Let modules modify the site commerce before it is saved to the database.
    module_invoke_all('site_commerce_title', $site_commerce);

    $path = $term->alias . '/' . pathauto_cleanstring($site_commerce->title);
  }
  else {
    $site_commerce_catalog_path = pathauto_cleanstring(variable_get('site_commerce_catalog_link', 'tovary'));
    $path = $site_commerce_catalog_path . '/' . $site_commerce->pid;
  }
  return $path;
}

/**
 * Создаёт путь для токена [site_commerce:category-path].
 */
function site_commerce_category_path($term) {
  module_load_include('inc', 'pathauto');

  $path = "";

  // Корневой путь.
  if (variable_get('site_commerce_allow_catalog_link', TRUE)) {
    $path .= pathauto_cleanstring(variable_get('site_commerce_catalog_link', 'tovary'));
  }

  // Если в системе зарегистрировано более одного типа товаров.
  $site_commerce_types = site_commerce_type_get_types(TRUE);
  if (count($site_commerce_types) > 1) {
    $type = site_commerce_taxonomy_get_type($term->tid);
    if ($path) {
      $path .= '/' . pathauto_cleanstring($type->name);
    }
    else {
      $path .= pathauto_cleanstring($type->name);
    }
  }

  $parents = array_reverse(taxonomy_get_parents_all($term->tid));
  if (count($parents)) {
    while (count($parents) - 1) {
      $current = array_shift($parents);
      if ($path) {
        $path .= '/' . pathauto_cleanstring($current->name);
      }
      else {
        $path .= pathauto_cleanstring($current->name);
      }
    }
  }
  $path .= '/' . pathauto_cleanstring($term->name);

  return $path;
}

/**
 * Создает массив доступных для импорта ключей-полей в БД.
 */
function site_commerce_import_keys_fields() {
  $keys_fields = array(
    'pid' => t('Product Id table site_commerce'),
    'code' => t('Part number'),
  );

  $keys_fields += module_invoke_all('site_commerce_import_keys_fields', $keys_fields);

  return $keys_fields;
}