<?php

/**
 * @file
 * Файл установки, обновления, удаления модуля - site_commerce_special_offers.
 */

/**
 * Implements hook_install().
 */
function site_commerce_special_offers_install() {
  // Создаем словарь.
  _site_commerce_special_offers_create_vocabularies();

  // Первоначальная настройка параметров по умолчанию для многоязыковых переменных.
  _site_commerce_special_offers_default_translations();

  // Перестраиваем кэш меню.
  menu_rebuild();
}

/**
 * Функция: первоначальная настройка переводов по умолчанию для многоязыковых переменных.
 */
function _site_commerce_special_offers_default_translations() {
  // Инициализируем функцию перевода строк.
  $t = get_t();

  // Переменные - настройка спецпредложений.
  variable_set('site_commerce_special_offers_title', $t('Special offers'));
}

/**
 * Создание словаря.
 */
function _site_commerce_special_offers_create_vocabularies() {
  $t = get_t();

  // Создаем словарь для категорий фотоальбомов.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_special_offers_vocabulary');
  if (empty($vocabulary)) {
    $edit = array(
      'name' => $t('Special offers'),
      'machine_name' => 'site_commerce_special_offers_vocabulary',
      'description' => $t('The dictionary of special offers.'),
      'hierarchy' => 1,
      'module' => 'site_commerce_special_offers',
      'weight' => -10,
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
    variable_set('site_commerce_special_offers_vocabulary', $vocabulary->vid);
  }

  // Разрешаем модулям обновление базы данных.
  field_associate_fields('site_commerce_special_offers_vocabulary');

  // Создание полей.
  foreach (_site_commerce_special_offers_installed_taxonomy_fields() as $field) {
    $field_info = field_info_field($field['field_name']);
    if (!$field_info) {
      field_create_field($field);
    }
  }

  // Cоздаём экземпляр поля для изображения.
  foreach (_site_commerce_special_offers_installed_taxonomy_instances() as $instance) {
    $instance['entity_type'] = 'taxonomy_term';
    $instance['bundle'] = $vocabulary->machine_name;
    $field = field_info_field($instance['field_name']);
    $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
    if ($field && !$instance_info) {
      field_create_instance($instance);
    }
  }

  // Clear the field info and field data caches.
  field_cache_clear();
}

/**
 * Функция: массив полей.
 */
function _site_commerce_special_offers_installed_taxonomy_fields() {
  $t = get_t();
  $fields = array(
    'site_commerce_special_offers_taxonomy_status' => array(
      'field_name'  => 'field_site_commerce_so_status',
      'type' => 'list_text',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          '1' => $t('Show'),
          '0' => $t('To not show'),
        )
      ),
      'translatable' => FALSE,
    ),
    'site_commerce_special_offers_taxonomy_type' => array(
      'field_name'  => 'field_site_commerce_so_type',
      'type' => 'list_text',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          '1' => $t('Sale'),
          '2' => $t('The products at a discount'),
          '3' => $t('Discounted items'),
          '4' => $t('Reduction of cost'),
        )
      ),
      'translatable' => TRUE,
    ),
    'site_commerce_special_offers_taxonomy_discount' => array(
      'field_name'  => 'field_site_commerce_discount',
      'type'        => 'text',
      'cardinality' => 1,
      'settings'    => array(
        'max_length' => 3,
      ),
      'translatable' => FALSE,
    ),
  );
  return $fields;
}

/**
 * Функция: создание массива инстанций полей.
 */
function _site_commerce_special_offers_installed_taxonomy_instances() {
  $t = get_t();
  $instances = array(
    'site_commerce_special_offers_taxonomy_type' => array(
      'field_name' => 'field_site_commerce_so_type',
      'label' => $t('Type of a special offer'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select'
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'weight' => 1,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
        ),
      ),
    ),
    'site_commerce_special_offers_taxonomy_status' => array(
      'field_name' => 'field_site_commerce_so_status',
      'label' => $t('Status'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select'
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'weight' => 1,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
        ),
      ),
    ),
    'site_commerce_special_offers_taxonomy_discount' => array(
      'field_name' => 'field_site_commerce_discount',
      'label'       => $t('Discount'),
      'required' => TRUE,
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'default_value' => array(0 => array('value' => 0)),
    ),
    'site_commerce_special_offers_taxonomy_image' => array(
      'field_name' => 'field_image',
      'label' => $t('Image'),
      'required' => FALSE,
      'settings' => array(
        'file_directory' => 'pictures/site_commerce_special_offers',
        'file_extensions' => 'jpg gif png jpeg',
        'max_filesize' => '10 M',
        'max_resolution' => '1024x768',
        'alt_field' => TRUE,
        'title_field' => TRUE,
      ),
      'widget' => array('type' => 'image_image'),
      'display' => array(
        'default' => array(
          'type' => 'image',
        ),
      ),
    ),
  );
  return $instances;
}

/**
 * Implements hook_uninstall().
 */
function site_commerce_special_offers_uninstall() {
  // Помечаем каждое поле термина словаря и его образцы для удаления.
  foreach (array_keys(_site_commerce_special_offers_installed_taxonomy_fields()) as $field_name) {
    $field_name = 'field_' . $field_name;
    field_delete_field($field_name);
  }

  // Удаляем привязку поля изображения к терминам словаря.
  $instances = field_info_instances('taxonomy_term', 'site_commerce_special_offers_vocabulary');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Purge all field infromation.
  field_purge_batch(1000);

  //Перестраиваем меню.
  menu_rebuild();

  // Удаляем словарь.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_special_offers_vocabulary');
  if (isset($vocabulary->vid)) {
    taxonomy_vocabulary_delete($vocabulary->vid);
  }

  // Удаляем переменные модуля.
  db_delete('variable')
    ->condition('name', 'site_commerce_special_offers_%', 'LIKE')
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Update vocabulary name.
 */
function site_commerce_special_offers_update_7000() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_special_offers'));
  }

  // Обновляем название словарей, которые могут быть не переведены.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_special_offers_vocabulary');
  $vocabulary->name = t('Special offers');
  $vocabulary->description = t('The dictionary of special offers.');
  taxonomy_vocabulary_save($vocabulary);

  return 'Language site_commerce_special_offers_7000 updated. The name of vocabulary has been updated successfully.';
}

/**
 * Update db structure of special offers.
 */
function site_commerce_special_offers_update_7001() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_special_offers'));
  }

  // Обновляем настройки поля.
  $field = field_info_field('field_site_commerce_so_type');

  // The serialized 'data' column contains everything from $field that does not
  // have its own column and is not automatically populated when the field is
  // read.
  $data = $field;
  unset($data['bundles'], $data['columns'], $data['field_name'], $data['type'], $data['active'], $data['module'], $data['storage_type'], $data['storage_active'], $data['storage_module'], $data['locked'], $data['cardinality'], $data['deleted']);

  $data['settings']['allowed_values'] = array(
    '1' => t('Sale'),
    '2' => t('The products at a discount'),
    '3' => t('Discounted items'),
    '4' => t('Reduction of cost'),
  );

  $record = array(
    'field_name' => $field['field_name'],
    'type' => $field['type'],
    'module' => $field['module'],
    'active' => $field['active'],
    'storage_type' => $field['storage']['type'],
    'storage_module' => $field['storage']['module'],
    'storage_active' => $field['storage']['active'],
    'locked' => $field['locked'],
    'data' => serialize($data),
    'cardinality' => $field['cardinality'],
    'translatable' => $field['translatable'],
    'deleted' => $field['deleted'],
  );

  db_update('field_config')
  ->fields($record)
  ->condition('id', $field['id'], '=')
  ->execute();

  // Обновляем описание сущности.
  $instance = array();
  $instance['entity_type'] = 'taxonomy_term';
  $instance['bundle'] = 'site_commerce_special_offers_vocabulary';
  $instance['field_name'] = 'field_site_commerce_so_type';
  $instance = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);

  // The serialized 'data' column contains everything from $instance that does
  // not have its own column and is not automatically populated when the
  // instance is read.
  $data = $instance;
  unset($data['id'], $data['field_id'], $data['field_name'], $data['entity_type'], $data['bundle'], $data['deleted']);

  $data['label'] = t('Type of a special offer');

  $record = array(
    'field_id' => $instance['field_id'],
    'field_name' => $instance['field_name'],
    'entity_type' => $instance['entity_type'],
    'bundle' => $instance['bundle'],
    'data' => serialize($data),
    'deleted' => $instance['deleted'],
  );

  db_update('field_config_instance')
  ->fields($record)
  ->condition('id', $instance['id'], '=')
  ->execute();

  return 'Language site_commerce_special_offers_7001 updated. The db structure of special offers has been updated successfully.';
}

/**
 * Update vocabulary name. Fix errors.
 */
function site_commerce_special_offers_update_7002() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_special_offers'));
  }

  // Обновляем название словарей, которые могут быть не переведены.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_special_offers_vocabulary');
  $vocabulary->name = t('Special offers');
  $vocabulary->description = t('The dictionary of special offers.');
  taxonomy_vocabulary_save($vocabulary);

  return 'Language site_commerce_special_offers_7002 updated. The name of vocabulary has been updated successfully.';
}

/**
 * Language update.
 */
function site_commerce_special_offers_update_7003() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_special_offers'));
  }
  variable_del('site_commerce_special_offers_link');
}

/**
 * Language update.
 */
function site_commerce_special_offers_update_7004() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_special_offers'));
  }
  _site_commerce_special_offers_default_translations();
}