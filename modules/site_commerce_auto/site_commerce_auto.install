<?php

/**
 * @file
 * Файл установки, обновления, удаления модуля - site_commerce_auto.
 */

/**
 * Implements hook_install().
 */
function site_commerce_auto_install() {
  // Инициализируем функцию перевода строк.
  $t = get_t();

  // Создаем словари для модуля.
  _site_commerce_auto_create_vocabularies();

  // Создаем тип товара автозапчасти.
  $type_id = db_insert('site_commerce_type', array('return' => Database::RETURN_INSERT_ID))
  ->fields(array(
    'type' => 'site_commerce_auto',
    'name' => $t('Auto part'),
    'description' => $t('Type product, which is designed to create the directory auto parts and accessories.'),
    'module' => 'site_commerce_auto',
    'path' => 'auto',
  ))
  ->execute();

  // Allows a module to update the database for fields and columns it controls.
  field_associate_fields('site_commerce');

  // Создание полей, которые будут добавлены к типу товара автозапчасти.
  foreach (_site_commerce_auto_installed_fields() as $field) {
    $field_info = field_info_field($field['field_name']);
    if (!$field_info) {
      field_create_field($field);
    }
  }

  // Создание сущностей для полей типа товара по умолчанию.
  foreach (_site_commerce_auto_installed_instances() as $instance) {
    $instance['entity_type'] = 'site_commerce';
    $instance['bundle'] = 'site_commerce_auto';

    // Если тип поля существует, а экземпляр отсутствует.
    // Создаем экземпляр поля.
    $field = field_info_field($instance['field_name']);
    $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
    if ($field && !$instance_info) {
      field_create_instance($instance);
    }
  }

  // Добавляем экземляр поля Body.
  $types = site_commerce_type_get_types();
  site_commerce_add_body_field($types['site_commerce_auto'], $t('Body'));

  // Cоздаём экземпляры полей.
  foreach (_site_commerce_installed_taxonomy_instances() as $instance) {
    $instance['entity_type'] = 'taxonomy_term';
    $instance['bundle'] = 'site_commerce_auto_vocabulary';

    // Если тип поля существует, а экземпляр отсутствует.
    // Создаем экземпляр поля.
    $field = field_info_field($instance['field_name']);
    $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
    if ($field && !$instance_info) {
      field_create_instance($instance);
    }
  }
}

/**
 * Функция: создание словарей.
 */
function _site_commerce_auto_create_vocabularies() {
  $t = get_t();

  // Создаем словарь для категорий прайс-листа.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_auto_vocabulary');
  if (!$vocabulary) {
    $edit = array(
      'name' => $t('Categories of auto parts'),
      'machine_name' => 'site_commerce_auto_vocabulary',
      'description' => $t('The dictionary for accommodation of categories of auto parts.'),
      'hierarchy' => 1,
      'module' => 'site_commerce_auto',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);

    // Создаем категорию, которая будет установлена по умолчанию.
    $term = new stdClass();
    $term->vid = $vocabulary->vid;
    $term->name = $t('Other auto parts');
    $term->description = '';
    $term->format = 'filtered_html';
    $term->parent = array(0);
    taxonomy_term_save($term);
    variable_set('site_commerce_auto_default_term', $term->tid);
  }

  // Создаем словарь для марок и моделей автомобилей.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_auto_categories_cars');
  if (!$vocabulary) {
    $edit = array(
      'name' => $t('Marks and models of cars'),
      'machine_name' => 'site_commerce_auto_categories_cars',
      'hierarchy' => 1,
      'module' => 'site_commerce_auto',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
  }
}

/**
 * Implementation of hook_uninstall().
 */
function site_commerce_auto_uninstall() {
  // Помечаем каждое поле типа товаров «Автозапчасти» и его образцы для удаления.
  foreach (array_keys(_site_commerce_auto_installed_fields()) as $field_name) {
    $field_name = 'field_' . $field_name;
    field_delete_field($field_name);
  }

  // Удаляем поле для Body.
  $instance = field_info_instance('site_commerce', 'field_site_commerce_body', 'site_commerce_auto');
  field_delete_instance($instance);

  // Помечаем образцы полей и их данные для удаления.
  // @TODO: Доработать удаление в зависимости от типа товара.
  $instances = field_info_instances('site_commerce', 'site_commerce_auto');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Purge all field infromation.
  field_purge_batch(1000);

  // Clear the field info and field data caches.
  field_cache_clear();

  //Перестраиваем меню.
  menu_rebuild();

  // Удаляем тип материала.
  if (function_exists('site_commerce_type_delete')) {
    site_commerce_type_delete('site_commerce_auto');
  }

  // Удаляем все товары тип «Автозапчасти».
  db_delete('site_commerce')
    ->condition('type', 'site_commerce_auto')
    ->execute();

  // Удаляем словари.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_auto_vocabulary');
  if (isset($vocabulary->vid)) {
    taxonomy_vocabulary_delete($vocabulary->vid);
  }

  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_auto_categories_cars');
  if (isset($vocabulary->vid)) {
    taxonomy_vocabulary_delete($vocabulary->vid);
  }

  // Удаляем переменные модуля «Автозапчасти».
  db_delete('variable')
    ->condition('name', 'site_commerce_auto_%', 'LIKE')
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Функция: массив полей.
 */
function _site_commerce_auto_installed_fields() {
  $t = get_t();
  $fields = array(
    'site_commerce_auto_terms' => array(
      'field_name'  => 'field_site_commerce_auto_terms',
      'type'        => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          0 => array(
            'vocabulary' => 'site_commerce_auto_vocabulary',
            'parent' => 0,
          ),
        ),
      ),
      'translatable' => TRUE,
    ),
    'site_commerce_contractor' => array(
      'field_name'  => 'field_site_commerce_contractor',
      'type'        => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          0 => array(
            'vocabulary' => 'site_commerce_contractors_vocabulary',
            'parent' => 0,
          ),
        ),
      ),
      'translatable' => TRUE,
    ),
    'site_commerce_auto_recid' => array(
      'field_name'  => 'field_site_commerce_recid',
      'type'        => 'text',
      'cardinality' => 1,
      'settings'    => array(
        'max_length' => 255,
      ),
      'translatable' => FALSE,
    ),
    'site_commerce_auto_supid' => array(
      'field_name'  => 'field_site_commerce_supid',
      'type'        => 'text',
      'cardinality' => 1,
      'settings'    => array(
        'max_length' => 255,
      ),
      'translatable' => FALSE,
    ),
    'site_commerce_auto_oem' => array(
      'field_name'  => 'field_site_commerce_oem',
      'type'        => 'text',
      'cardinality' => 1,
      'settings'    => array(
        'max_length' => 255,
      ),
      'translatable' => FALSE,
    ),
    'site_commerce_auto_orig' => array(
      'field_name'  => 'field_site_commerce_orig',
      'type'        => 'text',
      'cardinality' => 1,
      'settings'    => array(
        'max_length' => 255,
      ),
      'translatable' => FALSE,
    ),
    'site_commerce_auto_trade_mark' => array(
      'field_name'  => 'field_site_commerce_trade_mark',
      'type'        => 'text',
      'cardinality' => 1,
      'settings'    => array(
        'max_length' => 255,
      ),
      'translatable' => FALSE,
    ),
    'site_commerce_auto_car' => array(
      'field_name'   => 'field_site_commerce_car',
      'type'         => 'text_long',
      'cardinality'  => 1,
      'settings'     => array(
      'max_length'   => 20000,
      ),
      'translatable' => TRUE,
    ),
  );
  return $fields;
}

/**
 * Функция: создание массива инстанций полей.
 */
function _site_commerce_auto_installed_instances() {
  $t = get_t();
  $instances = array(
    'site_commerce_auto_code' => array(
      'field_name' => 'field_site_commerce_code',
      'label'       => $t('The part number'),
      'required' => FALSE,
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'site_commerce_auto_taxonomy' => array(
      'field_name' => 'field_site_commerce_auto_terms',
      'label' => $t('The category'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select',
      ),
      'default_value' => array(0 => array('tid' => variable_get('site_commerce_auto_default_term'))),
    ),
    'site_commerce_auto_contractor' => array(
      'field_name' => 'field_site_commerce_contractor',
      'label' => $t('The contractor'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_select',
      ),
    ),
    'site_commerce_auto_oem' => array(
      'field_name' => 'field_site_commerce_oem',
      'label'      => $t('The OEM number'),
      'required'   => FALSE,
      'widget'     => array(
        'type' => 'text_textfield',
      ),
    ),
    'site_commerce_auto_orig' => array(
      'field_name' => 'field_site_commerce_orig',
      'label'      => $t('The catalogue number'),
      'required'   => FALSE,
      'widget'     => array(
        'type' => 'text_textfield',
      ),
      'display'    => array(
        'site_commerce_auto_node_list' => array(
          'label' => 'hidden',
          'type' => 'site_commerce_auto',
        ),
      ),
    ),
    'site_commerce_auto_trade_mark' => array(
      'field_name' => 'field_site_commerce_trade_mark',
      'label'      => $t('The manufacturer product'),
      'required'   => FALSE,
      'widget'     => array(
        'type' => 'text_textfield',
      ),
      'display'    => array(
        'site_commerce_auto_node_list' => array(
          'label' => 'hidden',
          'type' => 'site_commerce_auto',
        ),
      ),
    ),
    'site_commerce_auto_car' => array(
      'field_name' => 'field_site_commerce_car',
      'label'      => $t('The car'),
      'required'   => FALSE,
      'widget'     => array(
        'type' => 'text_textarea',
      ),
    ),
    'site_commerce_auto_recid' => array(
      'field_name' => 'field_site_commerce_recid',
      'label'      => $t('The unique number of a product RecID'),
      'required'   => FALSE,
      'widget'     => array(
        'type' => 'text_textfield',
      ),
    ),
    'site_commerce_auto_supid' => array(
      'field_name' => 'field_site_commerce_supid',
      'label'      => $t('The unique number of a product SupID'),
      'required'   => FALSE,
      'widget'     => array(
        'type' => 'text_textfield',
      ),
    ),
    'site_commerce_auto_cost' => array(
      'field_name' => 'field_site_commerce_cost',
      'label' => $t('The cost'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'number',
      ),
      'settings' => array(
        'min' => '0',
        'max' => '1000000',
        'prefix' => '',
        'suffix' => '',
      ),
      'display' => array(
        'default' => array(
          'settings' => array(
            'scale' => 2,
            'thousand_separator' => ',',
            'decimal_separator' => '.',
            'prefix_suffix' => FALSE,
          ),
        ),
      ),
      'default_value' => array(0 => array('value' => 0)),
    ),
    'site_commerce_auto_quantity' => array(
      'field_name' => 'field_site_commerce_quantity',
      'label' => $t('The quantity in stock'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'number_integer',
        ),
      ),
      'settings' => array(
        'min' => 0,
      ),
      'default_value' => array(0 => array('value' => 1)),
    ),
    'site_commerce_auto_measure' => array(
      'field_name' => 'field_site_commerce_measure',
      'label' => $t('The unit of measure of quantity'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_select',
      ),
    ),
    'site_commerce_auto_image' => array(
      'field_name' => 'field_site_commerce_image',
      'label' => $t('The images'),
      'required' => FALSE,
      'settings' => array(
        'file_directory' => 'pictures/site_commerce_auto',
        'file_extensions' => 'jpg gif png jpeg',
        'max_filesize' => '10 M',
        'max_resolution' => '1024x768',
        'alt_field' => TRUE,
        'title_field' => TRUE,
      ),
      'widget' => array('type' => 'image_image',),
      'display' => array(
        'default' => array(
          'type' => 'image',
        ),
      ),
    ),
    'site_commerce_photo_albums' => array(
      'field_name' => 'field_site_commerce_photo_albums',
      'label' => $t('The categories of photo albums'),
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_buttons',
      ),
    ),
    'site_commerce_file' => array(
      'field_name' => 'field_site_commerce_file',
      'label' => $t('The files'),
      'required' => FALSE,
      'settings' => array(
        'file_directory' => 'documents/site_commerce',
        'file_extensions' => variable_get('site_files_extensions', 'txt doc docx pdf xls xlsx odt rtf jpg gif png jpeg rar zip 7z bzip2 gzip tar wim xz'),
        'max_filesize' => variable_get('site_files_size', '10') . ' M',
        'description_field' => TRUE,
      ),
      'widget' => array('type' => 'file_generic'),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'file_default',
        ),
      ),
    ),
  );

  return $instances;
}

/**
 * Language update and db structure.
 */
function site_commerce_auto_update_7000() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  // Подключаем файл с функциями для работы.
  module_load_include('install', 'site_commerce', 'site_commerce');

  // Создание полей.
  foreach (_site_commerce_installed_taxonomy_fields() as $field) {
    $value = field_info_field($field['field_name']);
    if (!$value) {
      field_create_field($field);
    }
  }

  // Cоздаём экземпляры полей.
  foreach (_site_commerce_installed_taxonomy_instances() as $instance) {
    $instance['entity_type'] = 'taxonomy_term';
    $instance['bundle'] = 'site_commerce_auto_vocabulary';
    $value = field_info_field($instance['field_name']);
    if ($value) {
      field_create_instance($instance);
    }
  }
}

/**
 * Language update and db structure.
 */
function site_commerce_auto_update_7001() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  // Создание полей.
  foreach (_site_commerce_auto_installed_fields() as $field) {
    $field_info = field_info_field($field['field_name']);
    if (!$field_info) {
      field_create_field($field);
    }
  }

  // Cоздаём экземпляры полей.
  foreach (_site_commerce_auto_installed_instances() as $instance) {
    if ($instance['field_name'] == 'field_site_commerce_contractor') {
      $instance['entity_type'] = 'site_commerce';
      $instance['bundle'] = 'site_commerce_auto';

      // Если тип поля существует, а экземпляр отсутствует.
      // Создаем экземпляр поля.
      $field = field_info_field($instance['field_name']);
      $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
      if ($field && !$instance_info) {
        field_create_instance($instance);
      }
    }
  }
  return 'Language update and db structure of site commerce auto updated';
}

/**
 * Language update.
 */
function site_commerce_auto_update_7002() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
}

/**
 * Language update.
 */
function site_commerce_auto_update_7003() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
}

/**
 * Database update.
 */
function site_commerce_auto_update_7004() {
  //----------------------------------------------------------------------------
  // Изменяем значения экземпляра поля field_site_commerce_tags.
  //----------------------------------------------------------------------------

  // Получаем массив с параметрами экземпляра.
  $entity_type = 'taxonomy_term';
  $field_name = 'field_site_commerce_tags';
  $bundle_name = 'site_commerce_auto_vocabulary';
  $instance_info = field_info_instance($entity_type, $field_name, $bundle_name);

  // Изменяем параметры.
  $instance_info['widget']['type'] = 'text_textarea';
  unset($instance_info['widget']['settings']['size']);

  // Сохраняем изменения.
  field_update_instance($instance_info);

  //----------------------------------------------------------------------------
  // Изменяем значения экземпляра поля field_site_commerce_tags.
  //----------------------------------------------------------------------------

  // Получаем массив с параметрами экземпляра.
  $entity_type = 'taxonomy_term';
  $field_name = 'field_image';
  $bundle_name = 'site_commerce_auto_vocabulary';
  $instance_info = field_info_instance($entity_type, $field_name, $bundle_name);

  // Удаляем существующий экземпляр.
  field_delete_instance($instance_info, $field_cleanup = TRUE);

  // Создание экземпляров полей для словаря таксономии.
  module_load_include('install', 'site_commerce', 'site_commerce');
  foreach (_site_commerce_installed_taxonomy_instances() as $instance) {
    $instance['entity_type'] = 'taxonomy_term';
    $instance['bundle'] = 'site_commerce_auto_vocabulary';

    // Если тип поля существует, а экземпляр отсутствует.
    // Создаем экземпляр поля.
    $field = field_info_field($instance['field_name']);
    $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
    if ($field && !$instance_info) {
      field_create_instance($instance);
    }
  }
}

/**
 * Database update.
 */
function site_commerce_auto_update_7005() {
  // Изменяем названия поля field_site_commerce_taxonomy.
  $name = 'field_site_commerce_auto_terms';
  $new_name = 'field_category_' . variable_get('site_commerce_auto_vocabulary');
  $field_scheme = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  kvantstudio_rename_field($name, $new_name, $field_scheme);

  // Удаляем переменные.
  variable_del('site_commerce_auto_vocabulary');

  // Clear the field info and field data caches.
  field_cache_clear();

  return 'The structure of a database was updated.';
}

/**
 * Language update.
 */
function site_commerce_auto_update_7006() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
}

/**
 * Vocabulary create.
 */
function site_commerce_auto_update_7007() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  // Создаем словари для модуля.
  _site_commerce_auto_create_vocabularies();
}

/**
 * Language update.
 */
function site_commerce_auto_update_7008() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
}

/**
 * Language update.
 */
function site_commerce_auto_update_7009() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
}

/**
 * Update vocabulary name.
 */
function site_commerce_auto_update_7010() {
  // Обновляем название словарей, которые могут быть не переведены.
  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_categories');
  $vocabulary->name = t('Categories of autospare parts');
  $vocabulary->description = t('The dictionary for accommodation of categories of autospare parts.');
  taxonomy_vocabulary_save($vocabulary);

  return 'The name of vocabulary has been updated successfully.';
}

/**
 * Language update.
 */
function site_commerce_auto_update_7011() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
}

/**
 * Language update and db structure.
 */
function site_commerce_auto_update_7012() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  // Удаляем переменные.
  variable_del('site_commerce_auto_vocabulary');

  // Cоздаём экземпляры полей.
  foreach (_site_commerce_auto_installed_instances() as $instance) {
    if ($instance['field_name'] == 'field_site_commerce_code') {
      $instance['entity_type'] = 'site_commerce';
      $instance['bundle'] = 'site_commerce_auto';
      // Если тип поля существует, а экземпляр отсутствует.
      // Создаем экземпляр поля.
      $field = field_info_field($instance['field_name']);
      $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
      if ($field && !$instance_info) {
        field_create_instance($instance);
      }
    }
  }

  $field_info = field_info_field('field_site_commerce_car');
  $field_info['settings']['max_length'] = 20000;
  field_update_field($field_info);
  db_update('field_config')
  ->fields(array(
    'type' => 'text_long',
  ))
  ->condition('field_name', 'field_site_commerce_car')
  ->execute();

  // Clear the field info and field data caches.
  field_cache_clear();

  cache_clear_all('variables', 'cache_bootstrap');

  return 'Language update and db structure of site commerce updated';
}

/**
 * Language update and db structure.
 */
function site_commerce_auto_update_7013() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  // Allows a module to update the database for fields and columns it controls.
  field_associate_fields('site_commerce');

  // Удаляем не используемое поле.
  $field_name = 'field_site_commerce_car_brand';
  field_delete_field($field_name);
  $instance = field_info_instance('site_commerce', $field_name, 'site_commerce_auto');
  field_delete_instance($instance);

  $field_name = 'field_site_commerce_sup_article';
  field_delete_field($field_name);
  $instance = field_info_instance('site_commerce', $field_name, 'site_commerce_auto');
  field_delete_instance($instance);

  $field_name = 'field_site_commerce_car';
  field_delete_field($field_name);
  $instance = field_info_instance('site_commerce', $field_name, 'site_commerce_auto');
  field_delete_instance($instance);

  // Clear the field info and field data caches.
  field_cache_clear();

  // Создание полей, которые будут добавлены к типу товара автозапчасти.
  foreach (_site_commerce_auto_installed_fields() as $field) {
    $field_info = field_info_field($field['field_name']);
    if (!$field_info) {
      field_create_field($field);
    }
  }

  // Создаём поля и сущности.
  $types = site_commerce_type_get_types();
  _site_commerce_type_installed_instances($types['site_commerce_auto']);

  // Изменение параметров поля.
  $query = db_select('field_config_instance', 'i');
  $query->fields('i', array('data'));
  $query->condition('i.field_name', 'field_site_commerce_oem');
  $result = $query->execute()->fetchField();
  $data = unserialize($result);

  $data['label'] = t('OEM number');

  db_update('field_config_instance')
  ->fields(array(
    'data' => serialize($data),
  ))
  ->condition('field_name', 'field_site_commerce_oem')
  ->execute();

  // Изменение параметров поля.
  $query = db_select('field_config_instance', 'i');
  $query->fields('i', array('data'));
  $query->condition('i.field_name', 'field_site_commerce_orig');
  $result = $query->execute()->fetchField();
  $data = unserialize($result);

  $data['label'] = t('Catalogue number');

  db_update('field_config_instance')
  ->fields(array(
    'data' => serialize($data),
  ))
  ->condition('field_name', 'field_site_commerce_orig')
  ->execute();

  // Изменение параметров поля.
  $query = db_select('field_config_instance', 'i');
  $query->fields('i', array('data'));
  $query->condition('i.field_name', 'field_site_commerce_trade_mark');
  $result = $query->execute()->fetchField();
  $data = unserialize($result);

  $data['label'] = t('Manufacturer product');

  db_update('field_config_instance')
  ->fields(array(
    'data' => serialize($data),
  ))
  ->condition('field_name', 'field_site_commerce_trade_mark')
  ->execute();

  // Изменение параметров поля.
  $query = db_select('field_config_instance', 'i');
  $query->fields('i', array('data'));
  $query->condition('i.field_name', 'field_site_commerce_recid');
  $result = $query->execute()->fetchField();
  $data = unserialize($result);

  $data['label'] = t('Unique number of a product RecID');

  db_update('field_config_instance')
  ->fields(array(
    'data' => serialize($data),
  ))
  ->condition('field_name', 'field_site_commerce_recid')
  ->execute();

  // Purge all field infromation.
  field_purge_batch(1000);

  // Clear the field info and field data caches.
  field_cache_clear();

  $vocabulary = taxonomy_vocabulary_machine_name_load('site_commerce_auto_vocabulary');
  if ($vocabulary) {
    $vocabulary->name = t('Categories of auto parts');
    $vocabulary->description = t('The dictionary for accommodation of categories of auto parts.');
    taxonomy_vocabulary_save($vocabulary);
  }

  // Обновляем категорию.
  $tid = variable_get('site_commerce_auto_default_term');
  $term = taxonomy_term_load($tid);
  if ($term) {
    $term->name = t('Other auto parts');
    $term->description = t('The dictionary for accommodation of categories of auto parts.');
    taxonomy_term_save($term);
  }

  db_update('site_commerce_type')
  ->fields(array(
    'name' => t('Auto part'),
    'description' => t('Type product, which is designed to create the directory auto parts and accessories.'),
  ))
  ->condition('type', 'site_commerce_auto')
  ->execute();
}

/**
 * Update db structure.
 */
function site_commerce_auto_update_7014() {
  /**
   * Изменяет тип поля с textfield на textarea.
   */
  $field_name = "field_site_commerce_car";

  // Update field_config
  $row = db_query("SELECT id,data FROM {field_config} WHERE field_name = '{$field_name}' ")->fetchObject();
  $row->data=unserialize($row->data);
  unset($row->data['settings']['max_length']);
  $row->type="text_long";
  drupal_write_record("field_config", $row, "id");

  // Update field_config_instance
  $row = db_query("SELECT id,data FROM {field_config_instance} WHERE field_name = '{$field_name}' ")->fetchObject();
  $row->data=unserialize($row->data);
  $row->data['widget']['type']='text_textarea';
  unset($row->data['widget']['settings']['size']);
  $row->data['widget']['settings']['rows']=3;
  drupal_write_record("field_config_instance", $row, "id");


  // Update the field table
  db_change_field("field_data_{$field_name}", "{$field_name}_value", "{$field_name}_value", array(
    "type" => "varchar",
    "length" => "20000",
  ));
  db_change_field("field_revision_{$field_name}", "{$field_name}_value", "{$field_name}_value", array(
    "type" => "varchar",
    "length" => "20000",
  ));

  // Clear caches.
  field_cache_clear(TRUE);
}

/**
 * Language update.
 */
function site_commerce_auto_update_7015() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
}

/**
 * Language and db structure update.
 */
function site_commerce_auto_update_7016() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }
  variable_initialize();
  variable_set('pathauto_taxonomy_term_site_commerce_auto_vocabulary_pattern', '[term:category-path]');
}

/**
 * Language and db structure update.
 */
function site_commerce_auto_update_7017() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  variable_initialize();

  $default_term = variable_get('site_commerce_auto_default_term');

  // Удаляем переменные модуля «Автозапчасти».
  db_delete('variable')
    ->condition('name', 'site_commerce_auto_%', 'LIKE')
    ->execute();
  variable_set('site_commerce_auto_default_term', $default_term);

  variable_set('site_commerce_catalog_link', 'tovary');

  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Language and db structure update.
 */
function site_commerce_auto_update_7018() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  // Создание сущностей для полей типа товара по умолчанию.
  foreach (_site_commerce_auto_installed_instances() as $instance) {
    $instance['entity_type'] = 'site_commerce';
    $instance['bundle'] = 'site_commerce_auto';

    // Если тип поля существует, а экземпляр отсутствует.
    // Создаем экземпляр поля.
    $field = field_info_field($instance['field_name']);
    $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
    if ($field && !$instance_info) {
      field_create_instance($instance);
    }
  }

  return 'Language and db structure updated.';
}

/**
 * Language and db structure update.
 */
function site_commerce_auto_update_7019() {
  // Обновляем перевод модуля.
  if (module_exists('locale')) {
    locale_system_update(array('site_commerce_auto'));
  }

  // Включаем необходимые модули.
  module_enable(array('site_photogallery'), TRUE);

  // Создаём поля и сущности для базового типа товара.
  $types = site_commerce_type_get_types();
  _site_commerce_type_installed_instances($types['site_commerce_auto']);

  // Создание экземпляров полей для словаря site_commerce_auto_vocabulary.
  foreach (_site_commerce_installed_taxonomy_instances() as $instance) {
    $instance['entity_type'] = 'taxonomy_term';
    $instance['bundle'] = 'site_commerce_auto_vocabulary';

    // Если тип поля существует, а экземпляр отсутствует.
    // Создаем экземпляр поля. Запрещаем создание поля стоимость.
    if ($instance['field_name'] <> 'field_site_commerce_cost') {
      $field = field_info_field($instance['field_name']);
      $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
      if ($field && !$instance_info) {
        field_create_instance($instance);
      }
    }
  }

  cache_clear_all();

  return 'Language and db structure updated.';
}